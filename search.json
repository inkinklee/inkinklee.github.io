[{"title":"Hexo公式问题 - 多行公式显示","path":"/2022-06-05/Hexo公式问题-多行公式显示/","content":"Hexo 公式显示问题苦天下久矣。 写这篇文章的初衷是因为最近在用多行公式时（主要是换行与对齐）出现了问题，\\begin&#123;align&#125; \\end&#123;align&#125; 竟然渲染不了。我用的是广被推崇的 hexo-renderer-markdown-it-plus，没想到也会在这个地方出现问题。 所以先用 \\begin&#123;array&#125;&#123;rcl&#125; \\end&#123;array&#125; 凑活一下。表格形式与纯粹的公式毕竟不同，是以行内公式的形式渲染的【从积分符号 ∫\\int∫ 的大小可以明显看出区别】，同时必须在每行之间再分行，否则会显得拥挤。 如下： ∫csc⁡udu=∫sin⁡usin⁡2udu=−∫d(cos⁡u)1−cos⁡2u=−12∫(11−cos⁡u+11+cos⁡u)d(cos⁡u)=−12[−ln⁡(1−cos⁡u)+ln⁡(1+cos⁡u)+C]=ln⁡∣1−cos⁡u1+cos⁡u∣+C=ln⁡∣2sin⁡u22cos⁡u2∣+C=ln⁡∣tan⁡u2∣+C\\begin{array}{rcl} \\int \\csc udu &amp;=&amp; \\int\\cfrac{\\sin u}{\\sin^2 u}du=-\\int\\cfrac{d(\\cos u)}{1-\\cos^2 u} \\\\ &amp;=&amp; -\\frac{1}{2}\\int(\\cfrac{1}{1-\\cos u}+\\cfrac{1}{1+\\cos u})d(\\cos u)\\\\ &amp;=&amp; -\\frac{1}{2}[-\\ln(1-\\cos u)+\\ln(1+\\cos u)+C]\\\\ &amp;=&amp; \\ln\\left|\\sqrt{\\frac{1-\\cos u}{1+\\cos u}}\\right|+C=\\ln\\left|\\sqrt{\\frac{2\\sin^ \\frac{u}{2}}{2\\cos^ \\frac{u}{2}}}\\right|+C\\\\ &amp;=&amp; \\ln\\left|\\tan\\frac{u}{2}\\right|+C \\end{array}∫cscudu​=====​∫sin2usinu​du=−∫1−cos2ud(cosu)​−21​∫(1−cosu1​+1+cosu1​)d(cosu)−21​[−ln(1−cosu)+ln(1+cosu)+C]ln∣∣∣∣​1+cosu1−cosu​​∣∣∣∣​+C=ln∣∣∣∣∣​2cos2u​2sin2u​​​∣∣∣∣∣​+Cln∣∣∣​tan2u​∣∣∣​+C​ ∫csc⁡udu=∫sin⁡usin⁡2udu=−∫d(cos⁡u)1−cos⁡2u=−12∫(11−cos⁡u+11+cos⁡u)d(cos⁡u)=−12[−ln⁡(1−cos⁡u)+ln⁡(1+cos⁡u)+C]=ln⁡∣1−cos⁡u1+cos⁡u∣+C=ln⁡∣2sin⁡u22cos⁡u2∣+C=ln⁡∣tan⁡u2∣+C\\begin{array}{rcl} \\int \\csc udu &amp;=&amp; \\int\\cfrac{\\sin u}{\\sin^2 u}du=-\\int\\cfrac{d(\\cos u)}{1-\\cos^2 u} \\\\ &amp;=&amp; -\\frac{1}{2}\\int(\\cfrac{1}{1-\\cos u}+\\cfrac{1}{1+\\cos u})d(\\cos u)\\\\ \\\\ &amp;=&amp; -\\frac{1}{2}[-\\ln(1-\\cos u)+\\ln(1+\\cos u)+C]\\\\ \\\\ &amp;=&amp; \\ln\\left|\\sqrt{\\frac{1-\\cos u}{1+\\cos u}}\\right|+C=\\ln\\left|\\sqrt{\\frac{2\\sin^ \\frac{u}{2}}{2\\cos^ \\frac{u}{2}}}\\right|+C\\\\ \\\\ &amp;=&amp; \\ln\\left|\\tan\\frac{u}{2}\\right|+C \\end{array}∫cscudu​=====​∫sin2usinu​du=−∫1−cos2ud(cosu)​−21​∫(1−cosu1​+1+cosu1​)d(cosu)−21​[−ln(1−cosu)+ln(1+cosu)+C]ln∣∣∣∣​1+cosu1−cosu​​∣∣∣∣​+C=ln∣∣∣∣∣​2cos2u​2sin2u​​​∣∣∣∣∣​+Cln∣∣∣​tan2u​∣∣∣​+C​ 这属于治标不治本的方法，所以在有时间的时候还是寻求根本的解决方法。 于是开始了满满的搜索之路，结果找到了三个方案，实际上是三个插件或者说是渲染器： hexo-renderer-pandoc 官网：https://pandoc.org/ npmjs：https://www.npmjs.com/package/hexo-renderer-pandoc github：https://github.com/wzpan/hexo-renderer-pandoc 这个插件用过的人都说好，是一个不错的解决方案，使用时需要先卸载原生渲染器，再下载该插件： 12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-pandoc --save 如果这时重新生成博客的话，一定会报错，原因是没有找到 pandoc 啊，明明下载了插件为什么还会报错？因为它还需要 pandoc 软件本地支持。在本地没问题，安装一个最新版本的就可以，获取本地软件-windows版。如果要使用 Githua Actions 自动发布博客，那还需要为pandoc进行额外配置： 根据官方文档，该配置如下： 1234567891011name: Simple Usageon: pushjobs: convert_via_pandoc: runs-on: ubuntu-18.04 steps: - uses: docker://pandoc/core:2.9 with: args: &quot;--help&quot; # gets appended to pandoc command 这个 Github Actions 我没有试验，不过本地渲染效果确实还可以。 pandoc 的优点显而易见，渲染效果好。缺点也很明显，部署麻烦，而且据搜索到的结果显示耗费资源多，加载缓慢。如果我目前使用的渲染器不行了之后，或许会回过头来研究 pandoc。 markdown-it-latex2img npmjs：https://www.npmjs.com/package/markdown-it-latex2img github：https://github.com/MakerGYT/markdown-it-latex2img#hexo 严格意义上讲，它不是一个渲染器，而是一个渲染器的拓展： 它不使用原生渲染器，以及任何其他的渲染器，而是 hexo-renderer-markdown-it，安装： 12npm i hexo-renderer-markdown-it --savenpm i markdown-it-latex2img --save 它是在服务器上工作的，可以成功渲染多行公式 \\begin&#123;align&#125; \\end&#123;align&#125;，但对于一些显然的内容却不能成功渲染: \\Alpha 从名字上也可以看出来，返回的公式是图片形式的。简短的，不占用篇幅的公式呈现效果没什么大问题，但是大片的公式图片就会随着页面的放缩而放缩，影响阅读效果。 另外，如果他的服务器坏掉了，公式图片也就呈现不了，搜索中发现有用户出现过这个问题。 在这里提供在 _config.yml 中的配置： 12345markdown: plugins: - name: markdown-it-latex2img options: style: &#x27;filter: opacity(90%);transform:scale(0.85);vertical-align:middle;text-align:center;&#x27; hexo-renderer-markdown-it-plus github：https://github.com/KaTeX/KaTeX 官网：https://katex.org/docs/browser.html 这是我目前正在使用的公式渲染器，十分优雅。但是会出现开篇所说的多行公式显示的问题。实际上，该问题的原因不在该渲染器，因为渲染效果是依靠引入的 katex。所以我把目光放在 katex 上。通过搜索，我发现 Issue #445，在当时（16年左右）以及后续相当长一段时间，equation 环境不被支持，同时不能支持的还有 aligned、aligne 等语法。而我引入的 js 和 css 是早期的版本（0.12版），当时并没有解决这一问题。现在我将其更换为目前最新的 0.16 版本，即可完美支持。示例如下： ∫csc⁡udu=∫sin⁡usin⁡2udu=−∫d(cos⁡u)1−cos⁡2u=−12∫(11−cos⁡u+11+cos⁡u)d(cos⁡u)=−12[−ln⁡(1−cos⁡u)+ln⁡(1+cos⁡u)+C]=ln⁡∣1−cos⁡u1+cos⁡u∣+C=ln⁡∣2sin⁡u22cos⁡u2∣+C=ln⁡∣tan⁡u2∣+C\\begin{aligned} \\int \\csc udu &amp;= \\int\\cfrac{\\sin u}{\\sin^2 u}du=-\\int\\cfrac{d(\\cos u)}{1-\\cos^2 u}\\\\ &amp;= -\\frac{1}{2}\\int(\\cfrac{1}{1-\\cos u}+\\cfrac{1}{1+\\cos u})d(\\cos u)\\\\ &amp;= -\\frac{1}{2}[-\\ln(1-\\cos u)+\\ln(1+\\cos u)+C]\\\\ &amp;= \\ln\\left|\\sqrt{\\frac{1-\\cos u}{1+\\cos u}}\\right|+C=\\ln\\left|\\sqrt{\\frac{2\\sin^ \\frac{u}{2}}{2\\cos^ \\frac{u}{2}}}\\right|+C\\\\ &amp;= \\ln\\left|\\tan\\frac{u}{2}\\right|+C \\end{aligned} ∫cscudu​=∫sin2usinu​du=−∫1−cos2ud(cosu)​=−21​∫(1−cosu1​+1+cosu1​)d(cosu)=−21​[−ln(1−cosu)+ln(1+cosu)+C]=ln∣∣∣∣∣∣​1+cosu1−cosu​​∣∣∣∣∣∣​+C=ln∣∣∣∣∣∣∣​2cos2u​2sin2u​​​∣∣∣∣∣∣∣​+C=ln∣∣∣∣​tan2u​∣∣∣∣​+C​ \\begin{align} f(x)&amp;=(m+n)^2\\\\ &amp;=m^2+2mn+n^2\\\\ \\end{align} \\begin{alignat}{2} f(x) &amp; = (m-n)^2 \\\\ f(x) &amp; = (-m+n)^2 \\\\ &amp; = m^2-2mn+n^2 \\\\ \\end{alignat} 代码如下： 123456789101112131415161718192021222324$$\\begin&#123;aligned&#125;\\int \\csc udu &amp;= \\int\\cfrac&#123;\\sin u&#125;&#123;\\sin^2 u&#125;du=-\\int\\cfrac&#123;d(\\cos u)&#125;&#123;1-\\cos^2 u&#125;\\\\&amp;= -\\frac&#123;1&#125;&#123;2&#125;\\int(\\cfrac&#123;1&#125;&#123;1-\\cos u&#125;+\\cfrac&#123;1&#125;&#123;1+\\cos u&#125;)d(\\cos u)\\\\&amp;= -\\frac&#123;1&#125;&#123;2&#125;[-\\ln(1-\\cos u)+\\ln(1+\\cos u)+C]\\\\&amp;= \\ln\\left|\\sqrt&#123;\\frac&#123;1-\\cos u&#125;&#123;1+\\cos u&#125;&#125;\\right|+C=\\ln\\left|\\sqrt&#123;\\frac&#123;2\\sin^ \\frac&#123;u&#125;&#123;2&#125;&#125;&#123;2\\cos^ \\frac&#123;u&#125;&#123;2&#125;&#125;&#125;\\right|+C\\\\&amp;= \\ln\\left|\\tan\\frac&#123;u&#125;&#123;2&#125;\\right|+C\\end&#123;aligned&#125;$$$$\\begin&#123;align&#125;f(x)&amp;=(m+n)^2\\\\&amp;=m^2+2mn+n^2\\\\ \\end&#123;align&#125;$$$$\\begin&#123;alignat&#125;&#123;2&#125;f(x) &amp; = (m-n)^2 \\\\f(x) &amp; = (-m+n)^2 \\\\&amp; = m^2-2mn+n^2 \\\\\\end&#123;alignat&#125;$$ 这里提供最新的引入内容： 1234567&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fastly.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.css&quot; integrity=&quot;sha384-Xi8rHCmBmhbuyyhbI88391ZKP2dmfnOl4rT9ZfRI7mLTdk1wblIUnrIq35nqwEvC&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;!-- The loading of KaTeX is deferred to speed up page rendering --&gt;&lt;script defer src=&quot;https://fastly.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.js&quot; integrity=&quot;sha384-X/XCfMm41VSsqRNQgDerQczD69XqmjOOOwYQvr/uuC+j4OPoNhVgjdGFwhvN02Ja&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;!-- To automatically render math in text elements, include the auto-render extension: --&gt;&lt;script defer src=&quot;https://fastly.jsdelivr.net/npm/katex@0.16.0/dist/contrib/auto-render.min.js&quot; integrity=&quot;sha384-+XBljXPPiv+OzfbB3cVmLHf4hdUFHlWNZN5spNQ7rmHTXpd7WvJum6fIACpNNfIR&quot; crossorigin=&quot;anonymous&quot;onload=&quot;renderMathInElement(document.body);&quot;&gt;&lt;/script&gt; 最后补充一点，hexo-renderer-markdown-it-plus 是 hexo-renderer-markdown-it 的升级版，渲染速度更快，同时也具备增加各类插件的功能。这里需要提到 markdown-it-katex 这个插件，它实际上是对 katex 的支持。但我不建议使用，原因在于它很久没有维护了，也就无法更新 katex 的最新特性，而且它也要额外引入 katex 的 .css 文件，所以为何不直接引用 katex 的 js 与 css呢？","tags":["Hexo","Katex"],"categories":["博客折腾"]},{"title":"BBer：哔哔点啥-配置记录","path":"/2022-01-19/哔哔点啥-配置记录/","content":"配置 哔哔点啥 的记录和踩坑，前部分是哔哔发展历程，后部分是 哔哔点啥2.0 配置 1 哔哔发展历程 Artitalk.js 这个应该是比较早的 说说 了，基于 LeanCloud，很多博客都集成了这个说说功能，可以说是现在说说的开山？ a. 基本功能具备： 支持增删查改，支持对每条说说的评论，支持 Markdown、html语法，支持图片上传。 b. 配置方便灵活： 后端 leancloud 配置过程简单，前端就是一般的 html 几乎可用于任何框架。 c. 安全性一般： 由于 leancloud 的机制，应用的 Appid 以及 Appkey 均会暴漏在前端，可能会遭受到其他人的恶意攻击。 如果你在担心这个问题，你可以使用 Artitalk_SafeMode。 问题是，每次发布说说需要打开博客说说页面登录，发布一条说说和发布一个评论差不多，比较麻烦。 BBtalk 该说说，由 heson 大佬开发，最开始在其博客连载开发过程。 开发历程可见大佬博客 ：黑石博客分类“哔哔”下的文章 其起源于 熊野大佬 的 哔哔点啥，换个舒服的姿势 ，基于静态存储+云函数+微信公众号开发 黑石大佬将其适配了多个主题，并开发了 Hexo-bb 插件，可以方便的在任何一个主题使用，后端依然使用 leancloud ，支持微信公众号发文。 BBer：哔哔点啥 微信公众号 2.0 这是 熊野大佬 哔哔点啥的升级版，由 林帅 开发，看博客评论都叫他木老师，事实上第一版的公众号发文也是放到了木老师的公众号上。 所以，实际上，BBtalk 和 BBer 是同源的，都是来自 熊野大佬 的版本。 2.0 和 1.0 的主要区别在于，使用的后端平台由 LeandCLoud 变化为 腾讯 CLoudBase，公众号支持由单用户扩展为多用户。 说说可以通过微信公众号发布（看文章封面图，就是那个公众号），目前已支持用户名绑定、解绑、发文字、发图片、追加、合并、删除、替换文字，还有显示哔哔列表、哔哔搜索！ 目前支持的命令如下： 1234567891011121314151617181920「哔哔秘笈」==================/l - 显示最近哔哔/s 关键词 - 搜索内容---------------/a 文字 - 追加文字到第1条/a数字 文字 - 追加文字到第几条，如 /a2 文字---------------/c - 合并前2条/c数字 - 合并前几条，如 /c3---------------/d - 删除第1条/d数字 - 删除第几条，如 /d2---------------/e 文字- 编辑替换第1条/e数字 文字 - 编辑替换第几条，如 /e2 文字---------------/f数字 - 批量删除前几条，如 /f2---------------/nobber - 解除绑定 同时 2.0 提供了 BBer-weixin 微信公众号的后端配置，可以完全把所有数据掌握在自己手里【用自己的公众号】 另外，有不少大佬给 BBer 扩展了功能，主要是前端部分以及发布方式 小康大佬 提供了美化的前端页面 和 浏览器扩展插件发布说说 Guo Le 在此基础上，加入了歌曲分享支持，对浏览器插件，不同浏览器设置不同的 from 源 同时由于 BBer 的发布接口简洁，可以通过 ios 快捷指令发布，android 也有 apk 支持。 所以本站选择了功能丰富的 哔哔点啥 2.0。 2 哔哔点啥-后端配置 这部分主要是原作者教程的搬运：BBer：哔哔点啥 微信公众号 2.0 ，但更详细了些。 原作者提供了腾讯云开发一键部署，但是其支持按量计费，不太经济。个人建议，手动部署就好了，麻烦是麻烦了点，但是有本文的帮助，相信一定不会有问题。 配置的时候最好手机在身边，需要多次扫码验证身份。 默认大家都有腾讯云的账号，我是在一开始建站的时候就用的腾讯云，没有的话先注册一个。 2.1 创建应用 2.1.1 新建环境 这里，选择空模板进入下一步，环境名称自由填写，推荐选择计费方式包年包月，实际上按小站的访问量和发说说的次数， 免费版 就够用了，不放心的话就采用基础版套餐1，先买个一个月，选择环境到期后自动降为免费版，到时候根据实际使用情况进行续费或者继续使用免费版。 唯一值得注意的是，建议创建上海环境，否则在前端页面配置时要指定 region: “ap-guangzhou” [2.1.1 新建环境 1] [2.1.1 新建环境 2] [2.1.1 新建环境 3] 2.1.2 环境-登录授权 选择 “匿名登录” 2.1.3 环境-安全配置 将你要使用哔哔页面的个人网站域名添加到 “WEB安全域名” 最好将你平时本地调试用的 localhost: 也添加进去，例如 hexo 本地发布默认 localhost:4000 [2.1.3 环境-安全配置 1] [2.1.3 环境-安全配置 2] 2.1.4 新建数据集合 进入数据库，新建数据集合，命名为 talks 点击创建好的数据集合 talks ➡ 点击 权限设置 ➡ 权限设置为 “所有用户可读，仅管理员可写” [2.1.4 新建数据集合 1] [2.1.4 新建数据集合 2] 第一个坑来了： 点击文档列表 ➡ 点击添加文档 字段设置为 `content` 值设置 为任意文本。 这一步是为了避免数据库中没有记录导致微信发布时写入失败，前人遇到的贼大的一个坑，直接在创建的时候解决。 2.2 云函数部署 2.2.1 新建云函数 点击侧边栏 基础服务-云函数 ➡ 点击新建云函数 ➡ 运行环境选择 Nodejs 10.15 ➡ 函数名称设置 bber （可自定义） 点击下一步 ➡ 描述部分随意，函数代码部分 复制 index.js 代码到函数代码框中，点确定。 点击创建好的 bber ， 点击函数代码，右键新建文件 package.json 文件 复制 package.json 代码丢入 package.json，点击 保存并安装依赖。 成功后，文件目录会出现 node_modules 文件夹 [2.2.1 新建云函数 1] [2.2.1 新建云函数 2] [2.2.1 新建云函数 3] [2.2.1 新建云函数 4] 2.2.2 环境-访问服务 新建，路径与云函数名匹配。 大概需要3-5分钟时间创建，创建好之后，点击触发路径或在浏览器中输入 1https://你后台显示的.ap-shanghai.app.tcloudbase.com/bber 会出现 &#123;&quot;content&quot;:&quot;key不匹配&quot;&#125; 则说明配置好了 这里说的 apikey 在云函数 index.js 的第8行，const serverkey = 'bber'，将其改为你自定义的 key 值，避免别人拿到你的信息绑定之后乱搞。 配置到这个地方，就可以绑定微信公众号发说说，可以直接使用作者的公众号【见封面，或者搜索哔哔点啥】 发送如下即可绑定成功 1/bber key值,https://你的云函数HTTP访问地址/bber key 值为你自定义的 const serverkey， https://你的云函数HTTP访问地址/bber 为你的触发路径 绑定成功后就可以发送哔哔了，数据都会储存在 前面创建的 talks 中。 3 哔哔点啥-前端配置 虽然目前后端可以接收到数据，并存储数据，但是，还是需要在页面呈现 这里可以直接使用小康大佬的美化 给 bber 换个皮肤 、ispeak-bber ： 12345678910111213141516171819202122232425&lt;div id=&#x27;speak&#x27;&gt;&lt;/speak&gt;&lt;!-- 使用markdown渲染 --&gt;&lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/ispeak-bber/ispeak-bber-md.min.js&quot; charset=&quot;utf-8&quot; &gt;&lt;/script&gt; --&gt;&lt;!-- 不使用markdown渲染 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/ispeak-bber/ispeak-bber.min.js&quot; charset=&quot;utf-8&quot; &gt;&lt;/script&gt;&lt;!-- 解析微信表情（参考：https://github.com/buddys/qq-wechat-emotion-parser） --&gt;&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/gh/buddys/qq-wechat-emotion-parser@master/dist/qq-wechat-emotion-parser.min.js&quot;&gt;&lt;/script&gt; --&gt;&lt;script&gt;ispeakBber .init(&#123; el: &#x27;#speak&#x27;, // 容器选择器 name: &#x27;DreamyTZK 🦄&#x27;, // 显示的昵称 envId: &#x27;腾讯云开发环境id&#x27;, // 环境id region: &#x27;ap-shanghai&#x27;, // 腾讯云地址，默认为上海 limit: 10, // 每次加载的条数，默认为5 avatar: &#x27;https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg&#x27;, fromColor:&#x27;rgb(245, 150, 170)&#x27;, // 下方标签背景颜色 默认 rgb(245, 150, 170) loadingImg: &#x27;https://7.dusays.com/2021/03/04/d2d5e983e2961.gif&#x27;, // 自定义loading的图片，示例值为默认值 dbName:&#x27;talks&#x27; // 数据的名称，默认talks，避免有人的命名不是这个，所以加入此配置字段。 &#125;) .then(function() &#123; // 哔哔加载完成后的回调函数，你可以写你自己的功能 console.log(&#x27;哔哔 加载完成&#x27;) &#125;)&lt;/script&gt; 如果需要支持歌曲分享，请看：ispeak-bber 前端美化增强版，支持歌曲分享 目前我的说说页面，说说总量的计算是没有显示的，这个问题有待研究。 具体到每个主题的配置要看每个主题的页面情况，大体都是新建 index.md 文件，将其直接复制进去就可以了。 stellar 适配：可见本文下方:前端页面的-stellar-主题适配 Butterfly 适配：Hexo-Butterfly说说朋友圈适配（哔哔 for 腾讯云）自用 4 哔哔点啥-微信公众号配置 这个配置因人而异，嫌麻烦可以直接用原作者的微信公众号，但是我希望将所有数据放在自己手里，所以用自己的公众号 这里的公众号个人的就可以，新注册的就行，没什么别的要求。 4.1 新建云函数 参考前面 哔哔点啥后端的配置过程。 创建云函数的时候一定记得修改运行环境为：Nodejs 10.15 如果使用默认的 Nodejs 12.16 需要将 package.json 中的 &quot;type&quot;: &quot;module&quot;, 删掉 原因在于作者发布的教程的这段时间里，ES Module 的版本迭代，一开始不再支持 require 而采用 import，除非在 package.json 中加入 &quot;type&quot;: &quot;module&quot;,。而最新版的 js 好像又解决了这个问题，不需要加入 &quot;type&quot;: &quot;module&quot;,，加入了反而会报错。 云函数命名为 bber-weixin index.js 和 package.json 来自于 https://github.com/lmm214/bber-weixin/tree/main/bber-weixin 4.2 获取公网 Ip 点击 bber-weixin 云函数，右上角 【编辑】，开启 【固定IP】，留存 公网固定IP。 [4.2 获取公网 Ip 1] [4.2 获取公网 Ip 2] 保存成功后，固定 IP 那里会出现一个 IP 地址，留存这个地址备用。 4.3 新建数据集合 进入数据库，新建数据集合，命名为 users 点击创建好的数据集合 users ➡ 点击 权限设置 ➡ 权限设置为 仅创建者及管理员可读写 该数据集合用于存储公众号的绑定的哔哔用户。 4.4 获取触发路径链接 进入 环境-访问服务 ，新建 /bber-weixin 触发路径 获取这个触发路径链接并留存，如以下格式： 123https://××××××.ap-shanghai.app.tcloudbase.com/bber-weixin或者https://自定义域名/bber-weixin 4.5 微信公众平台配置 打开 微信公众平台，进入开发-基本配置，获取 AppID 和 AppSecret 留存，修改IP白名单为上一步的 公网固定IP 。 继续服务器配置: URL 为 4.4 留存的触发链接； Token 可以自定义，原始代码中预设为 weixin 此时先不点提交，还要回到 云函数 配置。 4.6 回 bber-weixin 云函数 回 bber-weixin 云函数，填入微信公众号 AppID 和 AppSecret 保存。 1234const token = &#x27;weixin&#x27; // 微信公众号的服务器验证用的令牌 token，我自定义为了 ceshi123，这里就填 ceshi23//填入自己的微信公众号appid和appsecretvar wxappid = &#x27;微信公众号appid&#x27;, wxappsecret = &#x27;微信公众号appsecret&#x27;, 4.6 回 微信公众平台 点击提交，显示提交成功，之后启用服务器配置，很快就会生效。 4.7 回 bber-weixin 云函数 注释第44行代码，保存: 12345if(tmpStr == signature)&#123; //请求来源鉴权 //成功后注释下行代码 //return event.queryStringParameters.echostr //成功后注释本行代码 //成功后注释上行代码 到此，公众号配置完成，可以绑定自己的公众愉快的发布哔哔了。 我是自己手动部署，在这里踩得坑主要是运行环境不匹配和未建立 users 数据集，如果直接使用作者的一键部署可以避免这个问题，但是按量计费属实划不来 5 前端页面的 stellar 主题适配 stellar 主题没有给出太多自定义的空间，可以看到我的说说页面在顶部的 归档旁边 实际上的配置并不复杂 5.1 在根目录 source 新建 bbtalk 文件夹 文件夹建好后，新建一个 index.md 文件，这个文件用于存放前端代码 ，也就是哔哔页面 查看代码12345678910111213141516171819202122232425262728293031323334---menu_id: moresidebar: [welcome, recent]seo_title: 闲话comments: falsebreadcrumb: falseheader: false---&lt;div id=&#x27;speak&#x27;&gt;&lt;/speak&gt;&lt;!-- 使用markdown渲染 --&gt;&lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/ispeak-bber/ispeak-bber-md.min.js&quot; charset=&quot;utf-8&quot; &gt;&lt;/script&gt; --&gt;&lt;!-- 不使用markdown渲染 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/ispeak-bber/ispeak-bber.min.js&quot; charset=&quot;utf-8&quot; &gt;&lt;/script&gt;&lt;!-- 解析微信表情（参考：https://github.com/buddys/qq-wechat-emotion-parser） --&gt;&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/gh/buddys/qq-wechat-emotion-parser@master/dist/qq-wechat-emotion-parser.min.js&quot;&gt;&lt;/script&gt; --&gt;&lt;script&gt;ispeakBber .init(&#123; el: &#x27;#speak&#x27;, // 容器选择器 name: &#x27;DreamyTZK 🦄&#x27;, // 显示的昵称 envId: &#x27;腾讯云开发环境id&#x27;, // 环境id region: &#x27;ap-shanghai&#x27;, // 腾讯云地址，默认为上海 limit: 10, // 每次加载的条数，默认为5 avatar: &#x27;https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg&#x27;, fromColor:&#x27;rgb(245, 150, 170)&#x27;, // 下方标签背景颜色 默认 rgb(245, 150, 170) loadingImg: &#x27;https://7.dusays.com/2021/03/04/d2d5e983e2961.gif&#x27;, // 自定义loading的图片，示例值为默认值 dbName:&#x27;talks&#x27; // 数据的名称，默认talks，避免有人的命名不是这个，所以加入此配置字段。 &#125;) .then(function() &#123; // 哔哔加载完成后的回调函数，你可以写你自己的功能 console.log(&#x27;哔哔 加载完成&#x27;) &#125;)&lt;/script&gt; 5.2 配置到首页 事实上，此时在发布网站后，已经可以直接通过 https://hermitlsr.top/bbtalk/ 访问到页面 一开始我是把这个页面放在 about 页的导航栏里的 直接写相对路径就行。 后来我突发奇想，把这个放到首页去，大概需要这几步： 修改主题文件 languages 修改主题文件 \\themes\\stellar\\layout\\_partial\\main avbar\\list_post.ejs 修改网站设置 _config.yml 5.2.1 修改主题文件 languages 这一步是进行语言配置，在 btn 部分添加 bbtalk 1234567# zh-CN.ymlbtn: bbtalk: 闲话# zh-TW.ymlbtn: bbtalk: 閒話 没设置英语，实在不知道咋翻译合适。 5.2.2 修改主题文件 \\themes\\stellar\\layout\\_partial\\main avbar\\list_post.ejs 找到 \\themes\\stellar\\layout\\_partial\\main avbar\\list_post.ejs 在其第 32 行后 添加如下代码： 123&lt;% if (config.bbtalk) &#123; %&gt;&lt;a href=&#x27;/bbtalk/&#x27;&gt;&lt;%- __(&#x27;btn.bbtalk&#x27;) %&gt;&lt;/a&gt;&lt;% &#125; %&gt; 意思是，如果站点根设置中 bbtalk 的值为 true 则显示相对链接为 /bbtalk/ 的页面。 当然，你要乐意，改成 theme.bbtalk 放到主题设置里也行，不过没必要。 5.2.3 修改网站设置 _config.yml 在设置的最下面添加： 1bbtalk: true 重新发布网站就可以看到了。 6 踩坑点汇总 运行环境问题，最好使用作者原始运行环境：Nodejs 10.15； 记得新建数据集 users； 记得在 talks 数据集中提前创建数据。","tags":["Hexo","tencent cloud，bber"],"categories":["博客折腾"]},{"title":"重启博客，重启时光","path":"/2022-01-12/重启博客/","content":"搁着半年多，继续写博客。 博客被搁着了差不多半年吧。这半年多也发生了不少事情，让我没有精力，也找不到太多想写的东西，于是就搁置了。 事实上，半年前，也没有产出多少高质量的博客，主要是一些建站的记录。但不得不说，这些记录让我迁移博客数据，重新部署的过程十分顺畅。毕竟不再需要去搜索各种资料，去搞清楚怎么用 github action 了。 之后的博客内容应该是分为四个部分： 1. 首页上的 blog 内容，应该是日常的一些记录，和一些单独不成系统的技术博客和笔记博客； 2. 项目页的 wiki 内容，应该是整理好的一些项目记录，和经过归纳整理的笔记专题； 3. 笔记分站 ，一些日常笔记，多为学习时直接记录的内容和疑惑。 4. 便笺页的 note 内容，一些简短的，杂乱的技巧。 无奈，水平有限，主要还是以个人学习记录为主。 题外话说一下 hexo-theme-tree 这个主题，是我用在笔记分站的主题，十分简洁，拿来放笔记再合适不过了，我个人移植了标签，然后加上一些标签插件基本上是完全够用的。 下面谈谈，这半年发生了什么，大概就是重回单身，考研失利，失去亲人，咳疾继续。 第一个是感情问题，就不多扯淡了，没什么意思。第二个就是二战失利，准确来说是自己昼夜颠倒，沉迷刷剧，无心学习，然后理所当然的看到题目不知所措，最后不出意外的话继续名落孙山，送自己一句话，该。第三个是，自己的二爸，也就是老爹的哥哥旧疾复发去世了，在所有这些亲戚中，我印象中对我最好的就是他们家了，所以应该是伤心的。最后就是自高二以来每年必有的咳疾又发生了，和去年一样都是在考研的时候，不一样的是，去年被隔离了，大晚上被装进医院一宿没睡，今年没被隔离，然后到现在还在咳咳咳。坦率来讲，这半年其实过得挺糟糕的。后面不出意外的话应该是找个工作，然后继续准备考研。争取这一年把要看的书都看完，到时候应该会产出不少笔记。 这大半年最后悔的事情应该是没怎么好好看书了，准确来说之前大学期间最后回到事情也是没好好看书，无论是那些数分高代，概率论随机过程，还是一些史书名著，都没怎么好好看，搞得现在脑子一团浆糊。突然想起来以前高考前一两个月抱着红楼梦囫囵吞枣看完的事情，当时也是心大，不过挺开心的。 扯了一些有的没的，也没啥主题，主要就是说，后面应该继续写博客了。","tags":["杂叙"],"categories":["生活纪事"]},{"title":"档案风波2","path":"/2021-09-30/档案风波2/","content":"我好像很倒霉，又好像没有那么倒霉，大概就是凭自己的本事把事情给办砸了。 前情提要：档案风波 准确来说所有的倒霉的问题都是自己作出来的，所有没那么倒霉乃至幸运的事情都是因为好心人。 继上次确定档案在28号可以寄出，而社区又表示可以缓两天之后，就没太在意这件事情了。 今天查了下档案，发现在中午的时候已经被档案馆签收了。所以下午直接打电话去档案馆问一下过去复印档案要什么材料或者手续什么的，这个时间大概是三点左右。结果被告知，没有我的档案信息，说是可能快递员还没投递就直接先点了收件，让我确认一下。 不幸从这里开始了。 我按派送信息上的联系方式打了派送员的电话，发现是璧山区（我家所在区的隔壁区）的派送员，说是没有这个信息，当时我就很纳闷啊，确认下他是不是叫 ✖✖，结果回答是，我更纳闷了。 遂拨打 EMS 投揽部的电话，期间报错快递单号不表，客服人员表示给我核实一下在回我电话。 就这样时间大概到了四点二十，再次打电话给 EMS，发现人家已经忘记有这回事了，然后让我自己和派送员核实一下，然后开始报电话号码，听前面的数字和我打的一样啊，我就说我打过这个电话，但是不是本地的快递员啊，紧接着听到了最后一位。 你猜怎么着，不一样！！！最后一位数字，它不一样！！！ 只差一位的电话号码还都是 EMS 派送员的电话，这两快递员还都一个姓，甚至同名。 赶忙挂了电话，又打正确的派送员的电话。 小哥非常耐心的给我解释了一下快件确实送到了，可能是档案馆那边没录入进去。随即表示，抱歉，打扰，都是我的锅。 好的，第一个乌龙结束。 接下来和档案馆沟通，答：档案刚刚送过来正在录系统。又问，那下午还来得急复印档案么，一问我的名字，确认我的档案刚录入进系统，说可以。 赶紧打个的，往大学生就业创新中心跑，这个时候是四点半。 但实际上我要去的地方不是这里，那为什么又要去这个地方呢，因为当初问档案的时候让我关注了个公众号就是这个名字，走得急也没细想。 上天还是给过我纠正的机会的，的哥师傅没去过那里，我说我开个导航吧。 直到到了地方，一问，这地和档案馆压根就没啥关系。 突然想起来当初给学校就业处寄送地址的时候，是希尔康大道。那档案馆不就在我家那边么，骑个永久10分钟就到了，结果饶了这么远。 好的，第二个乌龙结束。 此时已经四点五十了，骑车估计是来不及了，打车又打不到，心想算了算了，今天估计是办不了。 这个时候一位摩的师傅，骑车路过的时候，估计是看到了我焦急的样子，停下来问我： “走哪点嘛” “合川档案馆，区政府那边那个” “我晓得那点，走嘛” “好多钱” 竖起一跟手指头 “十块哈，走嘛师傅” 紧接着师傅带我领略了摩托车的风驰电掣，还有一系列骚操作。举个例子，在一个红绿灯路口，红灯大概还有一分半左右，但不限右转，他直接右转到右侧垂直的一条道，然后插入到那条道的右转道，五秒钟之后，右转灯亮了，于是在路口后方的车还在等着的时候，这辆摩托已经奔向了下一个路口。 当然，我在车后座上个几分钟看个时间就不赘述了。 最后，在五点十五分的时候，师傅直接把我送到了档案馆门口。 不是常见的那种路边办事大楼的门口，而是七拐八拐直接把我送到了办事单位的门口。 下车扫码，师傅说： “进切再付，进切再付，莫耽误你办事情。” 说着头也不回的就骑走了，这个信任啊，搞得我还有点想哭（不是）。 最后我给师傅转了15块。 幸运的事情一结束。 进到大厅问工作人员那里是复印档案的地方，答： “哦，是要复印档案那个大学生哈，lei（语气词），在那点（头偏向左侧）” 走过去一看，有位孃孃正在帮我复印档案，已经复印一部分了。 看我过去了就让我自己复印一下。 当然，应该是看到我复印得太慢，又复印废了几张纸。孃孃决定还是自己来，我就在旁边整理复印好的档案顺序。 复印完成之后，向孃孃们为我的档案的操心表示了由衷的感谢，以及对我跑错了地方耽误他们下班表示了深刻的歉意。 但他们大概，好像觉得无所谓，并且他们的眼神仿佛在说这么憨的人，是怎么大学毕业的！！！ 此时大概五点四十五。 幸运的事情二结束。 出门扫辆单车，打算直接骑去社区，争取六点前到，把材料早交了早了事。 结果，我扫的车是个坏的啊，他还坏的很奇特，车锁打开了，又没有打开，关上了又没有关上。 小程序显示，车子开锁了，但是，嗯？这分明还是锁着的啊，用手也掰不动。 算了算了，还车再扫另一辆。 欸，小程序显示，请关车锁！你这车锁开都没开我怎么关，你告诉没打开的车锁怎么关上，怎么关上！！！ 眼睁睁看着倒计时30s结束，而车锁显示未关。 折腾了许久，终于，在没有关上已经关上的车锁的情况下还了车。 但是好像有点不对，为啥还要我付钱，我骑都没骑啷个还要花一块钱。 但为了骑下一辆车，我在纠结斗争中向单车妥协了，付了这一块钱，并开了新的一辆车。 最后当我骑到社区的时候，刚好六点钟。 但是门已经锁了。 大概国庆之后我还要再跑一趟吧。","tags":["杂叙"],"categories":["生活纪事"]},{"title":"档案风波","path":"/2021-09-23/档案风波/","content":"档案一定要跟人走，切身体会，减少麻烦。 事情大概是这样的，毕业的时候为了图方便就把档案留在了学校，本来也要继续考研嘛，就懒得再动档案了。但是，党组织关系转回了本地社区，由此开始了麻烦的历程。 第一次是在办组织关系转移的时候，被要求需要入党志愿书复印件，于是拜托导员抽时间帮我跑去档案馆复印出来再寄给我。 第二次也就是这一次，被通知需要将所有入党相关的材料复印件交社区备份，然而学校档案不允许复印所有材料，所以不得不选择把档案调回本地的人才中心。 比较欣慰的是打的几个咨询电话得到的回应都比较明确，相关负责人也比较体谅我的难处，并且因为是当年毕业，所以暂时还不需要调档函，学校招就处的小姐姐也比较热情帮我直接办理了。 现在还是要等着档案寄回来，然后去档案中心把需要的东西复印出来再交到社区。 仔细想想要是当初直接把档案转回来哪有那么多事啊，以后档案材料这些一定要跟人走，跟人走。","tags":["杂叙"],"categories":["生活纪事"]},{"title":"寅哥儿","path":"/2021-08-30/寅哥儿/","content":"我的好兄弟，是寅哥儿。寅哥儿，是我的好兄弟。 我的好兄弟，是寅哥儿。寅哥儿，是我的好兄弟。 我跛了脚，他也跛了脚。两个一晃一摇的走着，也还整齐。 那个桥洞是我栖身的地方，能遮住天上的雨。对，那雨还在天上的时候，哪怕砸到桥面上，不会与我有任何关系。可它偏机灵，不断向下淌，向着我这扑来。但不吼叫，不撕扯，只是要渐渐的让这干涸的桥洞重温水的滋养，好像这桥洞欢迎它似的。它与桥洞似有不解的缘。或许正是从前流淌的那抚摸着桥洞沧桑脸庞中的一滴。我为它的专情所打动，却不得不教它认清现实，这桥洞已被我占据，这是我的领土，这是寅哥儿栖身的地方。 摸了几块石，垒成一圈石栅，庄重地宣誓我的主权。我握着这根发黑的手杖，挥舞着，敲打着。一阵怪风竟让我旋了一圈，扑倒在地上。你凭什么帮它，这与你何干，多事的风！快走，滚开，滚开啊！竟忽的挑起个什么，是块布？是寅哥儿留下的？顾不得，一挑，裹在身上。来吧，你来吧，我不怕你的。哈，可怜的雨水，可怜的河水，你终是回不来了吧。 忽的一束白光，拉过一声轰响。先是一惊，亮堂堂的，不一会儿，这桥洞便又是最黑暗的地方了。黑暗得让人难以喘息，颤抖，白茫茫的一片。踱到稍高一点的泥板子上，斜靠在洞壁上。慢慢蹲下，手向下探，摸到底，用力按几下，又怯怯坐下。躺着，蜷成一团，紧握着手杖。恍惚间，静了，没甚生息了，我只知道我还在喘气，是风走了吧，水去了吧，，没了丁点喧闹，都趋于沉寂，又在消逝吧。觉得自己正被什么一点一点吞没。想喊叫，却只有嘶哑的喘息。“哐”的一阵轰响，我被拉了出来，是先前的石头塌了。寅哥儿在就好了。他虽讲不了什么话，但至少在我身边，至少听我的呜咽。寅哥儿去哪了，我的寅哥儿。 我看到了，他们都围在我身旁。还有寅哥儿，他回来了，也在我身旁。 他们或议论惋惜，或不语呆望。却有几个毛孩子要踢那些石块。我大叫着别动，他们不听，还越发有劲了。甚至跑过来，要抢我的木杖，还要拿我的布，我死死的抓着，只能抓着，尽力的抓着。对他们咆哮一分，便是对他们鼓励十分。好似我的咆哮，在为他们助威。幸运的，我快不能坚持时，十分庆幸，他们也烦了，嬉笑着站在一旁。 “多活泼的孩子啊” “不，应该是群机灵鬼” “瞧，他们玩得真是有趣啊” 是赞叹、是褒奖。我只求他们离开这里。没办法啊，他们偏不离开，我有什么可看的？寅哥儿？更没什么可提的了。 过不多时，围的人越来越多了。 突然，他们却让了一条路来，还恭敬的把我们请出去。不及清洗我们身上的泥垢，只急忙领我们去参加什么仪式，说会很庄严肃穆，而且我们是主角。难怪被那般注视呢。这仪式也没什么排场，我甚至曾遇见过，还去同着唏嘘几声，讨了杯酒的。也不能说是讨，是换，是拿眼泪换的。我自然已熟悉，也就无需排演了。几阵喧闹，几场诉说，又是几批如我一般讨酒的。木杖敲打着碗，过就过了吧。又如昨一般的死寂，仅握着我的木杖，裹着我的布，却不见了寅哥儿，伴着我的兄弟。 寅哥儿，我的兄弟，你在哪里。 什么都看不见了。 ——2017.5.24 偊由 夜书","tags":["杂文"],"categories":["杂文杂续"]},{"title":"腾讯云 Serverless + Github Action 自动部署 Hexo 博客","path":"/2021-08-30/腾讯云-Serverless-Github-Action-自动部署-Hexo-博客/","content":"看过很多使用 Github Action 自动部署 Hexo 博客的教程，但是部署到 腾讯云 Serverless framework 的几乎没有，而且对于 GitHub 身份验证也比较麻烦，综合各家之长有了本篇小文，力求详细。 1 Github Action Github Action 是什么官方文档入门教程——阮一峰 2 自动部署 设置步骤： 博客文件管理 生成权限密码 配置 secret 配置 workflows 2.1 博客文件管理 博客文件的版本管理是通过使用 GitHub 仓库来实现，基本步骤如下： 在命令行中： 在需要的位置通过 hexo init blog 初始化博客环境。 使用 git init 命令初始化 Git 仓库，此时仓库内没有文件。 使用 git add . 命令添加所有文件到 Git 仓库中。可以在 .gitignore 文件中设置忽略的文件，此文件中标明的文件不会被加入仓库中。注意此时还没有把这个更改加入到版本库。我的 .gitignore 文件12345678.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/.idea 使用 git submodule add https://github.com/#yourname#/#theme.git themes/#themename 命令添加主题文件子模块。主题文件将会作为子模块存在，git push 父模块时只会上传引用的子模块版本。 例如我使用的是 stellar 主题，相应的命令为 git submodule add https://github.com/hermitlsr/hexo-theme-stellar.git themes/stellar 。执行完成后会在根站点出现 .gitmodules ，它记录了子模块的原仓库地址和本地相对地址。 注意以上关于 git 的操作可能会因为网络的问题报错 一般是 10054 错误，很正常，网络 ok 了就行。 此时，父模块还没有被 push 到 GitHub 上，子模块是和原仓库地址对应的。 由于我不太熟悉 命令行 管理 git 仓库，所以后面的操作在 GitHub Desktop ( 点我下载 )中完成： 只需要登录自己的 GitHub 账号即可进行版本管理操作： 添加本地仓库到 GitHub Desktop：使用快捷键 ctrl O，或者在菜单中找到 add。然后选取你 git init 操作的那个文件夹即可。 将更改添加到版本中，在 Current repository 下找到你添加的仓库，文件名应该是你本地的文件名。详情图片 把 Changes 的内容全选，在下方的 commit 的标题部分填入 first commit 点击 commit 按钮推送到版本库中。 推送成功后可以在 History 中看到历史版本。但注意到此时更新的版本里有向上的箭头，表明该版本还没有提交到 GitHub 仓库中。 提交到 Github 仓库：点击上方的 Publish repository，勾选 Keep this code private，发布到私有仓库，毕竟源文件中可能会涉及到各种隐私文件。详情图片 该过程可能会因为网络原因失败，但是重复推送即可。 此时博客文件管理已经完成，以后如有修改文件，只需在 GitHub Desktop 中添加对应版本并推送上去即可。有时使用客户端推送会失败，也可以在命令行中使用 git push 命令。 2.2 生成权限密码 在使用 Github Action 时需要配置权限密码，一是 Github 的访问令牌，二是 腾讯云的 API密钥管理，三是 qmsg 酱的访问密匙。 Github 的访问令牌 官方文档——创建个人访问令牌 腾讯云的 API密钥管理 点这里创建 qmsg 酱的访问密匙 点这里获取 注意，这些的访问权限都比较高，建议定期设置失效更新。 2.3 配置 secret 将 生成权限密码 中取得的密码配置到 Github 仓库的 secret 中： 在仓库的 Setting.Secrets.Actions 中设置 详情图片 注意：这里的命名要和下面设置的 workflows 中的变量对应。 2.4 配置 workflows 在根目录的 .github 文件夹中新建 workflows 文件夹，这是存放 Github Action 配置的文件夹，在该文件夹中新建一个 .yml 文件，命名随意。 我的 workflow 源码： workflow 源码.github/workflows/deploy.yml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162name: www.hermitlsr.topon: push: branches: - master # 触发事件jobs: build: runs-on: ubuntu-latest # 运行环境为最新版 Ubuntu name: auto deploy steps: - name: Checkout uses: actions/checkout@v2 with: # 条件 submodules: true # Checkout private submodules(themes or something else). 当有子模块时切换分支？ - name: Setup Node.js 16.x uses: actions/setup-node@master with: node-version: &quot;16.x&quot; # node 版本设置 - name: Cache node modules # 设置包缓存目录，避免每次下载 uses: actions/cache@v1 with: path: ~/.npm key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125; - name: Install dependencies run: | npm install -g serverless npm install hexo-cli -g npm install - name: init public run: | hexo clean hexo generate - name: Deploy tecent env: SERVERLESS_PLATFORM_VENDOR: tencent # 外网环境下需要设置 TENCENT_SECRET_ID: $&#123;&#123; secrets.TENCENT_SECRET_ID &#125;&#125; TENCENT_SECRET_KEY: $&#123;&#123; secrets.TENCENT_SECRET_KEY &#125;&#125; run: | sls deploy -debug - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: personal_token: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125; external_repository: hermitlsr/hermitlsr.github.io publish_branch: master publish_dir: ./public commit_message: $&#123;&#123; github.event.head_commit.message &#125;&#125; user_name: &#x27;github-actions[bot]&#x27; user_email: &#x27;github-actions[bot]@users.noreply.github.com&#x27; - name: notification run: | # 部署成功后通过 qmsg 推送到 qq 提示部署成功 curl https://qmsg.zendee.cn/send/$&#123;&#123;secrets.QMSG_KEY&#125;&#125; -X POST -d &#x27;msg=部署成功, 请访问 https://www.hermitlsr.top/ 进行确认 &#x27; 代码主要分两部分，一是触发条件，二是工作流。 2.4.1 触发条件 1234on: push: branches: - master # 触发事件 该代码表面仓库的 master 有更新时触发 Github Action。 2.4.2 工作流 创建运行环境 12345jobs: build: runs-on: ubuntu-latest # 运行环境为最新版 Ubuntu name: auto deploy steps: 后面的具体工作按 steps 中的顺序执行。 检出仓库文件 1234- name: Checkout uses: actions/checkout@v2 with: # 条件 submodules: true # Checkout private submodules(themes or something else). 当有子模块时切换分支？ 这里除了检出本仓库中的文件，还会检出子仓库中的文件，当子仓库为私有仓库时会失败，需要额外配置权限。 安装 node 和 相关依赖 1234567891011121314151617- name: Setup Node.js 16.x uses: actions/setup-node@master with: node-version: &quot;16.x&quot; # node 版本设置- name: Cache node modules # 设置包缓存目录，避免每次下载 uses: actions/cache@v1 with: path: ~/.npm key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;- name: Install dependencies run: | npm install -g serverless npm install hexo-cli -g npm install 我这里使用了最新的 “16.x” 版本，并设置了缓存目录，避免每次重复安装。 npm install -g serverless 是安装 serverless 用于使用 serverless framework 部署到腾讯云。 生成网页文件 1234- name: init public run: | hexo clean hexo generate 生成 public 文件夹。后续也发布 Github 仓库 时不会使用 hexo deploy ，而是直接将该生成文件推送到目标仓库中，或者使用另一个第三方工具。 部署到腾讯云 1234567- name: Deploy tecent env: SERVERLESS_PLATFORM_VENDOR: tencent # 外网环境下需要设置 TENCENT_SECRET_ID: $&#123;&#123; secrets.TENCENT_SECRET_ID &#125;&#125; TENCENT_SECRET_KEY: $&#123;&#123; secrets.TENCENT_SECRET_KEY &#125;&#125; run: | sls deploy -debug SERVERLESS_PLATFORM_VENDOR: tencent 一定要设置，不设置的话会显示登录失败，这个是来自于腾讯云的技术顾问。 TENCENT_SECRET_ID 和 TENCENT_SECRET_KEY 都是前面设置的腾讯云的 API 访问令牌。注意变量名。本身在本地使用的时候会创建 .env 文件存放令牌，但这里为了防止令牌泄露，采用 secret 的形式，.env 文件无需上传。 sls deploy -debug 这个命令用于将生成好的文件推送到腾讯云上，不熟悉该命令的可以看 腾讯云serverless托管Hexo静态博客 。 部署到 Github page 这里有多种方法进行，我选取了两种使用令牌的方法放在这里： 第一种方法： 12345678910- name: Deploy github env: DEPLOY_REPO: github.com/hermitlsr/hermitlsr.github.io run: | cd ./public &amp;&amp; git init &amp;&amp; git add . git config --global user.name $GIT_USER git config --global user.email $GIT_EMAIL git add . git commit -m &quot;GitHub Actions Auto Builder at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot; git push --force --quiet &quot;https://$&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;@$DEPLOY_REPO&quot; master:master 该部署方式是直接将生成的 public 文件夹推送到目标仓库的方式。 DEPLOY_REPO 设置目标仓库。 首先进入到 public 文件夹中，并初始化 github 仓库，并设置所有者为自己，然后设置推送命令，最后通过访问令牌的验证方式强制推送。该种方式会强制覆盖仓库内的内容。 另一种推送到 Github 的方式是使用 peaceiris/actions-gh-pages@v3 12345678910- name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: personal_token: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125; external_repository: hermitlsr/hermitlsr.github.io publish_branch: master publish_dir: ./public commit_message: $&#123;&#123; github.event.head_commit.message &#125;&#125; user_name: &#x27;github-actions[bot]&#x27; user_email: &#x27;github-actions[bot]@users.noreply.github.com&#x27; 注意： personal_token: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125; ：这里如果是推送到相同的仓库，可以直接使用 github_token:$&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;，该 token 无需额外生成；当如果是不同的仓库，需要使用 personal_token ，Protocol 为 HTTPS 或者 deploy_key ，Protocol 为 SSH 进行部署。 external_repository： 推送的仓库，设置为你要使用 Github Pages 的仓库就可以了。 publish_branch：要推送到目标仓库的分支，非默认分支需提前创建。 publish_dir：推送内容所在的文件相对地址。 commit_message：推送信息。 具体可 见文档 。 qmsg 酱推送成功信息 123- name: notification run: | # 部署成功后通过 qmsg 推送到 qq 提示部署成功 curl https://qmsg.zendee.cn/send/$&#123;&#123;secrets.QMSG_KEY&#125;&#125; -X POST -d &#x27;msg=部署成功, 请访问 https://www.hermitlsr.top/ 进行确认 &#x27; 该信息可以自定义，这里的 &#123;&#123;secrets.QMSG_KEY&#125;&#125; 为之前设置的 qmsg 的权限密码。这不是一个必要的流程，只是为了让之前注册的 qmsg 酱不要闲置。 至此配置完成，将所有修改推送到 Github 即可。 3 最后一些常用的 action 获取 GitHub 官方的 action GitHub 官方市场中的 action 第三方收集的有用的 action","tags":["Hexo","Github Action","tencent cloud","Severless"],"categories":["博客折腾"]},{"title":"腾讯云 Serverless 托管 Hexo 静态博客","path":"/2021-08-24/腾讯云serverless托管Hexo静态博客/","content":"使用腾讯云 serverless 托管静态博客，让静态博客托管更简单。 1 写在前面 域名需要备案 和 coding 可以不备案使用香港的资源部署不同，使用该服务域名必须进行备案。不过，腾讯云提供的三种备案云服务资源 包含了 Serverless 服务， 可以购买 云函数 (SCF) 备案资源包 100rmb (新用户有卷 55rmb)，直接进行备案，和购买服务器进行备案的方式差不多。但是，如果只是用 serverless 来部署博客，这个资源包就基本用不上。 无需服务器 无需服务器可以降低学习成本和经济成本。但是需要使用额外的 severless 插件。 额外的部署命令 使用该服务不能如同 coding 那样直接放在 _config.yml.deploy 中，需要额外的命令 sls deploy -debug 进行部署。 可自由选择部署应用所在地 这是对比 coding 只能默认选择上海，该服务可自由选择所在地，我选择离所在地近的。 可自由选择使用腾讯云的 CDN 服务 新用户可以白嫖六个月 120G 的 CDN。不过小站访问量不高，开了与源站一致每月也就是几百兆。 题外话：可以看到我基本都在与 coding 进行对比。我开始建站的时候看了很多白嫖 coding 部署博客的文章，但是 coding 被腾讯云收购了，白嫖是不可能白嫖了。在部署到 coding 上后，我发现静态文件都在腾讯云的 cos 存储桶里，在 severless 应用服务中创建了 app ，所以实际上部署到 coding 就是在使用腾讯云的 serverless 应用服务，而且自由度还不高。 2 Serverless 应用中心 关于 Serverless 的概念可以参考：Serverless 多函数开发示例 、Serverless 简单讲就是指构建和运行不需要服务器管理的应用程序的概念。 腾讯云的介绍：腾讯云中的 Serverless 应用中心 是腾讯云与 Serverless.com 战略合作，基于无服务器应用框架 Serverless Framework， 为用户提供的 Serverless 应用开发管理平台。开发者无需关心底层资源，即可快速部署完整可用的 Serverless 应用架构，具有资源编排、自动伸缩、事件驱动等能力，覆盖编码-调试-测试-部署等全生命周期，帮助开发者通过联动云资源，迅速构建 Serverless 应用。 该服务提供了部署 Hexo 博客的接口 ：部署 Hexo 博客 ，如果有经验的话可以直接根据这份文档进行部署，我一开始就是这么做的。 3 部署博客 按文档的要求： 已安装 Node.js（2020年9月1日起，Serverless 组件不再支持 Node.js10.0 以下版本，请注意升级） 已安装 Git 这个一般不用管，毕竟博客搭建好之后这些都是已经安装好的。 部署流程： 安装 Serverless Framework。 创建 serverless.yml 文件。 使用 sls deploy 进行部署。 自定义域名。 3.1 安装 Serverless Framework 通过 npm 安装 Serverless Framework： 3.2 创建 serverless.yml 文件 在站点根目录创建 serverless.yml 文件： serverless.yml1234567891011121314component: &#x27;website&#x27; # (必填) 引用 component 的名称，当前用到的是 tencent-website 组件name: hermitlsr-blog # (必填) 该 website 组件创建的实例名称app: hermitlsr-blog-app # (可选) 该 website 应用名称stage: dev # (可选) 用于区分环境信息，默认值是 devinputs: src: src: ./public # Upload static files generated by HEXO index: index.html # dist: ./dist # hook: npm run build # websitePath: ./ region: ap-chengdu # 部署的位置 bucketName: hermitlsr-blog-bucket protocol: https 这是我的配置，可根据需要自行配置。 3.3 使用 sls deploy 进行部署 直接使用 sls deploy 是看不到部署细节的，需使用 sls deploy -debug。另外，每次部署时需同过登录链接登录腾讯云验证，或者配置全局用户授权。 由于我还需要部署到 github 上，我的部署命令一般如下： 部署完成后，进入腾讯云的控制台可以发现在 Serverless 应用中创建了名为 hermitlsr-blog-app 的应用，点击访问应用即可访问到你部署的博客。 博客的所有静态资源都在 腾讯云的 cos 存储桶中，它创建了一个名为 hermitlsr-blog-bucket-appID 的存储桶： 到目前为止博客已经部署到通过 serverless 应用 部署到腾讯云上了，但是还没有 CNAM 到自己的域名。 3.4 自定义域名 自定义域名都是通过在域名解析上使用 CNAME 重定向实现。 首先需要在站点的 source 文件夹中新建 CNAME 文件，该文件没有后缀名，在其中填入的你的自定义域名。 其次在域名解析中设置 CNAME 我自定义域名是分两条线路国外访问走 github page ，国内访问走腾讯云。无论是哪一种都需要设置两种主机记录值 @ 和 www，这两种对应的访问域名分别为 hermitlsr.top 和 www.hermitlsr.top 而对于两种记录值的设置，除了记录值不同外其他 CNAM 等选项都是一样的。 以我的 github page 为例，其设置为： 主机记录 记录类型 线路类型 记录值 MX优先级 TTL(秒) @ CNAME 境外 hermitlsr.github.io. - 600 www CNAME 境外 hermitlsr.github.io. - 600 而对于腾讯云，使用 CDN 和不使用 CDN 记录值是不一样的。 不使用 CDN : 进入存储桶，打开域名与传输管理部分，其中在自定义源站域名中添加自己的自定义域名，注意源站类型选择 静态网址源站，其中 CNAME 为解析里要设置的记录值。 设置如下： 主机记录 记录类型 线路类型 记录值 MX优先级 TTL(秒) @ CNAME 境内 https://hermitlsr-blog-bucket-appID.cos-website.ap-chengdu.myqcloud.com - 600 www CNAME 境内 https://hermitlsr-blog-bucket-appID.cos-website.ap-chengdu.myqcloud.com - 600 使用 CDN 要麻烦一些，首先要设置 CDN (这不废话么)： 还是刚才的页面，在上面的自定义中添加自己的自定义域名，其中 CNAME 为解析里要设置的记录值。 设置如下： 主机记录 记录类型 线路类型 记录值 MX优先级 TTL(秒) @ CNAME 境内 表中的 CNAME 值 - 600 www CNAME 境内 表中的 CNAME 值 - 600 这里看起来好像和源站区别不大，为什么说还要麻烦些呢，因为还涉及证书的管理和 CDN 的具体设置。 进入到控制台的内容分发部分，在证书管理中确认配置的证书和你前面存储桶中绑定的证书是一致的，否则会导致证书不通过而无法访问，我一开始被这个坑惨了。 再进入到域名管理，在基础配置中可以看到具体信息，可以随时修改。在访问控制中可以进行防盗链配置，在缓存配置中可以进行节点缓存过期配置，建站初期经常修改可以选择遵循源站，后期可以选择高级缓存过期设置，先设置全部文件，缓存时间为15天，在设置按文件后缀 js;css;ejs;styl 为 0 秒。 4 最后 如果没有其他需求，仅需要部署静态博客，使用 serverless 应用是一个省时省力省钱的操作。","tags":["Hexo","tencent cloud，serverless"],"categories":["博客折腾"]},{"title":"请作者喝咖啡--sponsor-page","path":"/2021-08-14/请作者喝咖啡-sponsor-page/","content":"赞赏是不可能赞赏的，只有白嫖才能勉强维持得了生活这样子。但是多一个好看的赞赏键拿来做装饰不好么？ sponsor 介绍 sponsor-page 是 Kaiyuan Xie 大佬的开源项目： 作者提供了两种样式的捐赠部件，美中不足的是其提供了比特币但没有提供QQ的图标 好像也不是很重要，反正也没人打钱。 kelecn 在该项目上增加了QQ图标，不过好像大概就是换了下 bitcoin.svg logo，可看参考资料。 我个人比较喜欢 drink 样式的背景，但又喜欢 sample 样式的白底彩色图标效果，就自己动动手把他们综合了一下，不过最后好像也只是换了下logo？ 最后它在我站点上的效果： 1 修改 经过研究源代码，确定两种样式是独立的，他们的 js 和 css 并不相互共用，交叉使用的只是 images 。而仔细分析我的需求，只是展示样式的问题，并不涉及二维码的展示逻辑，所以重点在 css 的修改上。 1.1 css修改 我的需求主要在于颜色，不想让它蓝蓝的，想让它白白的，这里就直接定位到含有颜色的部分，并通过 f12 大法确定它的用处 #donate-buttons 该 class 下的颜色是按钮的背景色，就是他让整个按钮是蓝蓝的。这里将其修改为： 1234#donate-buttons &#123; background-color: #F8F8F8; box-shadow: 0 10px 20px 1px rgba(221, 221, 221, 0.5);&#125; 为什么是 #F8F8F8 ，因为这是我的主题色，纯白色太亮眼的了，和主题色一致不至于有违和感。 li[id$=&quot;_donate&quot;]::after 该 class 下的颜色是鼠标放在某个按钮上时，按钮上方出现的小倒三角，意味着选择的那一个。因为我并不想看到这个三角，所以直接按之前的颜色处理： 12345li[id$=&quot;_donate&quot;]::after &#123;\tborder: 5px solid #F8F8F8;\tborder-color: #F8F8F8 transparent transparent transparent;&#125; #drinks-qrcode 该 class 下的颜色是弹出的二维码边框颜色，同样设置为 #F8F8F8： 123#drinks-qrcode &#123;\tbackground: #F8F8F8 no-repeat center center url();&#125; 更换图标 按这个顺序做的，会在 1. 做完后发现图标不见了。事实上，不是不见了，而是因为默认调用的是可调色的图标，前面设置成了白色自然无法看见。这里就需要更换彩色图片。 彩色图片来自于 sample 样式中的 images ，QQ的图标我采用了参考资料中的文件，不想自己找了。 但这里遇到一个问题就是更换完成之后还是无法显示，后来发现是缓存问题，为了稳妥，将所有涉及的图片都放在了图床上。当然最主要的原因还是为了方便部署在博客上。以下例举需要更换的地方。 查看代码123456789101112131415161718192021222324252627282930/*1*/#drinks-icons &#123; background: no-repeat center center url(https://cdn.hermitlsr.top/ky/donate/image/text-new.png);&#125;/*2*/#github-box &#123; background: no-repeat center center url(https://cdn.hermitlsr.top/ky/donate/image/github.svg);&#125;/*3*/#paypal_donate &#123; background-image: url(https://cdn.hermitlsr.top/ky/donate/image/paypal.svg);&#125;#qq_donate &#123; background-image: url(https://cdn.hermitlsr.top/ky/donate/image/qq.svg);&#125;#alipay_donate&#123; background-image: url(https://cdn.hermitlsr.top/ky/donate/image/alipay.svg);&#125;#wechat_donate&#123; background-image: url(https://cdn.hermitlsr.top/ky/donate/image/wechat.svg);&#125;/*4*/#drinks-qrcode &#123;\tbackground: #F8F8F8 no-repeat center center url(https://cdn.hermitlsr.top/ky/donate/image/WeChanSQ.png);&#125; 经此4步，css 部分就基本修改完了。 1.2 js修改 js 中需要修改的内容不多，主要是二维码的路径： 12345678var PayPalLink = &quot;https://www.paypal.me/KaiyuanXie&quot;; // 我不用这个所以直接没改。var qrcodes = &#123; &#x27;qq_donate&#x27;\t:\t&#x27;https://cdn.hermitlsr.top/ky/donate/image/qqQR.png&#x27;,\t// 二维码路径 &#x27;alipay_donate&#x27;\t:\t&#x27;https://cdn.hermitlsr.top/ky/donate/image/AliPayQR.png&#x27;,\t// 支付宝二维码 &#x27;alipay_donate_link&#x27; : &#x27;https://qr.alipay.com/fkx03277sywmqzbvpjow76&#x27;, // 支付宝二维码上的链接，必须换成自己的连接！！！手机点击会自动跳转到支付宝。 &#x27;wechat_donate&#x27;\t:\t&#x27;https://cdn.hermitlsr.top/ky/donate/image/WeChanSQ.png&#x27;&#125;; 另外你应该发现，这里是 ‘qq_donate’ 而没有 btc_donate，是的，因为不需要比特币，所以把所有关于 btc 的类都改成了 qq。这个直接在 html 、js 和 css 三个文件中搜索替换即可。 1.3 html修改 这里的修改主要是： 将图片链接替换掉 将 li id=&quot;paypal_donate&quot;&gt;&lt;a href=&quot;https://www.paypal.me/KaiyuanXie&quot; target=&quot;_blank&quot;&gt;Paypal&lt;/a&gt;&lt;/li&gt; 删掉，。 在顶内部添加： 1234---layout: false--- 作为独立页面，便于后续使用 &lt;iframe&gt; 放在文章里 至此基本修改就已经完成了。本地看起来基本没有问题，剩下的就是让它能够在博客上顺利展示。 2 部署 这里遇到的问题是，直接将 donate 复制在 source 中，发现只出现了背景图片，但点击无反应。原因在于 hexo 在编译时，这种情况提取不到 js 和 css 文件，解决方法是将他们托管到图床上。 所以在 source/donate 里只放置了 index.html 。记得修改 index.html： 12&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.hermitlsr.top/ky/donate/donate.css&quot;&gt;&lt;script src=&quot;https://cdn.hermitlsr.top/ky/donate/donate.js&quot;&gt;&lt;/script&gt; 最后在文章底部加入： 12&lt;hr&gt;&lt;iframe src=&quot;/donate/&quot; style=&quot;overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt; 就可以得到开篇的效果。 另外，为了不要每次写文章时都粘贴一次这个代码，可以直接放在 scaffolds/post.md 中： 看博主的模板12345678910111213141516---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;mathjax: truecomments: falsetags:categories:---&amp;emsp;&amp;emsp;&lt;!--more--&gt;&#123;% image https://cdn.hermitlsr.top/images/post/line.gif %&#125;&lt;iframe src=&quot;/donate/&quot; style=&quot;overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt; 3 部署升级版 2022.5.26更新 2 中的部署方式也是可行，只不过还是较麻烦，而且与文章主体以及下方的额外信息割裂，下面的部署方式将其直接作为 article.footer 的一部分。 在 &quot;...\\layout\\_partial\\main\\article\\article_footer.ejs&quot; 文件的 107 行后添加如下代码： 123456789if (theme.article.donate &amp;&amp; page.donate != false) &#123; el += &#x27;&lt;section id=&quot;donate&quot;&gt;&#x27;; el += &#x27;&lt;div class=&quot;header&quot;&gt;&#x27;; el += &#x27;&lt;span&gt;&#x27; + __(&#x27;meta.donate&#x27;) + &#x27;&lt;/span&gt;&#x27;; el += &#x27;&lt;div&gt;&#x27;; el += &#x27;&lt;iframe src=&quot;/donate/&quot; style=&quot;overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&#x27;; el += &#x27;&lt;/div&gt;&#x27;; el += &#x27;&lt;/section&gt;&#x27;;&#125; 并在 _config.stellar.yml 的 article 部分，添加： 12article: donate: true 若设置为 donate.true 则启用打赏部件，反正关闭。 效果图可见本文下方。 4 注意 嫌麻烦，可直接使用原作的部件，其实一样美滋滋。但无论如何，只要用了请去给原作 star。 一定要将图片资源放在没有防盗链的图床上，否则不显示；js 和 css 托管到 github 或者 gitee ，当然有服务器放服务器最好。 二维码可以用草料二维码 ，先从app下载官方二维码再解码，再生成二维码。当然我知道你们的办法更多。 喜欢我改后的样式的可以直接下载我的 js 和 css 文件，前文有。 最后，记得请我喝咖啡 。 最后真诚的感谢原作 Kaiyuan Xie ，这个部件是真好看。","tags":["Hexo","Stellar"],"categories":["博客折腾"]},{"title":"Stellar表情标签索引","path":"/2021-08-02/stellar表情插件索引/","content":"这里放置 stellar 主题 emoji 标签的图片及对应索引，方便自己调用，暂时只做了 aru 和 aru-l 的，毕竟其他的有汉字不是。 写在前面作者 xaoxuu 引用的是 volantis-x/cdn-emoji 仓库中的表情包文件。发现aru表情包有两个文件，这里我将其都定义了下：1234567emoji: default: https://fastly.jsdelivr.net/gh/volantis-x/cdn-emoji/qq/%s.gif twemoji: https://fastly.jsdelivr.net/gh/twitter/twemoji/assets/svg/%s.svg qq: https://fastly.jsdelivr.net/gh/volantis-x/cdn-emoji/qq/%s.gif aru: https://fastly.jsdelivr.net/gh/volantis-x/cdn-emoji/aru/%s.png aru-l: https://fastly.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/%s.gif tieba: https://fastly.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%s.png aru 表情 索引 表情 索引 表情 索引 表情 索引 表情 索引aru-l 表情 索引 表情 索引 表情 索引 表情 索引 表情 索引 0000 0010 0020 0030 0040 0050 0060 0070 0080 0090 0100 0110 0120 0130 0140 0150 0160 0170 0171 0180 0181 0190 0200 0210 0220 0230 0240 0241 0250 0260 0270 0280 0290 0300 0310 0320 0330 0331 0340 0350 0360 0370 0380 0390 0391 0400 0410 0420 0430 0431 0440 0450 0451 0460 0461 0462 0470 0480 0490 0500 0510 0520 0530 0540 0550 0560 0570 0580 0590 0600 0610 0620 1010 1011 1020 1030 1040 1050 1060 1070 1080 2010 2020 2030 2040 2050 2060 2070 2080 2090 2100 2101 2110 2120 2130 2410 2141 2145 2150 2151 2152 2160 2161 2165 2170 2171 3010 3011 3020 3030 3040 3050 3060 3061 4010 4020 4021 4022 4023 4024 4025 4030 4031 4040 4041 4042 4100 4110 4111 4112 4113 4114 4115 4120 4121 4130 4140 4200 4201 4210 4211 4212 4213 4220 4300 4301 4302 4303 4304 4310 5000 5001 5002 5003 5010 5020 5030 5040 5050 5060 5069 5070 5080 5090 5091 5100 5110 5120 5130 5131 5140 5141 5150 5151 5160 5161 5170 5180 5190 5200 5210 5220 5230 6000 6001 6010 6020 6030 6040 6050 6051 6060 6061 6070 6080 6090 6091 6092 6100 6110 6120 6121 6130 6131 6132 6140 6150 6151 6160 6500 6510 6520 6530 7000 7010 7011 7012 7020 7021 7030 7040 7045 7046 7050 7051 7052 7053 7054 7060 7061 7062 7070 7071 7080 7081 7090 7100 7110 7111 7112 7113 7200 7201 7210 7220 7230 8000 8001 8010 8020 8021 8030 8040 8041 8042 8050 8051 8060 8062 8070 8071 8072 8080 8081 8082 8083 8084 8085 8090 8091 8092 8100 8101 8102 8103 8110 8111 x010 x011 x012 x013 x014 x021 x022 x031 x032 x041 x042 x050 x060 x061 x062 x063 x069 x070 x071 x080 x081 x082 x083 x090 x091 x092 x093 x094 x099 未完待续","tags":["Hexo","Stellar"],"categories":["博客折腾"]},{"title":"百度收录推送","path":"/2021-07-30/百度收录推送/","content":"本文将介绍如何将自己的博客文章主动推送到百度收录 通过 hexo 框架搭建的个人站，可以被 Google 主动爬取，像我这样的新站，在建站几天之后就被收录了。但是百度站一般不会主动去爬取这类站点，需要站长主动推送站点文章，当然推送了也不一定收录，无奈。 百度收录目前可以通过三个方式：API 提交、sitemap 和 手动提交，本文主要是介绍通过插件实现前两种方式的自动提交。 API 提交 这里主要使用的是 hexo-baidu-url-submit 插件，它可以在每次使用 hexo s 或 hexo d 命令时主动将 _post 内的文章推送到百度 具体配置步骤如下： 安装插件 配置站点根目录 _config.yml 安装插件 配置站点根目录 _config.yml 在站点点根目录 _config.yml 的最下方加入如下内容： 12345baidu_url_submit: count: 100 # 提交最新的一个链接 host: www.hermitlsr.top # 在百度站长平台中注册的域名 token: xxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里 注意 token 部分可在百度收录站普通收录 API提交 部分找到，具体如下图： token 位置 修改 _config.yml 的 url，这个一般在建站的时候都有修改，这里注意和百度添加的域名保持一致就可以了。 修改 _config.yml 的 deploy 部分： 12deploy:- type: baidu_url_submitter 当执行 hexo s 或 hexo d 时，出现如下内容即为配置成功： 12INFO Generating Baidu urls for last 100 postsINFO Posts urls generated in baidu_urls.txt 通过添加代码实现自动推送 这种推送方式在之前的百度推送站中被称为自动推送，其通过在网页的 &lt;head&gt; 与 &lt;/head&gt; 标签之间添加安装自动推送JS代码，实现当页面被访问时，页面URL将立即被推送到百度收录。这个方法在现在的百度收录站中已经找不到了，但代码还是被留存了下来，可以考虑使用。 在主题文件夹中找到 head.ejs 文件，定位到 &lt;head&gt; ，在其下方添加如下代码即可： 1234567891011121314&lt;!-- 百度主动推送 --&gt;&lt;script&gt; (function () &#123; var bp = document.createElement(&#x27;script&#x27;); var curProtocol = window.location.protocol.split(&#x27;:&#x27;)[0]; if (curProtocol === &#x27;https&#x27;) &#123; bp.src = &#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;; &#125; else &#123; bp.src = &#x27;http://push.zhanzhang.baidu.com/push.js&#x27;; &#125; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(bp, s); &#125;)();&lt;/script&gt; sitemap 在百度收录站中使用 sitemap，只需要在相应位置填写数据文件地址即可： 百度收录站填写数据文件地址 这里介绍一个生成网址地图的插件：hexo-generator-seo-friendly-sitemap，之前我有用另一个插件 hexo-generator-sitemap，基本配置都差不多，但还是觉得前者要好一些。 通过 下载好插件之后，只需在站点根目录 _config.yml添加如下内容： 123456sitemap: path: sitemap.xml tag: true category: true page_priority: 0.4 post_priority: 0.6 这里可以根据自己的需要选择是否生成 tag、category 的网址地图。 当执行 hexo s 或 hexo d 后，public 将出现如下内容： 12345sitemap.xmlpost-sitemap.xmlpage-sitemap.xmlcategory-sitemap.xmltag-sitemap.xml 可以通过自己的域名+文件名的方式访问到这些网址地图 (如：https://www.hermitlsr.top/sitemap.xml)。上面提到的填写数据文件地址就是指这个地址。 通过这个方式的缺点就是一开始推送的时候要很久才生效，我是等了三天之后状态才从等待中转为已生效，建议多种方式共同使用。","tags":["Hexo"],"categories":["博客折腾"]},{"title":"Stellar 建站记录","path":"/2021-07-29/Stellar-建站记录/","content":"本文记录了自己使用Stellar主题建站时操作的一些内容，或简或繁，主要是为了方便日后主题升级，设备更换时能够顺利迁移。 footer 设置 目前我使用的`stellar 1.4.0` 版本还不支持自定义 `footer` (注:新版本已支持) ，但我需要放上 icp 备案等信息，于是修改了部分源码。我需要新设置两排内容，一排展示部署和图床信息，一排展示 icp 备案信息，最终呈现效果如下图： 需要设置三个部分 zh-CN.yml.footer 语言设置 footer.ejs 设置 _config.stellar.yml.footer 主题设置 zh-CN.yml.footer 语言设置 在 ..\\themes\\stellar\\languages\\zh-CN.yml 文件中设置： ..\\themes\\stellar\\languages\\zh-CN.yml1234567footer: license: &#x27;本博客所有文章除特别声明外，均采用 %s 许可协议，转载请注明出处。&#x27; info_not_open_source: &#x27;本站由 %s 创建，使用 %s 作为主题。&#x27; info_open_source: &#x27;本站由 %s 创建，使用 %s 作为主题，您可以在 %s 找到本站源码。&#x27; # 自定义部分 web_serve: &#x27;本站托管于 %s ，使用 %s 作为图床。&#x27; # 用于展示部署信息 icp: &#x27;%s&#x27; # 用于展示 icp 备案信息 其中 %s 为占位符，若使用多语言还需如此设置 zh-TW.yml 、en.yml。 footer.ejs 设置 在 ..\\themes\\stellar\\layout\\_partial\\main\\footer.ejs 文件中设置： ..\\themes\\stellar\\layout\\_partial\\main\\footer.ejs123456789101112# 顶部 `const source = theme.footer.source;` 之后const icp = theme.footer.icp;const cloud_server = theme.footer.cloud_server;const picture_bed = theme.footer.picture_bed;# 下方 `if(source)&#123;...&#125;` 之后 if (theme.footer.cloud_server) &#123; el += markdown(__(&#x27;footer.web_serve&#x27;, cloud_server, picture_bed)); &#125; if (theme.footer.icp)&#123; el += markdown(__(&#x27;footer.icp&#x27;, icp)); &#125; 上述代码第一部分是传入主题设置中的内容，其对应着语言设置部分中的占位符内容： icp: 要展示的icp信息 cloud_server : 要展示的部署信息 pictuer_bed : 要展示的图床信息 上述代码第二部分为插入要展示的信息。 _config.stellar.yml.footer 主题设置 在 footer 部分添加如下内容： _config.stellar.yml123icp: &#x27;渝ICP备[2021006569](https://beian.miit.gov.cn/)号，公安备[50011702500564](https://beian.miit.gov.cn/)号，萌ICP备[20201324](https://icp.gov.moe/?keyword=20201324)号&#x27;cloud_server: &#x27;[腾讯云](https://cloud.tencent.com/)，[Github](https://github.com/)&#x27;picture_bed: &#x27;[又拍云](https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral)&#x27; 其对应第二步中的 theme.footer.icp、theme.footer.cloud_server、theme.footer.picture_bed。 上述方法仅供参考，主题已支持该设置 2021.7.31 主题更新 Commit: custom footer ，可以使用 more 更优雅的实现上述内容，主题配置 footer.more 设置： 123more: # string or array (support markdown) - &#x27;本站托管于 [腾讯云](https://cloud.tencent.com/)，[Github](https://github.com/) ，使用 [又拍云](https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral) 作为图床。&#x27; - &#x27;渝ICP备[2021006569](https://beian.miit.gov.cn/)号，公安备[50011702500564](https://beian.miit.gov.cn/)号，萌ICP备[20201324](https://icp.gov.moe/?keyword=20201324)号&#x27; 百度收录 见：百度收录推送 stellar 表情标签索引 见：stellar表情标签索引 调整最大边距 修改 themes/stellar/source/css/_custom.styl : 123// 可以动态变化的属性:root --width-main: 820px //680 赞赏部件–sponsor-page 见：请作者喝咖啡–sponsor-page 示例： 移植 next 主题的 label 标签 仅对纯文本有效： class: gray purple blue green orange yellow red 示例： graypurplebluegreenorangeyellowred 查看代码1&#123;% label gray gray %&#125;&#123;% label purple purple %&#125;&#123;% label blue blue %&#125;&#123;% label green green %&#125;&#123;% label orange orange %&#125;&#123;% label yellow yellow %&#125;&#123;% label red red %&#125; 主题已集成 : mark 标签 官方效果：支持多彩标记标签，包括：默认红橙黄绿青蓝紫浅深 一共 10 种颜色 related_posts 随机选取图片作为相关文章封面 已与下面 添加随机自定义封面和横幅 合并 我也不知道为什么，这个东西在我这里就是有问题，不会提取到 `frontmatter.cover` ，而是采用文章的第一个图片。 后面成功实现了 Github Action 自动部署，发现正常了，但是把推送上去的 public 下载到本地进行 `hexo s` 还是有问题，总之就是很迷，以后应该会采用 action 自动部署的方式。之前改的源码也不能浪费，调整了一下设置为没有 `cover` 时，考虑自定义图片随机挑选，放弃了原来的根据 tags 搜索图片的设置，如果没有自定义图片就使用默认图片： related_posts.js1234567891011121314151617181920 if (p) &#123; if (p.cover) &#123; if (p.cover.includes(&#x27;/&#x27;)) &#123; list.img = p.cover; &#125; else &#123; list.img = &#x27;https://source.unsplash.com/1280x640/?&#x27; + p.cover; &#125;+ &#125; else if (cfg.selfimg.enable &amp;&amp; cfg.selfimg.imgs &amp;&amp; cfg.selfimg.imgs.length &gt; 0) &#123;+ list.img = cfg.selfimg.imgs[Math.floor(Math.random() * cfg.selfimg.imgs.length)] &#125;else if (cfg.auto_cover &amp;&amp; p.tags &amp;&amp; p.tags.length &gt; 0) &#123; var params = &#x27;&#x27;; p.tags.reverse().forEach((tag, i) =&gt; &#123; if (i &gt; 0) &#123; params += &#x27;,&#x27;; &#125; params += tag.name; &#125;); list.img = &#x27;https://source.unsplash.com/1280x640/?&#x27; + params; &#125; &#125; related_posts 的问题在我本地上还是没有解决，如果我是通过本地发布，那么相关文章的图片将会是我自己设置的，如果是通过 Github Action 自动部署的那么将会是 cover 图片。所以看一下我文章相关文章大概就知道我最后一次发布是怎么发布的了。 部署效果： Github Action 腾讯云 Serverless + Github Action 自动部署 Hexo 博客 设置 footer 链接不显示下划线 footer.styl12345 margin: 4px 0 line-height: 1.2 a- text-decoration: underline+ text-decoration: none 添加音乐播放器 播放器官网：myhkw 在 body 标签之前加入： layout.ejs12&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://myhkw.cn/api/player/163072767496&quot; id=&quot;myhk&quot; key=&quot;&quot; m=&quot;1&quot;&gt;&lt;/script&gt; 添加哔哔点啥 见：BBer：哔哔点啥-配置记录 自定义封面 已与下面 添加随机自定义封面和横幅 合并 layout\\_partial\\main\\post_list\\post_card.ejs1234567891011121314151617 &#125; else if (theme.article.auto_cover) &#123; // 自动以 tags 作为关键词搜索封面 if (post.tags) &#123; var params = &#x27;&#x27;; post.tags.reverse().forEach((tag, i) =&gt; &#123; if (i &gt; 0) &#123; params += &#x27;,&#x27;; &#125; params += tag.name; &#125;); cover_url = &#x27;https://source.unsplash.com/1280x640/?&#x27; + params; &#125; else &#123; cover_url = &#x27;https://source.unsplash.com/random/1280x640&#x27;; &#125;+ &#125; else if (theme.article.default_cover.enable) &#123;+ cover_url = theme.article.default_cover.imgs[Math.floor(Math.random() * theme.article.default_cover.imgs.length)] &#125; 更换 HarmonyOS 字体 参考：Hexo Stellar 主题和 Next 主题使用 HarmonyOS 字体 修改主题文件 /source/css/_custom.styl，39行： /source/css/_custom.styl1$ff-body = HarmonyOS_Regular 站点根目录设置文件 _config.yml 中添加 : _config.yml12345inject: head: - &lt;link rel=&quot;preconnect&quot; href=&quot;https://s1.hdslb.com/&quot; /&gt; - &lt;link rel=&quot;stylesheet&quot; href=&quot;//s1.hdslb.com/bfs/static/jinkela/long/font/regular.css&quot; media=&quot;all&quot; onload=&quot;this.media=&#x27;all&#x27;&quot; /&gt; - &lt;link rel=&quot;stylesheet&quot; href=&quot;//s1.hdslb.com/bfs/static/jinkela/long/font/medium.css&quot; media=&quot;all&quot; onload=&quot;this.media=&#x27;all&#x27;&quot; /&gt; 打印本文： 在 &quot;...\\layout\\_partial\\main\\article\\article_footer.ejs&quot; 文件添加如下代码： 123456789if (theme.article.printpost &amp;&amp; page.printpost != false) &#123; el += &#x27;&lt;section id=&quot;printpost&quot;&gt;&#x27;; el += &#x27;&lt;div class=&quot;header&quot;&gt;&#x27;; el += &#x27;&lt;span&gt;&#x27; + __(&#x27;meta.printpost&#x27;) + &#x27;&lt;/span&gt;&#x27;; el += &#x27;&lt;script&gt;&#x27;; el += &#x27;var pfHeaderImgUrl = &quot;&quot;;var pfHeaderTagline = &quot;&quot;;var pfdisableClickToDel = 0;var pfHideImages = 0;var pfImageDisplayStyle = &quot;block&quot;;var pfDisablePDF = 0;var pfDisableEmail = 1;var pfDisablePrint = 0;var pfCustomCSS = &quot;&quot;;var pfEncodeImages = 0;var pfShowHiddenContent = 0;var pfBtVersion=&quot;2&quot;;(function()&#123;var js,pf;pf=document.createElement(&quot;script&quot;);pf.type=&quot;text/javascript&quot;;pf.src=&quot;//cdn.printfriendly.com/printfriendly.js&quot;;document.getElementsByTagName(&quot;head&quot;)[0].appendChild(pf)&#125;)();&lt;/script&gt;&lt;a href=&quot;https://www.printfriendly.com&quot; style=&quot;color:#6D9F00;text-decoration:none;&quot; class=&quot;printfriendly&quot; onclick=&quot;window.print();return false;&quot; title=&quot;Printer Friendly and PDF&quot;&gt;&lt;img style=&quot;border:none;-webkit-box-shadow:none;box-shadow:none;&quot; src=&quot;//cdn.printfriendly.com/buttons/printfriendly-pdf-button-nobg-md.png&quot; alt=&quot;Print Friendly and PDF&quot;/&gt;&#x27;; el += &#x27;&lt;/a&gt;&#x27;; el += &#x27;&lt;/section&gt;&#x27;;&#125; 注意 ‘meta.printpost’ 是主题文件中的 languages 文件，记得在其中设置相应的中英文。 并在 _config.stellar.yml 的 article 部分，添加： 12article: printpost: true 若设置为 printpost: true 则启用打印本文，反正关闭。 为 Katex 配置滚动条 xaoxuu 大佬在评论区提供了 Katex 公式在移动设备下超出显示的解决方案，用滚动条。为了避免在桌面端出现滚动条，加上主题原生的设备控制就好了： 123.md p.katex-block @media screen and (max-width: $device-tablet) overflow: scroll; 添加随机自定义封面和横幅 这部分的随机自定义封面与 related_posts 随机选取图片作为相关文章封面 共用一个图片源，文章的 “banner” 用另一个图片库 有时候懒得找图片有没有什么关键词，就直接用自己预定好的图片随机当个封面，省时省力，主题自带的功能不受影响 需要修改三处主题代码：layout_partial\\cover\\post_cover.ejs、layout_partial\\main\\post_list\\post_card.ejs、scripts\\helpers\\related_posts.js 然后在主题设置中添加相应的图片源即可 三处代码修改如下： layout_partial\\cover\\post_cover.ejs 1234567891011121314151617181920212223242526272829303132 &lt;%function div() &#123; var el = &#x27;&#x27;;- if ((page.banner == undefined || page.banner == false) &amp;&amp; !theme.article.auto_banner) &#123;+ if (page.banner == false) &#123; return el; &#125; var url; if (page.banner != undefined) &#123; if (page.banner.includes(&#x27;/&#x27;)) &#123; url = page.banner; &#125; else &#123; url = &#x27;https://source.unsplash.com/2000x400/?&#x27; + page.banner; &#125;- &#125; else &#123;+ &#125; else if (theme.article.auto_banner &amp;&amp; !theme.article.default_banner.enable) &#123; // 自动以 tags 作为关键词搜索封面 if (page.tags) &#123; var params = &#x27;&#x27;; page.tags.reverse().forEach((tag, i) =&gt; &#123; if (i &gt; 0) &#123; params += &#x27;,&#x27;; &#125; params += tag.name; &#125;); url = &#x27;https://source.unsplash.com/2000x400/?&#x27; + params; &#125; else &#123; url = &#x27;https://source.unsplash.com/random/2000x400&#x27;; &#125;+ &#125; else if (theme.article.default_banner.enable) &#123;+ url = theme.article.default_banner.imgs[Math.floor(Math.random() * theme.article.default_cover.imgs.length)] &#125; layout_partial\\main\\post_list\\post_card.ejs 12345678910111213141516171819202122232425262728- if (post.cover || theme.article.auto_cover) &#123;+ if (post.cover || theme.article.auto_cover || theme.article.default_cover.enable) &#123; var cover_url; if (post.cover != undefined) &#123; if (post.cover.includes(&#x27;/&#x27;)) &#123; cover_url = post.cover; &#125; else &#123; cover_url = &#x27;https://source.unsplash.com/1280x640/?&#x27; + post.cover; &#125;- &#125; else &#123;+ &#125; else if (theme.article.auto_cover &amp;&amp; !theme.article.default_cover.enable) &#123; // 自动以 tags 作为关键词搜索封面 if (post.tags) &#123; var params = &#x27;&#x27;; post.tags.reverse().forEach((tag, i) =&gt; &#123; if (i &gt; 0) &#123; params += &#x27;,&#x27;; &#125; params += tag.name; &#125;); cover_url = &#x27;https://source.unsplash.com/1280x640/?&#x27; + params; &#125; else &#123; cover_url = &#x27;https://source.unsplash.com/random/1280x640&#x27;; &#125;+ &#125; else if (theme.article.default_cover.enable) &#123;+ cover_url = theme.article.default_cover.imgs[Math.floor(Math.random() * theme.article.default_cover.imgs.length)] &#125; scripts\\helpers\\related_posts.js 12345678910111213141516171819 return &#x27;&#x27;; &#125; const cfg = hexo.theme.config.article.related_posts;+ const dfc = hexo.theme.config.article.default_cover; if (cfg.enable != true) return; var returnHTML = &quot;&quot;; var div = `@ -42,7 +43,9 @@ hexo.extend.helper.register(&#x27;popular_posts_wrapper&#x27;, function(args)&#123; &#125; else &#123; list.img = &#x27;https://source.unsplash.com/1280x640/?&#x27; + p.cover; &#125;- &#125; else if (cfg.auto_cover &amp;&amp; p.tags &amp;&amp; p.tags.length &gt; 0) &#123;+ &#125; else if (dfc.enable &amp;&amp; dfc.imgs &amp;&amp; dfc.imgs.length &gt; 0) &#123;+ list.img = dfc.imgs[Math.floor(Math.random() *dfc.imgs.length)]+ &#125; else if (cfg.auto_cover &amp;&amp; p.tags &amp;&amp; p.tags.length &gt; 0) &#123; var params = &#x27;&#x27;; p.tags.reverse().forEach((tag, i) =&gt; &#123; if (i &gt; 0) &#123; 添加图片源 12345678910article: # 如果没有指定封面，是否根据 tags 作为关键词搜索封面？ auto_cover: true # search from https://source.unsplash.com/ auto_banner: true # search from https://source.unsplash.com/+ default_cover:+ enable: true+ imgs:+ default_banner:+ enable: true+ imgs:","tags":["Hexo","Stellar"],"categories":["博客折腾"]},{"title":"建站序言","path":"/2021-06-28/建站序言/","content":"欢迎来到在下的小站，本站自2021.6.29正式发布，今后这里将存放一些自己的笔记和生活记录，或者放一些好玩的东东。 建站初衷 搭建个人站主要目的是为了存放自己的一些 .md 的笔记。在电脑上实在不好管理，也不好查看。通过个人站的形式呈现出来一目了然，十分方便。Volantis 中的 group front-matter 可以基本呈现出书籍文档类的效果，基本满足了我的需求。于是这个基于Hexo -Volantis 主题的小站就此开始建设了。 在 Volantis 博主群里发现了 xaoxuu 大佬开发的 stellar 主题，研究过后发现非常优雅，于是将站点更换为 stellar 主题，volantis 主题作为分站存在，等待5.0版。 建站历程 萌生搭建个人站的想法已经有几年了，之所以直到现在才搭建自己的个人站主要还是因为时间不够和畏难心理。一开始考虑到需要购置服务器，自己写网页前端，设计各种素材等等，就头大。没错，对于一个程序语言就能勉强写点python和r的人，完全不沾边啊。当然如果我早点知道有这么多静态博客的框架可以直接用，或许这个站点可以提早出生几年(不是)。 前段时间，也是机缘巧合发现了Hexo这个博客架构，本着程序员(伪)决不重复造轮子的心态，果断采用了简洁的 Next 主题。无他，页面简洁教程多，结果当事人是非常的后悔。 由于太过简洁，需要自己魔改的内容就非常多，而网上的一些教程也不适配现在的 8.0 版本，就踩了很多坑，不过也因此接触了一些 js、css等内容，这为后面顺利美化博客打了基础。 万幸偶遇到 翀翀，给我指了一条明路，虽然当时没放在心上，不过现在嘛，是真的香。中间经历了一个Butterfly主题，据官方说也是从 Material X 演变过来的，各种配置文档什么的都不错，集成了很多功能，基本只需要自己配置一下设置文档，但体验了一下太花里胡哨，不符合在下矜(古)持(板)的形象。最后还是选择 Volantis 够香，好滋味。 站点基本建设起来之后，考虑到国内访问的问题(github.io 域名被有的浏览器ban了)，决定还是买一个域名，顺便备个案，以便可以在国内愉快的玩耍。在这途中偶然发现目前 coding 的持续部署是使用了腾讯云的 serverless和cos存储 ，而腾讯的云函数文档中也直接提供了使用云函数直接部署 Hexo 博客的接口，简直不要太方便。最后就直接买了一个五年的云函数服务一则用来备案，二来则用来部署生成的静态页面。 最后 希望自己能够坚持写学习笔记，坚持记录，想必过几年来看也是一个不错的回忆和知识储备。也希望巧合来到本站的你，幸福开心。"},{"title":"Volantis 建站记录","path":"/2021-06-26/Volantis-建站记录/","content":"本文记录了我在使用Volantis主题建站时操作的一些内容，或简或繁，主要是为了方便日后主题升级，设备更换时能够顺利迁移，同时向参考的一些站点博主表示感谢。 站点参考 本站参考了一些博客站点的设置及美化，或受其启发，或用到其类似的功能或配置，不能一应俱全的列举出来，都一并表示感谢。 恶搞标题 当用户在访问站点切换到其他网页时，可以呈现恶搞标题效果。 新建 FunnyTitle.js 在主题文件夹\\themes\\volantis\\source\\js 中新建 FunnyTitle.js ，在其中添加如下代码： \\themes\\volantis\\source\\js\\FunnyTitle.js1234567891011121314151617// 浏览器搞笑标题var OriginTitle = document.title;var titleTime;document.addEventListener(&#x27;visibilitychange&#x27;, function () &#123; if (document.hidden) &#123; $(&#x27;[rel=&quot;icon&quot;]&#x27;).attr(&#x27;href&#x27;, &quot;/funny.ico&quot;); document.title = &#x27;╭(°A°`)╮ 呀怎么舍得走哇 ~&#x27;; clearTimeout(titleTime); &#125; else &#123; $(&#x27;[rel=&quot;icon&quot;]&#x27;).attr(&#x27;href&#x27;, &quot;/favicon.ico&quot;); document.title = &#x27;(ฅ&gt;ω&lt;*ฅ) 噫又回来了耶 ~&#x27; + OriginTitle; titleTime = setTimeout(function () &#123; document.title = OriginTitle; &#125;, 2000); &#125;&#125;); 其中favicon.ico 是正常图标， funny.ico 是用户切换到其它标签后你网站的图标。 启用这个 .js 文件 在 \\themes\\volantis\\layout\\layout.ejs 文件中的 &lt;body&gt; 下面添加如下代码： \\themes\\volantis\\layout\\layout.ejs12&lt;!--浏览器搞笑标题--&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/FunnyTitle.js&quot;&gt;&lt;/script&gt; 另外，也可以将上述 FunnyTitle.js 托管到 Github上，在此引用 jsdelivr 的加速链接。 底部建站时间 设置 footer.ejs 文件 这里首先需要设置 footer.ejs 文件，其在 Volantis 主题的位置是 \\themes\\volantis\\layout\\_partial\\footer.ejs 。在其中的第48行的位置后添加如下代码： \\themes\\volantis\\layout\\_partial\\footer.ejs12345678else if (item == &#x27;runtime_count&#x27;) &#123; %&gt; &lt;span id=&quot;runtime_span&quot;&gt;&lt;/span&gt; &lt;script type=&quot;text/javascript&quot;&gt;function show_runtime()&#123;window.setTimeout(&quot;show_runtime()&quot;,1000);X=new Date(&quot;5/25/2021 00:00:00&quot;); Y=new Date();T=(Y.getTime()-X.getTime());M=24*60*60*1000; a=T/M; dnum=Math.floor(a); b=(a-dnum)*24; hnum=Math.floor(b);c=(b-hnum)*60; mnum=Math.floor((b-hnum)*60); snum=Math.floor((c-mnum)*60); runtime_span.innerText =&quot;⚡&quot;+&quot;本站在风雨飘摇中度过了 &quot; + dnum + &quot; 天 &quot; + hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot; + &quot;⚡&quot;&#125;;show_runtime();&lt;/script&gt; 可以根据需要修改 runtime_span.innerText 中的文本。 注意 item == 'runtime_count' 其中 runtime_count 可以自定义，在主题配置文件中引用相同的名称即可。需要引用的内容只有 &lt;span id=&quot;runtime_span&quot;&gt;&lt;/span&gt;，具体看下面。 启用该设置 在 Volantis 中启用它，找到 site_footer 部分，在其下加入： _config.volantis.yml12runtime_count: &lt;span id=&quot;runtime_span&quot;&gt;&lt;/span&gt; 别忘了在前面的 layout:[] 部分中加入 runtime_count 。 网页弹窗 这里主要运用 javascript 插件 ：[ Sweetalert 、Sweetalert-github] 具体安装和使用方法可见其 官网 和 Github 。我采用了直接引用的方法。 在 \\themes\\volantis\\layout\\_partial\\head.ejs 文件中的第二行 &lt;meta charset=&quot;utf-8&quot;&gt; 后加入： \\themes\\volantis\\layout\\_partial\\head.ejs123&lt;meta charset=&quot;utf-8&quot;&gt;&lt;!-- 在此后加入 --&gt;&lt;!-- Sweetalert弹窗显示 --&gt; &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt; 或者使用 jsdeliver ： \\themes\\volantis\\layout/_partial/head.ejs123&lt;meta charset=&quot;utf-8&quot;&gt;&lt;!-- 在此后加入 --&gt;&lt;!-- Sweetalert弹窗显示 --&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/sweetalert&quot;&gt;&lt;/script&gt; 并由此实现了以下几个功能 (目前网页只保留了2) ： 进入网站弹窗 复制网站内容弹窗 复制代码弹窗 右键复制弹窗 网站弹窗+自动切换暗黑主题 进入网站弹窗 这里参考了：https://luosw.fun/post/e281.html ，但这篇博文提到的关于自动调整暗黑模式+弹窗的逻辑反了，随后又看了一下colsrch 大佬的博文 https://colsrch.cn/posts/9eae9d7b/ 这里直接设置 \\themes\\volantis\\layout\\index.ejs 文件就可以了，在其开头加入： \\themes\\volantis\\layout\\index.ejs123456789&lt;!-- 网页访问欢迎弹窗 --&gt;&lt;script&gt;swal(&#123; title: &#x27;花径不曾缘客扫，蓬门今始为君开。&#x27;, text: &quot;在下是博主hemitlsr，这里作为个人学习生活的记录而存在。 在这里可以看博文，玩游戏，交朋友。 欢迎留言，交换友链。 但请不要留下不友好的痕迹，不然在下隔着屏幕咬你啊。&quot;, icon: &#x27;https://cdn.jsdelivr.net/gh/hermitlsr/image-for-hermitlsr.top/web/rickavatar.png&#x27;, button: &quot;好的，已知晓&quot;,&#125;);&lt;/script&gt; 这里 swal() 是引用该弹窗的函数，其有四个可选参数：title 、text 、icon 、button 。其中 icon 有四个默认的选项，可设置为 icon 图标，这里在下使用的是图片。 复制网站内容弹窗 复制代码弹窗 这里需要设置 layout\\third-party\\clipboard\\script.ejs 文件，在后20行 clipboard.off('success').on('success', function (e) &#123;&#125; 中： layout\\third-party\\clipboard\\script.ejs1234567&lt;!-- 复制代码弹窗 --&gt;swal(&#123;\ttitle: &#x27;复制成功&#x27;, text: &quot;代码已复制，请遵守相关授权协议。 转载请记得注明出处&quot;, icon: &#x27;success&#x27;, button: &quot;我承诺遵守&quot;,&#125;); 右键复制弹窗 这里需要设置两项内容： 链接地址复制弹窗 文本复制弹窗 均在 layout\\_partial\\rightmenu.ejs 文件中进行设置 链接地址复制弹窗 在上述文件末尾的 function copyString(str) &#123;&#125; 函数中 document.body.removeChild(input); 后面添加如下内容： layout\\_partial\\rightmenu.ejs1234567&lt;!-- 右键菜单栏复制弹窗 --&gt;swal(&#123;\ttitle: &#x27;复制成功&#x27;,\ttext: &quot;文本/链接已复制，请遵守相关授权协议。 转载请记得注明出处&quot;,\ticon: &#x27;success&#x27;,\tbutton: &quot;我承诺遵守&quot;,&#125;); 文本复制弹窗 还是在上述文件中，找到 if ('&lt;%= theme.plugins.clipboard.enable %&gt;' == 'true') &#123;&#125;将其设置为如下： layout\\_partial\\rightmenu.ejs12345678910111213if (&#x27;&lt;%= theme.plugins.clipboard.enable %&gt;&#x27; == &#x27;true&#x27;) &#123; &lt;!-- 文本复制弹窗 --&gt; let str_luosw = window.getSelection().toString(); copyText.style.display = &#x27;block&#x27;; hrText.style.display = &#x27;block&#x27;; &lt;!-- 文本复制弹窗 --&gt; copyText.addEventListener(&quot;click&quot;, function (e) &#123; copyString(str_luosw); &#125;, &#123; once: true &#125;);&#125; 网站弹窗+自动切换暗黑主题 这里需要设置的是 layout\\_partial\\scripts\\darkmode.ejs 。 首先在该文件开头第一行加入： layout\\_partial\\scripts\\darkmode.ejs1&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/gh/hermitlsr/CDN@master/judge_time/js.js&quot;&gt;&lt;/script&gt; 再在文件底部 &lt;script&gt; 前加入： 查看代码layout\\_partial\\scripts\\darkmode.ejs123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117&lt;!-- 自动夜间模式加弹窗 --&gt;// 自动夜间模式 if (navigator.geolocation) &#123; //获取地理位置 用于判断日出日落时间 navigator.geolocation.getCurrentPosition( function (position) &#123; var res = computeSunRiseSunSet(position.coords.latitude, position.coords.longitude, 8); console.log(res.str) adjust_time(res.strSunRise, res.strSunSet, &quot;08:00&quot;, &quot;12:00&quot;, &quot;14:00&quot;, &quot;23:00&quot;) &#125;, function (e) &#123; adjust_time(&quot;7:00&quot;, &quot;17:30&quot;, &quot;08:00&quot;, &quot;12:00&quot;, &quot;14:00&quot;, &quot;23:00&quot;) //未允许获取地理位置时，使用默认时间 console.log(&quot;未允许获取地理位置，使用默认配置时间&quot;) throw (e.message); &#125; ) &#125; function adjust_time(beginTime, endTime, morningTime, noonTime, afternoonTime, nightTime) &#123; const rootElement = document.documentElement; var strb = beginTime.split(&quot;:&quot;); if (strb.length != 2) &#123; return false; &#125; var stre = endTime.split(&quot;:&quot;); if (stre.length != 2) &#123; return false; &#125; var strmorning = morningTime.split(&quot;:&quot;); //12点 if (stre.length != 2) &#123; return false; &#125; var strnoon = noonTime.split(&quot;:&quot;); //12点 if (stre.length != 2) &#123; return false; &#125; var strafternoon = afternoonTime.split(&quot;:&quot;); //13点 if (stre.length != 2) &#123; return false; &#125; var strnight = nightTime.split(&quot;:&quot;); //23点 if (stre.length != 2) &#123; return false; &#125; var b = new Date(); var e = new Date(); var n = new Date(); var morning = new Date(); var noon = new Date(); var afternoon = new Date(); var night = new Date(); b.setHours(strb[0]); b.setMinutes(strb[1]); e.setHours(stre[0]); e.setMinutes(stre[1]); morning.setHours(strmorning[0]); morning.setMinutes(strmorning[1]); noon.setHours(strnoon[0]); noon.setMinutes(strnoon[1]); afternoon.setHours(strafternoon[0]); afternoon.setMinutes(strafternoon[1]); night.setHours(strnight[0]); night.setMinutes(strnight[1]); //在这里面处理获得的数据 if (n.getTime() - b.getTime() &gt; 0 &amp;&amp; n.getTime() - e.getTime() &lt; 0) &#123; var daytimetitle = &quot;&quot;; var daytimemessage = &quot;&quot;; if (n.getTime() - morning.getTime() &lt; 0) &#123; // 早上 daytimetitle = &quot;早安( •̀ ω •́ )✧&quot;; &#125; else if (n.getTime() - noon.getTime() &lt; 0) &#123; // 上午 daytimetitle = &quot;上午好§(*￣▽￣*)§&quot;; &#125; else if (n.getTime() - afternoon.getTime() &lt; 0) &#123; // 中午 daytimetitle = &quot;中午好( *︾▽︾)&quot;; daytimemessage = &quot;Hi~ o(*￣▽￣*)ブ要注意休息哦&quot;; &#125; else &#123; // 下午 daytimetitle = &quot;下午好&quot;; &#125; // 判断是否已经开启夜间模式 if (rootElement.getAttribute(&#x27;data-user-color-scheme&#x27;, &#x27;dark&#x27;)) &#123; // 已开启夜间模式，修改按钮状态 swal(&quot;操作通知&quot;, daytimetitle + &quot;，已自动为您切换为日间模式。&quot; + daytimemessage, &quot;success&quot;); const mode = toggleCustomDarkMode(); applyCustomDarkModeSettings(mode); &#125; else &#123; // 未开启夜间模式，不执行操作 swal(daytimetitle, daytimemessage, &quot;info&quot;); return true; &#125; &#125; else &#123; // 晚上 var nighttitle = &quot;&quot;; var nightmessage = &quot;&quot;; if (night.getTime() - n.getTime() &lt; 0 || n.getTime() - b.getTime() &lt; 0) &#123; nighttitle = &quot;夜深了&quot;; nightmessage = &quot;该睡觉啦(∪.∪ )...zzz&quot;; &#125; else &#123; nighttitle = &quot;晚上好&quot;; nightmessage = &quot;吃晚饭了吗？要注意眼睛哦(づ￣ 3￣)づ&quot;; &#125; // 判断是否已经开启夜间模式 if (rootElement.getAttribute(&#x27;data-user-color-scheme&#x27;, &#x27;dark&#x27;)) &#123; // 已开启夜间模式，不执行操作 swal(nighttitle, nightmessage, &quot;info&quot;); return true; &#125; else &#123; // 未开启夜间模式，修改按钮状态 swal(&quot;操作通知&quot;, nighttitle + &quot;，已自动为您切换为夜间模式。&quot; + nightmessage, &quot;success&quot;); const mode = toggleCustomDarkMode(); applyCustomDarkModeSettings(mode); &#125; &#125; &#125; 百宝箱页面设置 image.png 这是 Viggo 大佬制作的一个网站导航项目 WebStackPage，并由 HCLonely 制作为 hexo-theme-webstack 引用这个页面实际上是做一个新的主题网页，使用二级域名指向它。也可以做成分站形式，但是对于这样需要经常添加修改的网页不是很方便。 这里具体可以参考： 黑石大佬：为Hexo博客建立其他主题分站 诗颂：搭建Hexo-WebStack网址导航 我主要是在页面抬头位置添加了几个链接，并引入了心知天气插件，这部分也是参考了黑石大佬和TRXH的百宝箱页面。 在主题文件夹下设置 themes/webstack/index.js 文件： themes/webstack/index.js123456789101112&lt;li class=&quot;hover-line&quot; style=&quot;min-height: 75px;&quot;&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;http://localhost:500&quot;&gt;博客首页&lt;/a&gt; &lt;!--https://www.hermitlsr.top--&gt;&lt;/li&gt;&lt;li class=&quot;hover-line&quot; style=&quot;min-height: 75px;&quot;&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://www.hermitlsr.top/categories/&quot;&gt;文章分类 &lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;hover-line&quot; style=&quot;min-height: 75px;&quot;&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://www.hermitlsr.top/messages/&quot;&gt;留言灌水 &lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;hover-line&quot; style=&quot;min-height: 75px;&quot;&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://www.hermitlsr.top/friends/&quot;&gt;友情链接 &lt;/a&gt;&lt;/li&gt; 引入心知天气插件，这部分主题代码可以直接在心知天气官网生成： themes/webstack/index.js123456789101112131415161718 &lt;li class=&quot;hover-line&quot; style=&quot;min-height: 75px; &quot;&gt; &lt;div id=&quot;tp-weather-widget&quot; style=&quot;padding: 25px 20px !important; &quot;&gt;&lt;/div&gt; &lt;script&gt; (function(a,h,g,f,e,d,c,b)&#123;b=function()&#123;d=h.createElement(g);c=h.getElementsByTagName(g)[0];d.src=e;d.charset=&quot;utf-8&quot;;d.async=1;c.parentNode.insertBefore(d,c)&#125;;a[&quot;SeniverseWeatherWidgetObject&quot;]=f;a[f]||(a[f]=function()&#123;(a[f].q=a[f].q||[]).push(arguments)&#125;);a[f].l=+new Date();if(a.attachEvent)&#123;a.attachEvent(&quot;onload&quot;,b)&#125;else&#123;a.addEventListener(&quot;load&quot;,b,false)&#125;&#125;(window,document,&quot;script&quot;,&quot;SeniverseWeatherWidget&quot;,&quot;//cdn.sencdn.com/widget2/static/js/bundle.js?t=&quot;+parseInt((new Date().getTime() / 100000000).toString(),10))); window.SeniverseWeatherWidget(&#x27;show&#x27;, &#123; flavor: &quot;slim&quot;, location: &quot;&quot;, geolocation: true, language: &quot;zh-Hans&quot;, unit: &quot;c&quot;, theme: &quot;auto&quot;, token: &quot;&quot;, hover: &quot;enabled&quot;, container: &quot;tp-weather-widget&quot; &#125;) &lt;/script&gt; &lt;/li&gt;&lt;/ul&gt; 注意 style=&quot;padding: 29px 20px; 这里设置的数值是为了使其与其他元素保持水平。 由于心知天气会自定义样式，为了保持样式一致，还重新定义了字体颜色，在 source\\css\\hclonely.css 中设置如下： source\\css\\hclonely.css123.dsrBSL &#123; color: #979898 !important;&#125; 导航栏全屏以及页面透明度 导航栏全屏 当时看到几个博客页面导航栏占据全屏之后设置透明效果还蛮好看，就迫不及待自己搞一搞，当然纯靠 F12 的方法失败了，最后这个是 inkss 大佬提供的方法。后面又去 Volantis 官方文档里翻东西的时候偶然发现这个问题在鸣谢板块的评论区有一个很长的讨论，更觉得当时自己很憨了。 在 \\source\\css\\_layout\\main.styl 文件下按上述方法进行设置： \\source\\css\\_layout\\main.styl12345.l_header @media screen and (max-width: $device-2k) left: 0 !important border-radius: 0 !important max-width: 100% !important 在添加对移动端的设置 \\source\\css\\_layout\\main.styl12345678910111213141516// 调整移动端的显示#safearea @media screen and (max-width: $device-mobile) margin: 16px 0 0 !important box-shadow: none !important #l_main article#comments, article#friends, article#post, article#page, article#arc border-radius: 0 !important margin-top: -16px !important article#cat, article#tag margin: -16px -16px 0 !important 页面透明度 这里使用了 F12 大法。页面透明度这里需要对 导航栏，侧边栏以及文章主体 三个位置分别进行设置。这里顺便调整了侧边栏的宽度。 \\source\\css\\_layout\\main.styl12345678910111213.l_header.auto.show &#123; opacity: 0.85 !important;&#125;.l_side &#123; opacity: 0.9 !important; width: 300px !important; //不合适的设置&#125;.l_main &#123; opacity: 0.95 !important; width: calc(100% - 1 * 300px) !important; //不合适的设置&#125; 另外侧边栏宽度和文章总宽度在 Volantis 主题中有一个总长度设置：max_width: 1270px。 页面宽度的设置已经取消了，由于固定了 .l_side 在移动端的距离就不会自动变化，就会导致 .l_main 部分变窄。这里直接修改 layout.styl ，其定义了侧边栏的基本参数，位于 volantis\\source\\css\\_defines\\layout.styl 。将其中 $sidebar 这个参数设置为 260px 念两句诗 Volantis 主题本身就集成了一个每日一诗 在侧边栏的 blogger 中，在下想用这类似的插件来修饰页面，于是就引入了 今日诗词 插件： image.png 首先设置样式 在 \\source\\css\\_layout\\main.styl 中加入： 查看代码\\source\\css\\_layout\\main.styl12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// 念两句诗.poem-wrap &#123; position: relative !important; width: 730px !important; max-width: 80% !important; border: 2px solid #797979 !important; border-top: none !important; text-align: center !important; margin: 80px auto !important;&#125;.poem-left &#123; left: 0 !important;&#125;.poem-right &#123; right: 0!important;&#125;.poem-border &#123; position: absolute !important; height: 2px!important; width: 35%!important; //调整框线的长度 background-color: #797979!important;&#125;.poem-wrap p &#123; width: 70%!important; margin: auto!important; line-height: 30px!important; color: #797979!important;&#125;.poem-wrap h1 &#123; position: relative!important; margin-top: -100px!important; display: inline-block!important; letter-spacing: 12px!important; color: #797979!important; border-bottom: 1px solid rgba(68,68,68,0) !important;&#125;.poem-wrap p#poem &#123; font-size: 25px!important; text-align: center !important;&#125;.poem-wrap p#info &#123; font-size: 15px!important; margin: 15px auto!important; text-align: center !important;&#125; 在需要的地方加入 Html 语句 具体细节可以参考 今日诗词官网 12345678910111213141516&lt;div class=&quot;poem-wrap&quot;&gt; &lt;div class=&quot;poem-border poem-left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;poem-border poem-right&quot;&gt;&lt;/div&gt; &lt;h1&gt;留言板&lt;/h1&gt; &lt;p id=&quot;poem&quot;&gt;&lt;/p&gt; &lt;p id=&quot;info&quot;&gt;&lt;/p&gt; &lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; jinrishici.load(function(result) &#123; var sentence = document.querySelector(&quot;#poem&quot;) var info_in = document.querySelector(&quot;#info&quot;) sentence.innerHTML = result.data.content info_in.innerHTML = &#x27;【&#x27; + result.data.origin.dynasty + &#x27;】&#x27; + result.data.origin.author + &#x27;《&#x27; + result.data.origin.title + &#x27;》&#x27; &#125;); &lt;/script&gt; &lt;/div&gt; 页面的头像信息设置 image.png 这里参考了 TRHX 大佬的样式，然后直接用了一个较为简单的方法呈现出来： 123&lt;center&gt;&lt;a href=&quot;https://hermitlsr.top/about/&quot;&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/hermitlsr/image-for-hermitlsr.top/web/rickavatar.png&quot; width=&quot;100&quot; height=&quot;100&quot;&gt; &lt;/a&gt;&lt;/center&gt;&lt;center&gt;&lt;a href=&quot;https://www.hermitlsr.top/atom.xml&quot; rel=&quot;RSS&quot; target=&quot;_blank&quot; title=&quot;RSS&quot;&gt;&lt;i class=&quot;fa fa-rss&quot;&gt;&lt;/i&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;mailto:1165749128@qq.com&quot; rel=&quot;Email&quot; target=&quot;_blank&quot; title=&quot;Email&quot;&gt;&lt;i class=&quot;fa fa-envelope&quot;&gt;&lt;/i&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://github.com/hermitlsr&quot; rel=&quot;GitHub&quot; target=&quot;_blank&quot; title=&quot;GitHub&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;http://wpa.qq.com/msgrd?v=3&amp;amp;uin=1165749128&amp;amp;site=qq&amp;amp;menu=yes&quot; rel=&quot;QQ&quot; target=&quot;_blank&quot; title=&quot;QQ&quot;&gt;&lt;i class=&quot;fab fa-qq&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/center&gt; 公式加载问题 安装配置 KaTeX 基本没有问题 ，但是公式渲染还是有问题，这里根据官方推荐，参考了 https://www.micdz.cn/article/katex-on-volantis/ ，完美解决。做法就是在 themes\\volantis\\layout\\_partial\\head.ejs 文件的最后添加： themes\\volantis\\layout\\_partial\\head.ejs12345678&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css&quot; integrity=&quot;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&quot; crossorigin=&quot;anonymous&quot;&gt; &lt;!-- The loading of KaTeX is deferred to speed up page rendering --&gt;&lt;script defer src=&quot;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.js&quot; integrity=&quot;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;!-- To automatically render math in text elements, include the auto-render extension: --&gt;&lt;script defer src=&quot;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/contrib/auto-render.min.js&quot; integrity=&quot;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&quot; crossorigin=&quot;anonymous&quot; onload=&quot;renderMathInElement(document.body);&quot;&gt;&lt;/script&gt; 电子时钟部件 使用了插件：hexo-electric-clock 参考了： https://zfe.space/post/hexo-electric-clock.html 该插件可以自动获取访问者的 ip 地址，同时以此 ip 地址展示天气时间等信息 步骤： 下载该插件 配置插件 调整 css 样式 下载该插件 1npm i hexo-electric-clock --save 按照参考中的建议，需要加上 --save 否则本地预览可能不生效。 插件配置 在博客根目录的配置文档 _config.yml 中 加入： ../_config.yml12345678910# 电子钟electric_clock: priority: 10 enable: true enable_page: all layout: type: id name: clock index: 0 temple_html: &#x27;&lt;div class=&quot;card-widget card-clock&quot;&gt;&lt;div class=&quot;card-glass&quot;&gt;&lt;div class=&quot;card-background&quot;&gt;&lt;div class=&quot;card-content&quot;&gt;&lt;div id=&quot;hexo_electric_clock&quot;&gt;&lt;img id=&quot;card-clock-loading&quot; src=&quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif&quot; style=&quot;height: 120px; width: 100%;&quot; data-ll-status=&quot;loading&quot; class=&quot;entered loading&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27; 主要需要修改的地方是 layout ，它决定了电子时钟的具体位置。type 有两个选项 class 和 id 对应着 Html 中的两种属性。其中 class 不具有唯一性，在一个小块中，常常有多个 class 嵌套，这就需要使用 index 指定是第几个 class 。这里为求方便，我在需要展示电子钟的位置新增了 一个id。 我希望放的位置是侧边栏的公告栏部分，在 Volantis 主题中，这是以文本部件的形式呈现 ( class: widget text shadow floatable desktop )，需要在 content 部分增加 id 。在主题文件夹中找到 ..\\volantis\\layout\\_widget\\text.ejs 文件，在第4行 &lt;div class='content'&gt; 之后加入： ..\\volantis\\layout\\_widget\\text.ejs12&lt;div id=&quot;clock&quot;&gt;&lt;/div&gt;&lt;div id=&quot;clock&quot;&gt;&lt;/div&gt; 在其他部件中加入同理。 调整 css 样式 这里是根据自己的喜好进行设置。 在主题文件 \\source\\css\\_layout\\main.styl 文件中加入： \\source\\css\\_layout\\main.styl1234.card-background &#123; height: auto !important; margin: 0px !important;&#125; 当然，也可以在插件的 css 中直接修改，位置是 .. ode_modules\\hexo-electric-clock\\clock.css 增加朋友圈 该功能由小冰大佬完成的，可以将友链网站中更新的文章集中展示，目前支持 volantis、butterfly 等五个主题的友链爬取，以及github和gitee友链的爬取，已经更新到 beta1.5 还在继续开发，可参见: 原项目地址：https://github.com/Rock-Candy-Tea/hexo-circle-of-friends 配置教程：https://zfe.space/post/friend-link-circle.html 配置的过程中遇到一些坑 _config.yml 中的 github 和 gitee 都需要取消注释，不需要的部分设置 enable=false。 如果在自己的友链界面加入了自己的链接，可以设置 if user_info[1] != '你的链接': ，排除自己的文章。 配置好后，一般是整点开始爬取，所以会延迟生效，不用担心没配置好。 在 volantis 中配置只需要新建一个 page ，然后加入 &lt;div id=&quot;moments_container&quot;&gt;&lt;script src=&quot;/js/moments.js&quot;&gt;&lt;/script&gt;&lt;/div&gt; 即可。 文章永久链接 之前采用重设 urlname 的方式避免中文标题的编码问题，但是每次写文章都要自己输入一次，太麻烦。现在采用 hexo-abbrlink 插件进行生成。仅需在站点根目录的 _config.yml 中做如下设置 \\_config.yml1234permalink: :year-:month-:day/:abbrlink.html abbrlink: alg: crc32 #算法： crc16(default) and crc32 rep: hex #进制： dec(default) and hex 最终生成的本文链接形式：https://www.hermitlsr.top/2021-06-26/40ecd548.html …未完待续","tags":["Hexo","Volantis"],"categories":["博客折腾"]},{"title":"Hexo 文章永久链接设置","path":"/2021-06-22/Hexo 文章永久链接设置/","content":"在使用Hexo写博客时，使用中文博客标题生成的永久链接是冗长且无意义的，这不利于进行SEO，且不易读。一个好的永久链接应该体现文章内容，本文介绍在Hexo中如何自定义永久链接。 永久链接介绍 永久链接是什么, Hexo官方介绍： 维基百科的定义固定链接（PermaLink，Permanent Link的缩写）或称“永久链接”或“静态链接”，意指向一个特定网络日志（WebLog，Blog）的永久固定标识符。一般情况下，固定链接指向的均为一个网络日志条目（Entry）的独立网页。默认存档设置包含基于数据库的存档和单独文件存档。默认情况下，固定链接被设置为链接到一个条目的单独存档页面中。你可以在网络日志的下方，或者在“发布时间”之后，看到 Permalink。点击 Permalink 将会把访问者导向到专属于该条目 (Entry) 的独立网页中，一般包含“添加评论”等功能。如果可能的话，一般的静态链接会尽量使得网址本身是有意义（人类可读）的，例如网址本身就含有该篇博客的标题。然而由于Unicode在网址需要特殊编码，因此非英文的语言比较难做到这点。 最初作用永久链接最初主要是为了做搜索引擎优化(SEO)，因为搜索引擎的机器人对静态的URL有偏好，所以对于动态生成的页面，人们想出了这么个办法来使其假扮成一个静态的页面，以便让搜索引擎更好的索引网站内容;另外一个初衷是增加URL地址的可读性。 简单来讲，永久链接是网页的完整网址 (url) ，这个网址永远不会改变的。一般而言，希望这个网址是有意义的 (人类可读)，例如网址中含有的博客标题。但是使用非英文语言作为标题会导致生成的永久链接是不可读的冗长的编码内容。Hexo默认使用博客文章标题作为永久链接，这就需要我们重新定义永久链接中的非英文语言部分。 基本设置 设置步骤： 修改博客根目录中站点设置文件 _config.yml 修改发布文章模板 ...\\scaffolds\\post.md 修改博客根目录中站点设置文件 12345678# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: https://hermitlsr.toppermalink:year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks Hexo默认的永久链接格式是：permalink:year/:month/:day/:title/ ， 例如本篇文章如果按照原始格式，其永久链接将是：https://hermitlsr.top/2021/06/22/Hexo%20%E6%96%87%E7%AB%A0%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5%E8%AE%BE%E7%BD%AE/ 将在浏览器地址中显示： https://hermitlsr.top/2021/06/22/Hexo%20文章永久链接设置/ 事实上如若复制浏览器中的地址得到的还是上面冗长的编码的，浏览器地址中的显示是编码过的。另外，默认格式中的日期格式是递进的关系，可以根据自己的需求进行设定删减，我减少了一些中间层次，直接设置为 /2021-06-22/ ： 12345678# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: https://hermitlsr.toppermalink: :year-:month-:day/:urlname/ # :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks 将永久链接的格式设置为：permalink: :year-:month-:day/:urlname/ ，其中 urlname 是自定义的文章地址，可以和文章标题不一致。可自由设置，这里采用的方式是使用文章标题拼音首字母代替原有的部分。 修改发布文章模板 前面提到的 urlname 需要设置在文章开头的 front-matter 中，在 Volantis 主题中的详情参数可见 Volantis front-matter，如： 1234567---title: Hexo 文章永久链接设置mathjax: trueurlname: Hexo-wzyjljszdate: 2021-06-22 23:51:12tags:--- 这里将 urlname 设置为 Hexo-wzyjljsz ，此时的永久链接就变成了：https://hermitlsr.top/2021-06-22/Hexo-wzyjljsz/ ，非常清爽明了。 自定义永久链接的设置在这里基本完成了。如果不想每次写博文时都要再输入一遍 urlname: 需要修改发布文章的模板 (post)，对于草稿 (draft) 可一样处理。 在站点文件中找到 ...\\scaffolds\\post.md 文件，在其中设置： 123456789101112---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;urlname:mathjax: truecover: truecomments: falsethumbnail: trueheadimg: tags:categories:--- 因为文章基本都要进行公式渲染，所以还在这里设置了 mathjax: true ，具体需要设置的内容可根据自身需求而定。 更多修改 使用 hexo new post &quot; &quot; 新建文章的时候，默认文章命名不方便日后的文章查找整理，这里一并进行设置，最后的格式是这样的：2021-06-22--Hexo 文章永久链接设置.md ，加上文章前缀之后更便于管理。 这里只需要设置博客根目录站点设置文件 _config.yml 中 new_post_name 即可： 123new_post_name: :year-:month-:day--:title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecase 使用插件 hexo-abbrlink 目前我已弃用这个方法，改为使用插件 hexo-abbrlink 首先安装插件： 然后设置 _config.yml： _config.yml12345678# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: https://www.hermitlsr.toproot: /permalink: :year-:month-:day/:abbrlink.html #permalink: :year-:month-:day-:title/abbrlink: alg: crc32 #算法： crc16(default) and crc32 rep: hex #进制： dec(default) and hex 再次弃用什么也不做 现在我已经弃用了上面的所有方法，恢复成原来的样子无所谓嘞","tags":["Hexo"],"categories":["博客折腾"]},{"path":"/about/index.html","content":"我们都是阴沟里的虫子,但总还是得有人仰望星空。INKLEE，就职于某司从事数据分析。关于闲话游戏 近期状况关于本站建站记录站点声明 阅读 《具体数学》 本站建站初衷是存放学习笔记、疑难点以及一些小技巧，目前也作为个人树洞； 更新面向自己，用自己看得懂的方式写博客； 转载部分优秀文章，防止文章丢失； 不追求曝光，甚至避免曝光。 2022.07.11更换域名，减少曝光 本站部分资源来源网络，如因传播、转载、商用等导致纠纷，与本站无关； 本站文章引用或转载会严格遵循转载协议，尊重原作者的创作成果，如发现侵权等问题，及时联系处理； 本站不开放评论，如确需联系，请通过 github 邮箱； 最终解释权归本站所有。"},{"path":"/bbtalk/index.html","content":"我们都是阴沟里的虫子,但总还是得有人仰望星空。INKLEE，就职于某司从事数据分析。关于闲话游戏"},{"path":"/donate/index.html","content":"Sponsor QQ AliPay WeChat"},{"path":"/follow/index.html","content":"关注博主 订阅文章"},{"path":"/game/index.html","content":"我们都是阴沟里的虫子,但总还是得有人仰望星空。INKLEE，就职于某司从事数据分析。关于闲话游戏 写在前面这里的游戏是出于个人喜好，放在这里供自己把玩的。基于源码修改了部分游戏的内容。如果你恰好喜欢这里的游戏，欢迎留下你的足迹。游戏来源多种多样，但尽量都注明了出处，如有侵权问题，欢迎联系删除。 抓小猫点击小圆点，围住小猫。你点击一次，小猫走一次。直到你把小猫围住（赢），或者小猫走到边界并逃跑（输）。抓小猫 抓小猫小游戏页面https://blog.inklee.top/game/catch-cat-master/改动：暂无注：原作GitHub仓库地址：https://github.com/ganlvtech/phaser-catch-the-cat 2048使用方向键控制数字块移动，含有触屏的设备可直接按方向滑动控制移动。数字移动时，相同的两个数字相遇，会相加为一块。直到数字块达到2048（赢），或者方框已被填满（输）。2048 2048小游戏页面https://blog.inklee.top/game/2048/改动：将文本改为简体中文注：原作GitHub仓库地址：https://github.com/DaoCloud/dao-2048 坦克大战（经典）建议用电脑玩：玩家1：WASD上左下右，空格键射击。玩家2：方向键上下左右，回车键射击。玩家子弹和坦克子弹可以相互抵消。玩家之间攻击不构成伤N键下一关，P键上一关。点击返回列表可回到本页。坦克大战（经典） 坦克大战（经典）小游戏页面https://blog.inklee.top/game/tk-battle-old/改动：修复了源码中玩家二子弹不起作用的问题。尝试添加玩家之间子弹起作用的效果。空闲时会打算添加关卡，目前仅21关（源码自带）。注：原作GitHub仓库地址：暂无已知最早来源：https://www.jq22.com/jquery-info6153 坦克大战（新）仅支持电脑。单人模式使用方向键控制坦克方向，空格发射弹药。双人模式下玩家1使用W，A，S，D控制方向，空格发射弹药。玩家2使用方向键控制方向，数字0键发射弹药。其余设置详情见游戏内介绍。坦克大战（新） 坦克大战（新）小游戏界面https://tanke.biz.st改动：暂无注：原作GitHub仓库地址：https://github.com/guzhou/tk 俄罗斯方块方向键↑键变换图像。方向键↓键加速下降。左右键← →移动方向。空格键快速下落。P键暂停。当没有位置可下降时失败。有彩蛋。俄罗斯方块 俄罗斯方块小游戏界面https://blog.inklee.top/game/Tetris/改动：将方块颜色彩色化(赤橙黄绿青蓝紫)。消除后依然保留彩色效果。增加了方向键控制按钮。增加了空格健按钮。待开发在方块未完全出现时的变换形状的功能。注：原作GitHub仓库地址：暂无来源：https://www.jq22.com/jquery-info16258"},{"title":"网址收藏","path":"/notes/index.html","content":"关注 谢益辉https://yihui.org廖雪峰https://www.liaoxuefeng.com/李宏毅https://speech.ee.ntu.edu.tw/~hyleezgaohttps://zgao.top阮一峰http://www.ruanyifeng.com/blog/arxivhttps://arxiv.org 技术社区 统计之都主站统计之都（Capital of Statistics，简称 COS）成立于 2006 年 5 月 19 日，是一个旨在推广与应用统计学知识的网站和社区。统计之都网站最初由谢益辉创办，现任理事会主席为冯凌秉，现由世界各地的众多志愿者共同管理维护。统计之都中文论坛统计之都（Capital of Statistics, COS）论坛是一个自由探讨统计学和数据科学的平台，欢迎对统计学、机器学习、数据分析、统计软件、可视化等领域感兴趣的朋友在此交流切磋。力扣众所周知的程序员刷题宝典kaggle一个数据建模和数据分析竞赛平台，用来跑代码是再合适不过了。吾爱破解https://www.52pojie.cn/菜鸟教程http://www.runoob.com机器之心专业的人工智能信息服务平台W3schoolhttp://www.w3school.com.cnjQuery之家自由分享jQuery、html5和css3的插件库jQuery插件库自由分享jQuery、html5和css3的插件库 电子书刊及文档 南瓜书南瓜书是对周志华老师《机器学习》(西瓜书) 中公式解析和推导细节的补充LeetCode Cookbook该书的算法全部用 Go 语言实现marx马克思系列文章收录python文档python的官方中文文档Keras文档Keras中文文档npm 文档npm 中文文档 在线工具 LaTeX公式编辑器https://www.latexlive.com/去不图床免费图床PricessOn免费在线流程图思维导图convertio免费的格式转换网站pdfcandyPDF格式转换网站tinypng一个非常友好的图片压缩网站WALLPAPER ABYSS一个非常优秀的壁纸网站thum.io快速生成网站截图颜色码转换工具https://www.sioe.cn/yingyong/yanse-rgb-16/ 国内镜像站 清华大学开源软件镜像站https://mirrors.tuna.tsinghua.edu.cn阿里云官方镜像站https://developer.aliyun.com/mirror/"},{"path":"/game/2048/index.html","content":"//禁止页面选择以及鼠标右键 document.οncοntextmenu=function(){return false;}; document.onselectstart=function(){return false;}; let h = window.innerHeight; let w = window.innerWidth; //禁用右键 document.oncontextmenu = function () { return false; }; //在本网页的任何键盘敲击事件都是无效操作 （防止F12和shift+ctrl+i调起开发者工具） window.onkeydown = window.onkeyup = window.onkeypress = function () { window.event.returnValue = false; return false; } //禁用开发者工具F12 document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; // //如果用户在工具栏调起开发者工具，那么判断浏览器的可视高度和可视宽度是否有改变，如有改变则关闭本页面 // window.onresize = function () { // if (h != window.innerHeight || w != window.innerWidth) { // window.close(); // window.location = \"about:blank\"; // } // } 2048 2048 0 0 将数字加起来达到 2048 ! 新的游戏 继续 再来一次 Created by Gabriele Cirulli. Based on 1024 by Veewo Studio and conceptually similar to Threes by Asher Vollmer. 重载游戏 | 返回列表"},{"path":"/game/Tetris/index.html","content":"//禁止页面选择以及鼠标右键 document.οncοntextmenu=function(){return false;}; document.onselectstart=function(){return false;}; let h = window.innerHeight; let w = window.innerWidth; //禁用右键 document.oncontextmenu = function () { return false; }; //在本网页的任何键盘敲击事件都是无效操作 （防止F12和shift+ctrl+i调起开发者工具） window.onkeydown = window.onkeyup = window.onkeypress = function () { window.event.returnValue = false; return false; } //禁用开发者工具F12 document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; // //如果用户在工具栏调起开发者工具，那么判断浏览器的可视高度和可视宽度是否有改变，如有改变则关闭本页面 // window.onresize = function () { // if (h != window.innerHeight || w != window.innerWidth) { // window.close(); // window.location = \"about:blank\"; // } // } 俄罗斯方块 body { /*box-sizing: border-box;*/ margin: 0; padding: 0; background: url('https://cdn.jsdelivr.net/gh/hermitlsr/CDN-for-hermitlsr.top/game/Tetris/img/bg.png') repeat; } .wrap { position: absolute; left: 50%; top: 49px; width: 385px; height: 547px; margin-left: -193px; /*box-shadow: 0px 0px 5px 5px rgba(255,125,0, 0.6);*/ } .wrap div { position: absolute; } .wrap .now { left: 0; top: 0; width: 261px; height: 547px; background-color: rgba(255, 255, 255, 0.5); box-shadow: 0px 0px 5px 5px rgba(0, 0, 0, 0.6); } .wrap .next { right: 0; top: 0; width: 105px; height: 105px; background-color: rgba(255, 255, 255, 0.5); box-shadow: 0px 0px 5px 5px rgba(0, 0, 0, 0.6); } .wrap .score, .wrap .lines, .wrap .level, .wrap .pause, .wrap .refresh { left: 280px; top: 150px; width: 99px; height: 40px; line-height: 40px; padding-left: 6px; color: #F0907A; /*font-weight: bold;*/ border: 0 none; border-radius: 5px; background-color: rgba(0, 0, 0, 0.6); } .wrap .up, .wrap .left, .wrap .down, .wrap .right, .wrap .quickdown{ left: 330px; top: 420px; width: 40px; height: 40px; line-height: 40px; /*padding-left: 6px;*/ color: #fff; /*font-weight: bold;*/ border: 0 none; border-radius: 5px; text-align: center; background-color: rgba(0, 0, 0, 0.6); text-align: center; cursor: pointer; z-index: 2; } .wrap .left { left: 280px; top: 470px; background-color: rgba(0, 0, 0, 0.6); } .wrap .down { left: 330px; top: 470px; background-color: rgba(0, 0, 0, 0.6); } .wrap .right { left: 380px; top: 470px; background-color: rgba(0, 0, 0, 0.6); } .wrap .quickdown { left: 280px; top: 520px; width: 140px; height: 30px; background-color: rgba(0, 0, 0, 0.6); } .wrap .left:hover, .wrap .down:hover, .wrap .right:hover, .wrap .up:hover { background-color: rgba(0, 0, 0, 0.8); } .wrap .lines { top: 200px; color: #4DAEDD; } .wrap .level { top: 250px; color: #FF0033; } .wrap .pause, .wrap .refresh { top: 310px; width: 105px; padding-left: 0px; color: #fff; text-align: center; cursor: pointer; z-index: 2; } .wrap .pause:hover, .wrap .refresh:hover { background-color: rgba(0, 0, 0, 0.8); } .wrap .refresh { top: 360px; } .wrap .tips { display: none; left: 0px; top: 150px; width: 261px; height: 80px; line-height: 80px; color: #fff; font-size: 42px; font-weight: bolder; text-align: center; text-shadow: 0px 0px 5px #0F0; z-index: 2; } .wrap_prompt { display: none; position: fixed; left: 0; top: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.6); z-index: 5; } .wrap_prompt .prompt { position: absolute; left: 50%; top: 220px; width: 221px; height: 137px; margin-left: -172px; border-radius: 20px; background-color: rgba(255, 255, 255, 0.8); z-index: 6; } .wrap_prompt .prompt div { width: 51px; height: 51px; line-height: 51px; margin-left: 85px; margin-top: 20px; color: #fff; font-size: 30px; text-align: center; border: 2px solid #fff; border-radius: 100%; } .wrap_prompt .prompt .failed, .wrap_prompt .prompt .restart { display: block; color: #f00; line-height: 40px; text-align: center; } .wrap_prompt .prompt .restart { width: 121px; margin-left: 50px; color: #646464; background: yellow; border-radius: 50px; cursor: pointer; } #box { position: relative; width: 385px; height: 547px; margin: 50px auto; } #box div { position: absolute; width: 25px; height: 25px; /*border: 1px solid #000;*/ transform: rotate(0); transition: 0.25s; } #box .clDiv { transition: 1s !important; transform: rotate(0deg) translateX(0px) translateY(0px); width: 12.5px !important; height: 12.5px !important; border: none !important; } Good! SCORE: 0 LINES: 0 LEVEL: 0 开始 重新开始 ↑ → ↓ ← 空格 × 游戏失败 重新开始 var oWrap = document.body.querySelector('.wrap'); var oTips = document.body.querySelector('.wrap .tips'); var oScore = document.body.querySelector('.wrap .score span'); var oLines = document.body.querySelector('.wrap .lines span'); var oLevel = document.body.querySelector('.wrap .level span'); var oBtn = document.body.querySelector('.wrap .pause'); var oReset = document.body.querySelector('.wrap .refresh'); var oPrompt = document.body.querySelector('.wrap_prompt'); var oRestart = document.body.querySelector('.wrap_prompt .restart'); var cloneDivs = document.getElementsByClassName(\"clDiv\"); var tetris = { // 父容器 box: null,//document.getElementById('box'), // 游戏状态，0未开始，1运行，2终止 status: 0, quick: false, // 游戏分数 line: 0, level: 0, score: 0, // 时间间隔、定时器 step: 500, timer: null, // 游戏面板，数组 对应 div board: null, boardDiv: null, // 当前方块 nowBlock: null, // 下一方块 nextBlock: null, // 本次选中的方块 nownum: null, // 下一次选择中的方块 nextnum: null, creatblock: null, nextcreatblock: null, notecolorbox: null, // 初始化 init: function () { this.createBox(); this.creatblock = this.createBlock(); this.nowBlock = this.creatblock.block; this.nownum = this.creatblock.num; // this.drawBlock(); this.nextcreatblock = this.createBlock(); this.nextBlock = this.nextcreatblock.block; this.nextnum = this.nextcreatblock.num; // this.drawNextBlock(); // 先显示一次 this.drawBlock(); this.drawNextBlock(); // this.begin(); }, // 自动开始 begin: function () { // 自动下行 clearInterval(this.timer); this.timer = setInterval(function () { if (tetris.status == 1) tetris.moveDown(); }, this.step); }, // 暂停、开始 pause: function () { if (tetris.status == 0) { oBtn.innerHTML = '暂停'; tetris.status = 1; tetris.begin(); return true; } oBtn.innerHTML = '继续'; tetris.status = 0; clearInterval(tetris.timer); }, // 重新开始 reStart: function () { for (var i = 0; i < 21; i++) { for (var j = 0; j < 10; j++) { tetris.board[i][j] = 0; tetris.boardDiv[i * 10 + j].style.background = ''; } } tetris.eraseNextBlock(); tetris.creatblock = tetris.createBlock(); tetris.nowBlock = tetris.creatblock.block; tetris.nownum = tetris.creatblock.num; // tetris.drawBlock(); tetris.nextcreatblock = tetris.createBlock(); tetris.nextBlock = tetris.nextcreatblock.block; tetris.nextnum = tetris.nextcreatblock.num; // tetris.drawNextBlock(); tetris.drawBlock(); tetris.drawNextBlock(); oPrompt.style.display = 'none'; oBtn.innerHTML = '暂停'; tetris.status = 1; tetris.begin(); }, // 创建容器 createBox: function () { var str = ''; // 生成父容器 this.box = document.createElement('div'); this.box.id = 'box'; // 生成10*21的游戏矩阵 this.board = new Array(21); for (var i = 0; i < 21; i++) { this.board[i] = new Array(10); for (var j = 0; j < 10; j++) { this.board[i][j] = 0; str += ''; } } // 生成4*4的提示矩阵 for (var i = 0; i < 4; i++) { for (var j = 0; j < 4; j++) { str += ''; } } this.box.innerHTML = str; document.body.appendChild(this.box); this.boardDiv = document.querySelectorAll('#box > div'); }, // 创建方块 createBlock: function () { var block = new Array(4); var num = Math.floor(Math.random() * 7); switch (num) { case 0: { block[0] = {x: -2, y: 4};//** block[1] = {x: -1, y: 4};//** block[2] = {x: -2, y: 5}; block[3] = {x: -1, y: 5}; break; } case 1: { block[0] = {x: -1, y: 3};//**** block[1] = {x: -1, y: 4}; block[2] = {x: -1, y: 5}; block[3] = {x: -1, y: 6}; break; } case 2: { block[0] = {x: -3, y: 5};// * block[1] = {x: -2, y: 4};//** block[2] = {x: -2, y: 5};//* block[3] = {x: -1, y: 4}; break; } case 3: { block[0] = {x: -3, y: 4};//* block[1] = {x: -2, y: 4};//** block[2] = {x: -2, y: 5};// * block[3] = {x: -1, y: 5}; break; } case 4: { block[0] = {x: -2, y: 4};//* block[1] = {x: -1, y: 4};//*** block[2] = {x: -1, y: 5}; block[3] = {x: -1, y: 6}; break; } case 5: { block[0] = {x: -3, y: 4};//* block[1] = {x: -2, y: 4};//* block[2] = {x: -1, y: 4};//** block[3] = {x: -1, y: 5}; break; } case 6: { block[0] = {x: -2, y: 5};// * block[1] = {x: -1, y: 4};//*** block[2] = {x: -1, y: 5}; block[3] = {x: -1, y: 6}; break; } } return {block: block, num: num}; }, // 绘制方块 drawBlock: function () { for (var i = 0; i < 4; i++) { if (this.nowBlock[i].x < 0) continue; this.board[this.nowBlock[i].x][this.nowBlock[i].y] = 1; var num = this.nownum; switch (num) { case 0: { this.boardDiv[this.nowBlock[i].x * 10 + this.nowBlock[i].y].style.background = 'red'; break; } case 1: { this.boardDiv[this.nowBlock[i].x * 10 + this.nowBlock[i].y].style.background = 'orange'; break; } case 2: { this.boardDiv[this.nowBlock[i].x * 10 + this.nowBlock[i].y].style.background = 'yellow'; break; } case 3: { this.boardDiv[this.nowBlock[i].x * 10 + this.nowBlock[i].y].style.background = 'green'; break; } case 4: { this.boardDiv[this.nowBlock[i].x * 10 + this.nowBlock[i].y].style.background = 'lightgreen'; break; } case 5: { this.boardDiv[this.nowBlock[i].x * 10 + this.nowBlock[i].y].style.background = 'blue'; break; } case 6: { this.boardDiv[this.nowBlock[i].x * 10 + this.nowBlock[i].y].style.background = 'purple'; break; } } } }, // 清除方块 eraseBlock: function () { for (var i = 0; i < 4; i++) { if (this.nowBlock[i].x < 0) continue; this.board[this.nowBlock[i].x][this.nowBlock[i].y] = 0; this.boardDiv[this.nowBlock[i].x * 10 + this.nowBlock[i].y].style.background = ''; } }, // 绘制预览方块 drawNextBlock: function () { var nextBlock = this.nextBlock; // 位置修正，取得x坐标、y坐标中最小值，所有x加最小，所有y减最小值，即向左上位置移动到0 var x = 10, y = 10; for (var i = 0; i < 4; i++) { if (nextBlock[i].x < x) { x = nextBlock[i].x; } if (nextBlock[i].y < y) { y = nextBlock[i].y; } } var num = this.nextnum; switch (num) { case 0: { for (var i = 0; i < 4; i++) { this.boardDiv[210 + (nextBlock[i].x - x) * 4 + nextBlock[i].y - y].style.background = 'red'; } break; } case 1: { for (var i = 0; i < 4; i++) { this.boardDiv[210 + (nextBlock[i].x - x) * 4 + nextBlock[i].y - y].style.background = 'orange'; } break; } case 2: { for (var i = 0; i < 4; i++) { this.boardDiv[210 + (nextBlock[i].x - x) * 4 + nextBlock[i].y - y].style.background = 'yellow'; } break; } case 3: { for (var i = 0; i < 4; i++) { this.boardDiv[210 + (nextBlock[i].x - x) * 4 + nextBlock[i].y - y].style.background = 'green'; } break; } case 4: { for (var i = 0; i < 4; i++) { this.boardDiv[210 + (nextBlock[i].x - x) * 4 + nextBlock[i].y - y].style.background = 'lightgreen'; } break; } case 5: { for (var i = 0; i < 4; i++) { this.boardDiv[210 + (nextBlock[i].x - x) * 4 + nextBlock[i].y - y].style.background = 'blue'; } break; } case 6: { for (var i = 0; i < 4; i++) { this.boardDiv[210 + (nextBlock[i].x - x) * 4 + nextBlock[i].y - y].style.background = 'purple'; } break; } } }, // 清除预览方块 eraseNextBlock: function () { for (var i = 0; i < 16; i++) { this.boardDiv[210 + i].style.background = ''; } }, //记录当前所有 // calulateColor: function(Elem){ // var elem = document.getElementById(Elem); // var theCssprop = window.getComputedStyle(elem, null).getPropertyValue(\"background-color\"); // return theCssprop; // }, notenowBox: function (Index) { var Index = Index; var colorbox = new Array(210); var cnt = 0; for (var i = 0; i < this.board.length; i++) { for (var j = 0; j < this.board[i].length; j++) { // 问题在于如何提取色块的颜色 if (i==0) { colorbox[cnt] = \" \"; } else if (i"},{"path":"/game/catch-cat-master/index.html","content":"//禁止页面选择以及鼠标右键 document.οncοntextmenu=function(){return false;}; document.onselectstart=function(){return false;}; let h = window.innerHeight; let w = window.innerWidth; //禁用右键 document.oncontextmenu = function () { return false; }; //在本网页的任何键盘敲击事件都是无效操作 （防止F12和shift+ctrl+i调起开发者工具） window.onkeydown = window.onkeyup = window.onkeypress = function () { window.event.returnValue = false; return false; } //禁用开发者工具F12 document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; // //如果用户在工具栏调起开发者工具，那么判断浏览器的可视高度和可视宽度是否有改变，如有改变则关闭本页面 // window.onresize = function () { // if (h != window.innerHeight || w != window.innerWidth) { // window.close(); // window.location = \"about:blank\"; // } // } Catch The Cat * { padding: 0; margin: 0 } body { background-color: #eeeeee; } #catch-the-cat { width: 100%; margin-top: 32px; text-align: center; } window.game = new CatchTheCatGame({ w: 11, h: 11, r: 20, backgroundColor: 0xffffff, parent: 'catch-the-cat', statusBarAlign: 'center', credit: '抓小猫' });"},{"path":"/game/tk-battle-old/index.html","content":"//禁止页面选择以及鼠标右键 document.οncοntextmenu=function(){return false;}; document.onselectstart=function(){return false;}; let h = window.innerHeight; let w = window.innerWidth; //禁用右键 document.oncontextmenu = function () { return false; }; //在本网页的任何键盘敲击事件都是无效操作 （防止F12和shift+ctrl+i调起开发者工具） window.onkeydown = window.onkeyup = window.onkeypress = function () { window.event.returnValue = false; return false; } //禁用开发者工具F12 document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; // //如果用户在工具栏调起开发者工具，那么判断浏览器的可视高度和可视宽度是否有改变，如有改变则关闭本页面 // window.onresize = function () { // if (h != window.innerHeight || w != window.innerWidth) { // window.close(); // window.location = \"about:blank\"; // } // } 坦克大战 #canvasDiv canvas{ position:absolute; left: 572px; top: 187px; width: 878px; height: 672px; } body { background-color: #000000; } body,td,th { color: #FFFFFF; } &nbsp; &nbsp; 返回列表"},{"title":"胡吃海喝","path":"/notes/cookbook/index.html","content":"1.卤肉食材：五花肉，熟鸡蛋，干葱，蒜片，洋葱，大料，香菇调味: 生抽，老抽，沙爹酱，胡椒粉，玫瑰露酒做法：花肉切条，留几块大的改刀做“霸王桩”，使口感更丰富。部分干葱、蒜片、洋葱和大葱下油锅，大葱缓放，防止炸干，炸至金黄色，捞出备用。大料瓣炸香，下“霸王桩”生煸，再推入五花肉和剩余的葱。葱煸成金黄色，下入攥干水分的香菇，顺锅边烹入生抽，出香气，加入沙爹酱，炒匀。加水，加老抽，再考虑是否加水，加胡椒粉，少许玫瑰露酒增香，加入之前炸好的葱，转至砂锅顿制。开锅时用老抽调颜色，炖二十多分钟时加入熟鸡蛋，炖半小时，闷十分钟即可出锅。来源：老饭骨 2. 藤椒鱼食材：鳜鱼、乌鱼或者草鱼 甚至白莲？？，葱，姜，酸(泡)菜，淀粉调味：盐，料酒，藤椒油做法：鱼骨肉分离，去掉鱼皮，鱼肉片成片。用姜，葱，料酒，少许盐将鱼肉码味半小时。锅内少许油，加入姜，葱，酸(泡)菜炒香之后加入高汤，微煮五分钟左右，姜葱酸菜打去不用。先放入鱼头，鱼骨煮五分钟左右，盛出放入盘中。再下入码好的鱼肉，下锅前裹少许干淀粉，中小火慢煮，刚好断生，鱼肉微卷起锅。将藤椒放入盘中，油温七成热淋在藤椒上。来源：大师的菜 3. 酸辣手撕鸡食材：鸡边腿，花生米，黄瓜丝等，葱，姜，白芝麻，蒜末，小米椒，葱花，粗辣椒面，细辣椒面调味：料酒，生抽，陈醋，蚝油，糖，五香粉做法：鸡腿加入葱姜料酒去腥，水开撇去浮沫，煮熟后捞出过凉水，撕成条状。酱汁：粗辣椒面、细辣椒面、蒜末、白芝麻、小米椒、葱花 各1勺，泼热油，搅拌均匀；再加入生抽3勺、陈醋3勺、蚝油1勺、糖半勺、五香粉适量、孜然粉小半勺、鸡汤5勺，搅拌均匀。按个人喜好在手撕鸡中加入配菜，花生米，黄瓜丝等。淋入2.中调好的酱汁拌匀即可。来源：添饭小哥哥 4. 番茄土豆鸡肉食材：鸡腿，番茄，土豆，蒜，小葱，小米椒，淀粉。调味：料酒，生抽，蚝油，盐，糖做法：蒜切沫，小米椒切圈，番茄切丁备用。鸡腿剔骨切小块，加料酒两勺、生抽、淀粉各一勺，盐适量抓拌均匀，腌制二十分钟以上备用。土豆切块下水煮熟捞出，稍微捣碎一点。趁热水下入腌制好的鸡肉，断生捞出。热锅冷油，下入蒜沫，小米椒炒香，下入番茄炒出茄汁，随后加入土豆泥，鸡肉炒匀，再加入生抽三勺、蚝油一勺、老抽半勺、盐适量，炒匀后加盖小火炖煮10分钟即可。来源：添饭小哥哥 5. 多层烙饼食材：低筋面粉 ，，油。调味：盐做法：将 320克 水多次少量加入 500克 低筋面粉中，揉到相对光滑，再加入 20克 油，揉匀。醒面三十分钟。将醒好的面揉搓几下，分成大小合适的面剂子。取一个剂子，用擀面杖擀成薄面饼，均匀刷油、撒少量干面粉，撒盐。将上下两边向中间折，在将左右两边向中间折，注意一定要封好口。用擀面杖将折好面饼擀薄，尽量薄，注意不要擀破。如果要增加层数可重复 2.提前将平底锅热好，无需刷油。将擀好面饼放入平底锅中，一开始大火，盖盖，待面饼鼓起后，刷油翻面，盖盖转中小火。大概五分钟可出锅。吃得时候可以夹鸡蛋，土豆丝，肉末等等。来源：添饭小哥哥"},{"title":"git","path":"/notes/git/index.html","content":"git 报错解决 push 或 clone 失败 原因：一般是网络不稳定 报错：OpenSSL SSL_read: Connection was reset, errno 10054 报错：git config http.sslVerify “false” fatal: not in a git directory 若还是有问题 增大文件内存： 一台电脑设置多个 github 账号 生成对应账号的 SSH 12ssh-keygen -t rsa -f ~/.ssh/id_rsa -C &quot;mainmail@.com&quot;ssh-keygen -t rsa -f ~/.ssh/id_rsa_blog -C &quot;blogmail@.com&quot; -f 选项指定生成密钥对的文件名。 部署相应的 SSH 公钥到 GitHub。 SSH 配置 编辑 ~/.ssh/config SHH 配置文件，没有该文件则新建。 1234567891011# mainmail@.comHost github-main.comHostName github.comUser gitIdentityFile ~/.ssh/id_rsa# blogmail@.comHost github-blog.comHostName github.comUser gitIdentityFile ~/.ssh/id_rsa_blog 注意，以后使用 main 账户添加远程仓库需要这样添加： 1git remote add origin git@github-main.com:username/demo.git 类似，使用 blog 账户时： 1git remote add origin git@github-blog.com:username/demo.git 如需添加第三个账号，可以用相同的方式进行。 当运行一个git push时，就可以在 ~/.ssh/ 下看到文件 know_hosts 了，这里存放着ssh-add的账号 补充，如果之前设置过全局账号，需要先清除 1rm ~/.gitconfig"},{"title":"latex 百科全书","path":"/notes/latex-encyclopaedia/index.html","content":"写在前面该文档原为一份 .docx 文档，为博主在大学期间在某个已不可考的群里获得，修订了一些写法，为防止文件丢失，同时便于自己查阅，放在这里。注：部分公式语法过长，为便于展示，在公式内添加了 &lt;br&gt;。部分公式在 mathjax 中无法编译采用图片。 函数、符号及特殊字符 声调 语法 效果 语法 效果 语法 效果 \\bar{x} xˉ\\bar{x}xˉ \\acute{\\eta} ηˊ\\acute{\\eta}ηˊ​ \\check{\\alpha} αˇ\\check{\\alpha}αˇ \\grave{\\eta} ηˋ\\grave{\\eta}ηˋ​ \\breve{a} a˘\\breve{a}a˘ \\ddot{y} y¨\\ddot{y}y¨​ \\dot{x} x˙\\dot{x}x˙ \\hat{\\alpha} α^\\hat{\\alpha}α^ \\tilde{\\iota} ι~\\tilde{\\iota}ι~ 函数 语法 效果 语法 效果 语法 效果 \\sin\\theta sin⁡θ\\sin\\thetasinθ \\cos\\theta cos⁡θ\\cos\\thetacosθ \\tan\\theat tan⁡θ\\tan\\thetatanθ \\arcsin\\frac{a}{b} arcsin⁡ab\\arcsin\\frac{a}{b}arcsinba​ \\arccos\\frac{a}{b} arccos⁡ab\\arccos\\frac{a}{b}arccosba​ \\arctan\\frac{a}{b} arctan⁡ab\\arctan\\frac{a}{b}arctanba​ \\sinh g sinh⁡g\\sinh gsinhg \\cosh h cosh⁡h\\cosh hcoshh \\tanh i tanh⁡i\\tanh itanhi \\operatorname{sh}j sh⁡j\\operatorname{sh}jshj \\operatorname{argsh}k argsh⁡k\\operatorname{argsh}kargshk \\operatorname{ch}h ch⁡h\\operatorname{ch}hchh \\operatorname{argch} argch⁡l\\operatorname{argch}largchl \\operatorname{th}i th⁡i\\operatorname{th}ithi \\operatorname{argth}m argth⁡m\\operatorname{argth}margthm \\max H max⁡H\\max HmaxH \\min L min⁡L\\min LminL \\inf s inf⁡s\\inf sinfs \\sup t sup⁡t\\sup tsupt \\exp\\!t exp⁡ ⁣t\\exp \\!texpt \\ln X ln⁡X\\ln XlnX \\lg X lg⁡X\\lg XlgX \\log X log⁡X\\log XlogX \\log_{\\alpha }^\\beta X log⁡αβX\\log_{\\alpha }^\\beta Xlogαβ​X \\ker x ker⁡x\\ker xkerx \\deg x deg⁡x\\deg xdegx \\gcd(T,U,V,W,X) gcd⁡(T,U,V,W,X)\\gcd(T,U,V,W,X)gcd(T,U,V,W,X) \\Pr x Pr⁡x\\Pr xPrx \\det x det⁡x\\det xdetx \\hom x hom⁡x\\hom xhomx \\arg x arg⁡x\\arg xargx \\dim x dim⁡x\\dim xdimx $\\lim\\limits_{t\\to n}T lim⁡t→nT\\lim\\limits_{t\\to n}Tt→nlim​T f’(x)=\\lim\\limits_{\\Delta x\\to0}\\frac{f(x)-f(x-\\Delta x)}{\\Delta x} f′(x)=lim⁡Δx→0f(x)−f(x−Δx)Δxf&#x27;(x)=\\lim\\limits_{\\Delta x\\to0}\\frac{f(x)-f(x-\\Delta x)}{\\Delta x}f′(x)=Δx→0lim​Δxf(x)−f(x−Δx)​ \\limsup S lim sup⁡S\\limsup SlimsupS \\liminf S lim inf⁡S\\liminf SliminfS 同余 语法 效果 语法 效果 \\pmod{m} (modm)\\pmod{m}(modm) a \\bmod b a mod ba \\bmod bamodb 微分 语法 效果 语法 效果 语法 效果 abla ∇ abla∇ \\partial x ∂x\\partial x∂x \\mathrm{d}x dx\\mathrm{d}xdx \\dot x x˙\\dot xx˙ \\ddot y y¨\\ddot yy¨​ 集合 语法 效果 语法 效果 语法 效果 语法 效果 语法 效果 \\forall ∀\\forall∀ \\exists ∃\\exists∃ \\empty ∅\\empty∅ \\emptyset ∅\\emptyset∅ \\varnothing ∅\\varnothing∅ \\in ∈\\in∈ i ∋ i∋ ot\\in ∉ ot\\in∈ otin ∉ otin∈/ \\subset ⊂\\subset⊂ \\subseteq ⊆\\subseteq⊆ \\supset ⊃\\supset⊃ \\supseteq ⊇\\supseteq⊇ \\cap ∩\\cap∩ \\bigcap ⋂\\bigcap⋂ \\cup ∪\\cup∪ \\bigcup ⋃\\bigcup⋃ \\biguplus ⨄\\biguplus⨄ \\sqsubset ⊏\\sqsubset⊏ \\sqsubseteq ⊑\\sqsubseteq⊑ \\sqsupset ⊐\\sqsupset⊐ \\sqsupseteq ⊒\\sqsupseteq⊒ \\sqcap ⊓\\sqcap⊓ \\sqcup ⊔\\sqcup⊔ \\bigsqcup ⨆\\bigsqcup⨆ 逻辑 语法 效果 语法 效果 语法 效果 语法 效果 p ppp \\land ∧\\land∧ \\wedge ∧\\wedge∧ \\bigwedge ⋀\\bigwedge⋀ \\bar{q}\\to p qˉ→p\\bar{q}\\to pqˉ​→p \\lor ∨\\lor∨ \\vee ∨\\vee∨ \\bigvee ⋁\\bigvee⋁ \\lnot ¬\\lnot¬ eg q ¬q eg q¬q \\setminus ∖\\setminus∖ \\smallsetminus ∖\\smallsetminus∖​ 根号 语法 效果 语法 效果 \\sqrt{3} 3\\sqrt{3}3​ \\sqrt[n]{3} 3n\\sqrt[n]{3}n3​ 关系符号 语法 效果 \\Delta ABC\\sim\\Delta XYZ ΔABC∼ΔXYZ\\Delta ABC\\sim\\Delta XYZΔABC∼ΔXYZ \\sqrt{3}\\approx1.732050808\\ldots 3≈1.732050808…\\sqrt{3}\\approx1.732050808\\ldots3​≈1.732050808… \\simeq ≃\\simeq≃ \\cong ≅\\cong≅ \\dot= =˙\\dot==˙ \\ggg ⋙\\ggg⋙ \\gg ≫\\gg≫ &gt; &gt;&gt;&gt; \\ge ≥\\ge≥ \\geqq ≧\\geqq≧ = === \\leq ≤\\leq≤ \\leqq ≦\\leqq≦ &lt; &lt;&lt;&lt; \\ll ≪\\ll≪ \\lll ⋘\\lll⋘ \\gtrless ≷\\gtrless≷ \\lessgtr ≶\\lessgtr≶ x ot\\equiv N x≢Nx ot\\equiv Nx≡N x e A x≠Ax e Ax=A x eq C x≠Cx eq Cx=C t\\propto v t∝vt\\propto vt∝v \\pm ±\\pm± \\mp ∓\\mp∓ (x-y)^2 \\equiv (-x+y)^2 \\equiv x^2 - 2xy + y^2 (x−y)2≡(−x+y)2≡x2−2xy+y2(x-y)^2\\equiv(-x+y)^2\\equiv x^2-2xy+y^2(x−y)2≡(−x+y)2≡x2−2xy+y2 几何符号 特征 语法 效果 菱形 \\Diamond ◊\\Diamond◊ 正方形 \\Box □\\Box□​ Delta \\Delta Δ\\DeltaΔ 三角形 \\triangle △\\triangle△ 角名 \\angle\\Alpha\\Beta\\Gamma ∠ABΓ\\angle\\Alpha\\Beta\\Gamma∠ABΓ 角度 \\sin!\\frac{\\pi}\\sin\\frac{\\pi}{3}=\\sin60^\\omicron=\\frac{\\sqrt{3}}{2 sin⁡π3=sin⁡60ο=32\\sin\\frac{\\pi}{3}=\\sin60^\\omicron=\\frac{\\sqrt{3}}{2}sin3π​=sin60ο=23​​ 垂直 \\perp ⊥\\perp⊥ 箭头符号 语法 效果 语法 效果 语法 效果 \\leftarrow ←\\leftarrow← \\gets ←\\gets← \\rightarrow →\\rightarrow→ \\to →\\to→ \\leftrightarrow ↔\\leftrightarrow↔ \\longleftarrow ⟵\\longleftarrow⟵ \\longrightarrow ⟶\\longrightarrow⟶ \\mapsto ↦\\mapsto↦ \\longmapsto ⟼\\longmapsto⟼ \\hookrightarrow ↪\\hookrightarrow↪ \\hookleftarrow ↩\\hookleftarrow↩ earrow ↗ earrow↗ \\searrow ↘\\searrow↘ \\swarrow ↙\\swarrow↙ warrow ↖ warrow↖ \\uparrow ↑\\uparrow↑ \\downarrow ↓\\downarrow↓ \\updownarrow ↕\\updownarrow↕ \\rightharpoonup ⇀\\rightharpoonup⇀ \\rightharpoondown ⇁\\rightharpoondown⇁ \\leftharpoonup ↼\\leftharpoonup↼ \\upharpoonleft ↿\\upharpoonleft↿ \\upharpoonright ↾\\upharpoonright↾ \\downharpoonleft ⇃\\downharpoonleft⇃ 语法 效果 语法 效果 语法 效果 \\Leftarrow ⇐\\Leftarrow⇐ \\Rightarrow ⇒\\Rightarrow⇒ \\Leftrightarrow ⇔\\Leftrightarrow⇔​ \\Longleftarrow ⟸\\Longleftarrow⟸ \\Longrightarrow ⟹\\Longrightarrow⟹ \\Longleftrightarrow (or \\iff) ⟺\\Longleftrightarrow⟺ \\Uparrow ⇑\\Uparrow⇑ \\Downarrow ⇓\\Downarrow⇓ \\Updownarrow ⇕\\Updownarrow⇕ 特殊符号 语法 效果 语法 效果 语法 效果 语法 效果 语法 效果 语法 效果 \\eth ð\\ethð \\S \\S \\P \\P % $% $ \\dagger †\\dagger† \\ddagger ‡\\ddagger‡ \\star ⋆\\star⋆ * ∗*∗ \\ldots …\\ldots… \\smile ⌣\\smile⌣ \\frown ⌢\\frown⌢ \\wr ≀\\wr≀ 语法 效果 语法 效果 语法 效果 \\oplus ⊕\\oplus⊕ \\bigoplus ⨁\\bigoplus⨁ \\otimes ⊗\\otimes⊗ \\bigotimes ⨂\\bigotimes⨂ \\times ×\\times× \\cdot ⋅\\cdot⋅ \\div ÷\\div÷ \\circ ∘\\circ∘ \\bullet ∙\\bullet∙ \\bigodot ⨀\\bigodot⨀ \\boxtimes ⊠\\boxtimes⊠ \\boxplus ⊞\\boxplus⊞ 语法 效果 语法 效果 语法 效果 语法 效果 \\triangleleft ◃\\triangleleft◃ \\triangleright ▹\\triangleright▹ \\infty ∞\\infty∞ \\bot ⊥\\bot⊥ \\top ⊤\\top⊤ \\vdash ⊢\\vdash⊢ \\vDash ⊨\\vDash⊨ \\Vdash ⊩\\Vdash⊩ \\models ⊨\\models⊨ \\lVert ∥\\lVert∥ \\rVert ∥\\rVert∥ 语法 效果 语法 效果 语法 效果 \\imath ı\\imath \\hbar ℏ\\hbarℏ \\ell ℓ\\ellℓ \\mho ℧\\mho℧ \\Finv Ⅎ\\FinvℲ \\Re ℜ\\Reℜ \\Im ℑ\\Imℑ \\wp ℘\\wp℘ \\complement ∁\\complement∁ 语法 效果 语法 效果 语法 效果 语法 效果 \\diamondsuit ♢\\diamondsuit♢ \\heartsuit ♡\\heartsuit♡ \\clubsuit ♣\\clubsuit♣ \\spadesuit ♠\\spadesuit♠ \\Game ⅁\\Game⅁ \\flat ♭\\flat♭ atural ♮ atural♮ \\sharp ♯\\sharp♯ 上下标及积分 功能 语法 效果 上标 a^2 a2a^2a2 下标 a_2 a2a_2a2​ 组合 a^{2+2} a2+2a^{2+2}a2+2 a_{i,j} ai,ja_{i,j}ai,j​ 结合上下标 x_2^3 x23x_2^3x23​ 前置上下标 {} _1^2 ! X_3^4 12 ⁣X34{}_1^2\\!X_3^412​X34​ 导数 x’ x′x&#x27;x′ x^\\prime x′x^\\primex′ 导数点 \\dot{x} x˙\\dot{x}x˙ \\ddot{y} y¨\\ddot{y}y¨​ 向量 \\vec{c} c⃗\\vec{c}c \\overleftarrow{a b} ab←\\overleftarrow{a b}ab \\overrightarrow{c d} cd→\\overrightarrow{c d}cd \\widehat{e f g} efg^\\widehat{e f g}efg​ 上弧 \\stackrel\\frown{AB} （or \\overset\\frown{AB}） AB⌢\\stackrel\\frown{AB}AB⌢ 上划线 \\overline{h i j} hij‾\\overline{h i j}hij​ 下划线 \\underline{k l m} klm‾\\underline{k l m}klm​ 上括号 \\overbrace{1+2+\\cdots+100} 1+2+⋯+100⏞\\overbrace{1+2+\\cdots+100}1+2+⋯+100​ \\begin{matrix} 5050 \\\\overbrace{ 1+2+\\cdots+100 }\\end{matrix} 50501+2+⋯+100⏞\\begin{matrix} 5050 \\\\ \\overbrace{ 1+2+\\cdots+100 }\\end{matrix}50501+2+⋯+100​​ 下括号 \\underbrace{a+b+\\cdots+z} a+b+⋯+z⏟\\underbrace{a+b+\\cdots+z}a+b+⋯+z​ \\begin{matrix} \\underbrace{ a+b+\\cdots+z } \\ 26\\end{matrix} a+b+⋯+z⏟26\\begin{matrix} \\underbrace{ a+b+\\cdots+z } \\\\ 26\\end{matrix}a+b+⋯+z​26​ 求和 \\sum_{k=1}^N k^2 ∑k=1Nk2\\sum_{k=1}^N k^2∑k=1N​k2 \\begin{matrix} \\sum_{k=1}^N k^2 \\end{matrix} ∑k=1Nk2\\begin{matrix} \\sum_{k=1}^N k^2 \\end{matrix}∑k=1N​k2​ 求积 \\prod_{i=1}^N x_i ∏i=1Nxi\\prod_{i=1}^N x_i∏i=1N​xi​ \\begin{matrix} \\prod_{i=1}^N x_i \\end{matrix} ∏i=1Nxi\\begin{matrix} \\prod_{i=1}^N x_i \\end{matrix}∏i=1N​xi​​ 上积 \\coprod_{i=1}^N x_i ∐i=1Nxi\\coprod_{i=1}^N x_i∐i=1N​xi​ \\begin{matrix} \\coprod_{i=1}^N x_i\\end{matrix} ∐i=1Nxi\\begin{matrix} \\coprod_{i=1}^N x_i\\end{matrix}∐i=1N​xi​​ 极限 \\lim_{n \\to \\infty}x_n lim⁡n→∞xn\\lim_{n \\to \\infty}x_nlimn→∞​xn​ \\begin{matrix} \\lim_{n \\to \\infty}x_n\\end{matrix} lim⁡n→∞xn\\begin{matrix} \\lim_{n \\to \\infty}x_n\\end{matrix}limn→∞​xn​​ 积分 \\int_{-N}^{N} e^x, dx ∫−NNex dx\\int_{-N}^{N} e^x\\, dx∫−NN​exdx \\int\\limits_{-N}^{N} e^x, dx ∫−NNex dx\\int\\limits_{-N}^{N} e^x\\, dx−N∫N​exdx \\begin{matrix} \\int_{-N}^{N} e^x, dx\\end{matrix} ∫−NNex dx\\begin{matrix} \\int_{-N}^{N} e^x\\, dx\\end{matrix}∫−NN​exdx​ 双重积分 \\iint_{D}^{W} , dx,dy ∬DW dx dy\\iint_{D}^{W} \\, dx\\,dy∬DW​dxdy \\iint\\limits_{D}^{W} , dx,dy ∬DW dx dy\\iint\\limits_{D}^{W} \\, dx\\,dyD∬W​dxdy 三重积分 \\iiint_{E}^{V} , dx,dy,dz ∭EV dx dy dz\\iiint_{E}^{V} \\, dx\\,dy\\,dz∭EV​dxdydz \\iiint\\limits_{E}^{V} , dx,dy,dz ∭EV dx dy dz\\iiint\\limits_{E}^{V} \\, dx\\,dy\\,dzE∭V​dxdydz 四重积分 \\iiiint_{F}^{U} , dx,dy,dz,dt \\iiiint_{F}^{U} \\, dx\\,dy\\,dz\\,dt 闭合的曲线、曲面积分 \\oint_{C} x^3, dx + 4y^2, dy ∮Cx3 dx+4y2 dy\\oint_{C} x^3\\, dx + 4y^2\\, dy∮C​x3dx+4y2dy 交集 \\bigcap_1^{n} p ⋂1np\\bigcap_1^{n} p⋂1n​p 并集 \\bigcup_1^{k} p ⋃1kp\\bigcup_1^{k} p⋃1k​p 分数、矩阵和多行列式 功能 语法 效果 分数 \\frac{2}{4}=0.5 24=0.5\\frac{2}{4}=0.542​=0.5 小型分数 \\tfrac{2}{4}=0.5 24=0.5\\tfrac{2}{4}=0.542​=0.5 大型分数(嵌套) \\cfrac{2}{c+\\cfrac{2}{d+\\cfrac{2}{4}}}=a 2c+2d+24=a\\cfrac{2}{c+\\cfrac{2}{d+\\cfrac{2}{4}}}=ac+d+42​2​2​=a​ 大型分数(不嵌套) \\dfrac{2}{4}=0.5 \\qquad\\dfrac{2}{c + \\dfrac{2}{d+\\dfrac{2}{4}}} = a 24=0.52c+2d+24=a\\dfrac{2}{4}=0.5 \\qquad\\dfrac{2}{c + \\dfrac{2}{d+\\dfrac{2}{4}}} = a42​=0.5c+d+42​2​2​=a 二项式系数 \\binom{n}{r}=\\binom{n}{n-m}=C^n_r=C^n_{n-r} (nr)=(nn−m)=Crn=Cn−rn\\binom{n}{r}=\\binom{n}{n-m}=C^n_r=C^n_{n-r}(rn​)=(n−mn​)=Crn​=Cn−rn​ 小型二项式系数 \\tbinom{n}{r}=\\tbinom{n}{n-m}=C^n_r=C^n_{n-r} (nr)=(nn−m)=Crn=Cn−rn\\tbinom{n}{r}=\\tbinom{n}{n-m}=C^n_r=C^n_{n-r}(rn​)=(n−mn​)=Crn​=Cn−rn​ 大型二项式系数 \\binom{n}{r}=\\dbinom{n}{n-r}=C^n_r=C^n_{n-r} (nr)=(nn−r)=Crn=Cn−rn\\dbinom{n}{r}=\\dbinom{n}{n-r}=C^n_r=C^n_{n-r}(rn​)=(n−rn​)=Crn​=Cn−rn​ 矩阵 \\begin{matrix} x&amp;y \\\\ z&amp;v \\end{matrix} xyzv\\begin{matrix} x&amp;y \\\\ z&amp;v \\end{matrix}xz​yv​ \\begin{vmatrix} x&amp;y \\\\ z&amp;v \\end{vmatrix} ∣xyzv∣\\begin{vmatrix} x&amp;y \\\\ z&amp;v \\end{vmatrix}∣∣∣∣∣​xz​yv​∣∣∣∣∣​ \\begin{Vmatrix} x&amp;y \\\\ z&amp;v \\end{Vmatrix} ∥xyzv∥\\begin{Vmatrix} x&amp;y \\\\ z&amp;v \\end{Vmatrix}∥∥∥∥∥​xz​yv​∥∥∥∥∥​ \\begin{bmatrix} 0&amp;\\cdots&amp;0 \\\\ \\vdots&amp;\\ddots&amp;\\vdots \\\\ 0&amp;\\cdots&amp;0 \\end{bmatrix} [0⋯0⋮⋱⋮0⋯0]\\begin{bmatrix} 0&amp;\\cdots&amp;0 \\\\ \\vdots&amp;\\ddots&amp;\\vdots\\\\ 0&amp;\\cdots&amp;0 \\end{bmatrix}⎣⎢⎢⎡​0⋮0​⋯⋱⋯​0⋮0​⎦⎥⎥⎤​ \\begin{Bmatrix} x&amp;y \\\\ z&amp;v \\end{Bmatrix} {xyzv}\\begin{Bmatrix} x&amp;y \\\\ z&amp;v \\end{Bmatrix}{xz​yv​} \\begin{pmatrix} x&amp;y \\\\ z&amp;v \\end{pmatrix} (xyzv)\\begin{pmatrix} x&amp;y \\\\ z&amp;v \\end{pmatrix}(xz​yv​) \\bigl(\\begin{smallmatrix} a&amp;b \\\\ c&amp;d \\end{smallmatrix}\\bigr) (abcd)\\bigl(\\begin{smallmatrix}a&amp;b \\\\ c&amp;d \\end{smallmatrix}\\bigr)(ac​bd​) 条件定义 f(n)=\\begin{cases}n/2,&amp;\\mbox{if } n \\mbox{ is even}\\\\ 3n+1,&amp;\\mbox{if } n \\mbox{ is odd}\\end{cases} f(n)=\\begin{cases}n/2,&amp;\\mbox{if } n \\mbox{ is even}\\\\ 3n+1,&amp;\\mbox{if } n \\mbox{ is odd}\\end{cases} 多行等式 \\begin{align}f(x)&amp;=(m+n)^2\\&lt;br/&gt;&amp;=m^2+2mn+n^2\\\\ \\end{align} \\begin{align}f(x)&amp;=(m+n)^2\\\\&amp;=m^2+2mn+n^2\\\\ \\end{align} \\begin{alignat}{2}f(x)&amp;=(m-n)^2\\\\ f(x)&amp;=(-m+n)^2\\\\ &amp;=m^2-2mn+n^2\\\\ \\end{alignat} $ \\begin{alignat}{2}f(x)&amp;=(m-n)^2\\ f(x)&amp;=(-m+n)^2\\ &amp;=m2-2mn+n2\\ \\end{alignat}$ 多行等式(右对齐) \\begin{array}{lcr}z &amp;=&amp; a\\\\ f(x,y,z)&amp;=&amp;x+y+z\\end{array} z=af(x,y,z)=x+y+z\\begin{array}{lcr}z &amp;=&amp; a\\\\f(x,y,z)&amp;=&amp;x+y+z\\end{array}zf(x,y,z)​==​ax+y+z​ 方程组 \\begin{cases}3x + 5y + z \\\\ 7x - 2y + 4z \\\\ -6x + 3y + 2z\\end{cases} {3x+5y+z7x−2y+4z−6x+3y+2z\\begin{cases}3x + 5y + z \\\\7x - 2y + 4z \\\\-6x + 3y + 2z\\end{cases}⎩⎪⎪⎨⎪⎪⎧​3x+5y+z7x−2y+4z−6x+3y+2z​ 数组 \\begin{array}{||c|c|}a&amp;b&amp;c\\\\ \\hline 0&amp;0&amp;1 \\\\ 0&amp;1&amp;1\\\\ 1&amp;0&amp;1\\\\ \\end{array} $\\begin{array}{ 字体 希腊字母 黑板粗体 正粗体 斜体数字 罗马体 哥特体 手写体 希伯来字母 括号 空格 颜色 小型数学公式 强制使用PNG"},{"title":"markdown","path":"/notes/markdown-notes/index.html","content":"表格内换行 1&lt;br&gt;"},{"title":"npm","path":"/notes/npm-notes/index.html","content":"基本使用 镜像源 环境变量 在 官网 下载安装包一路默认下载。 用户变量，path 中： 系统变量，path 中："},{"title":"python","path":"/notes/python-notes/index.html","content":"python 工具类 python下载镜像源 12345678## 清华源pip install *** -i &quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot; --trusted-host pypi.tuna.tsinghua.edu.cn ## 豆瓣源pip install *** -i &quot;http://pypi.doubanio.com/simple/&quot; --trusted-host pypi.doubanio.com ## 同济源pip install -i &quot;https://pypi.mirrors.ustc.edu.cn/simple&quot; --trusted-host pypi.mirrors.ustc.edu.cn python 更新pip 1python -m pip install --upgrade pip python 批量更新包（pip-review） 参考：https://www.cnblogs.com/pythonista/p/12944444.html 12pip-reviewpip-review -- auto python installer（.py文件打包） 参考：http://c.biancheng.net/view/2690.html 1pyinstaller -F app.py 对于音乐文件需使用.wav格式 对于资源打包，可参考：https://blog.csdn.net/COLDRAIN_END/article/details/104385472 该方法可以把 音频，视频，图片，文本，压缩包，配置文件，脚本 等各种文件打包进exe中。 该方法思路是将文件转化为Base64 数据，运行时会自动解压到当前目录，如果程序需要调用这些文件时，就可以调用使用。 转为Base64可使用如下在线工具 https://www.giftofspeed.com/base64-encoder/ 另，在使用此方法时注意Base64数据的变量类型必须为字符串，且只能放在一行。在pycharm中可能会因为复制字符串的大小有限制而不能成功，可以通过.txt实现 读取文件的代码示例： 123456789101112131415161718192021import osimport base64import DataFile # 导入自建模块 &quot;DataFile.py&quot;def write_file(data, route): get_file = base64.b64decode(data) # 将base64数据进行解析 with open(route, &#x27;wb&#x27;) as f_Obj: # 输出文件到指定位置 f_Obj.write(get_file)#-----调用函数，传入对应的 base64数据 和 输出文件的位置，生成依赖的资源文件-----#write_file(DataFile.picture, &quot;./测试图片.jpg&quot;)#-----程序运行区域-----#print(&quot;Hello world !&quot;)input() # 暂停#-----运行结束后删除目录下的依赖文件-----#os.remove(&quot;./测试图片.jpg&quot;) Python中播放音乐pygame 参考：https://www.cnblogs.com/ocean1100/p/9319891.html 123456789101112131415pygame.init() #进行全部模块的初始化，pygame.mixer.init() #或者只初始化音频部分pygame.mixer.music.load(&#x27;xx.mp3&#x27;) #使用文件名作为参数载入音乐 ,音乐可以是ogg、mp3等格式。载入的音乐不会全部放到内容中，而是以流的形式播放的，即在播放的时候才会一点点从文件中读取。pygame.mixer.music.play()#播放载入的音乐。该函数立即返回，音乐播放在后台进行。play方法还可以使用两个参数pygame.mixer.music.play(loops=0, start=0.0) #loops和start分别代表重复的次数和开始播放的位置。pygame.mixer.music.stop() #停止播放，pygame.mixer.music.pause() #暂停播放。pygame.mixer.music.unpause() #取消暂停。pygame.mixer.music.fadeout(time) #用来进行淡出，在time毫秒的时间内音量由初始值渐变为0，最后停止播放。pygame.mixer.music.set_volume(value) #来设置播放的音量，音量value的范围为0.0到1.0。pygame.mixer.music.get_busy() #判断是否在播放音乐,返回1为正在播放。pygame.mixer.music.set_endevent(pygame.USEREVENT + 1) #在音乐播放完成时，用事件的方式通知用户程序，设置当音乐播放完成时发送pygame.USEREVENT+1事件给用户程序。 pygame.mixer.music.queue(filename) #使用指定下一个要播放的音乐文件，当前的音乐播放完成后自动开始播放指定的下一个。一次只能指定一个等待播放的音乐文件。 导入其他文件函数 新建包 from my.xx.py import 新建文件夹同理 因python会将环境下的文件夹默认为包 把普通文件夹编程一个包，添加一个文件__init__.py python函数类 isdigit()和is.numeric()的区别 参考： https://www.cnblogs.com/philkang/p/8667035.html 1234567891011121314isdigit()True: Unicode数字，byte数字（单字节），全角数字（双字节），罗马数字False: 汉字数字Error: 无isdecimal()True: Unicode数字，，全角数字（双字节）False: 罗马数字，汉字数字Error: byte数字（单字节）isnumeric()True: Unicode数字，全角数字（双字节），罗马数字，汉字数字False: 无Error: byte数字（单字节） map()函数 语法： 1map(function, iterable, ...) 第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。 列表推导式 1x for x in ... if... lambda函数 1lambda x: x+1 仅仅为了使代码更简介，大部分情况下可用列表推导式完成，降低代码的可读性 python.numpy numpy.reshape 官方文档：https://numpy.org/doc/stable/reference/generated/numpy.reshape.html 123456789101112131415161718192021a = range(1:7)&gt;array([1,2,3,4,5,6])a.reshape(2,3)&gt;array([[1,2,3], [4,5,6]])a.reshape(2,3,order = &quot;F&quot;)&gt;array([[1,3,5], [2,4,6]]) b = a.reshape(2,3)b.reshape(-1,1)&gt;array([[1], [2], [3], [4], [5], [6]])b.reshape(1,-1)array([[1, 2, 3, 4, 5, 6]]) flatten()函数和ravel()函数 参考：https://www.cnblogs.com/mzct123/p/8659193.html 这两个函数都可以扁平化矩阵 但后者的改变也会改变原矩阵中相应的值 numpy.argmax 提取最大值索引 numpy.bincount() 统计数组中值出现的次数"},{"title":"正则表达式","path":"/notes/regular-expression/index.html","content":"链接: 正则表达式30分钟入门教程"},{"title":"windows","path":"/notes/windows-notes/index.html","content":"快捷键 1234567891011121314151617181920212223242526272829303132333435windows 系统快捷键Alt + Tab\t切换应用Win + Tab\t切换桌面Win + W\tWindows INK工作区Win + E\t打开资源管理器Win + R\t打开运行Win + T\t切换窗口预览Win + I\t打开windows设置Win + D\t显示桌面Win + X\t显示系统选项Win + M\t最小化所有窗口Win + Shift + M\t还原最小化的窗口浏览器快捷键Alt + F4\t关闭当前窗口。Ctrl + J 打开“下载内容”。Shift + Esc 打开内置任务管理器。Ctrl + Shift + B 打开和关闭书签栏。Ctrl + Shift + J 打开开发人员工具。 磁盘分盘 使用diskpart工具删除无法删掉的盘 访问diskpart工具：直接使用cmd进入即可 相关命令： 123456789101112131415list disk\t电脑当前可用硬盘select disk x （x为上述硬盘编号）\t选择要进行分区操作的硬盘list partition\t查看分区clean 清除所有分区（慎用）convert gpt\t将硬盘转换成GPT分区表create partition efi size=200\t创建EFI分区，系统分区create partition msr size=128\t创建MSR分区，保留分区create partition primary size=xxx\t创建主分区 系统文件检查器 系统文件检查器 ：某些 Windows 功能不工作或 Windows 崩溃，使用系统文件检查器扫描 Windows 并还原文件。 以管理员运行 cmd，使用命令 : 吐槽：拒绝爱剪辑，用爱剪辑剪视频最后不赞助不能使用不说（非得到剪完视频导出才出现），还把系统的音视频给破坏了，不然也用不上这个命令啊。只能说祝它胡 右键添加“在此处打开命令窗口” 方法：使用脚本注入注册表 步骤： 新建一个txt文件，粘贴相应代码 更改后缀为 reg 运行该注册表文件 步骤1.中的代码1234567891011121314151617181920212223242526272829Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\\Directory\\shell\\OpenCmdHere]@=&quot;在此处打开命令窗口&quot;&quot;Icon&quot;=&quot;cmd.exe&quot;[HKEY_CLASSES_ROOT\\Directory\\shell\\OpenCmdHere\\command]@=&quot;cmd.exe /s /k pushd \\&quot;%V\\&quot;&quot;[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\OpenCmdHere]@=&quot;在此处打开命令窗口&quot;&quot;Icon&quot;=&quot;cmd.exe&quot;[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\OpenCmdHere\\command]@=&quot;cmd.exe /s /k pushd \\&quot;%V\\&quot;&quot;[HKEY_CLASSES_ROOT\\Drive\\shell\\OpenCmdHere]@=&quot;在此处打开命令窗口&quot;&quot;Icon&quot;=&quot;cmd.exe&quot;[HKEY_CLASSES_ROOT\\Drive\\shell\\OpenCmdHere\\command]@=&quot;cmd.exe /s /k pushd \\&quot;%V\\&quot;&quot;[HKEY_CLASSES_ROOT\\LibraryFolder\\background\\shell\\OpenCmdHere]@=&quot;在此处打开命令窗口&quot;&quot;Icon&quot;=&quot;cmd.exe&quot;[HKEY_CLASSES_ROOT\\LibraryFolder\\background\\shell\\OpenCmdHere\\command]@=&quot;cmd.exe /s /k pushd \\&quot;%V\\&quot;&quot;"},{"title":"0. 前言","path":"/wiki/Essense-of-Linear-Algebra/index.html","content":"一开始学习高等代数时，对于一些概念都处于懵懵懂懂的状态，虽然每个定理必有证明，但始终感觉过于抽象，一知半解。老师告诉我，高等代数的第一部分就是如何解出 nnn 元一次方程组，最经典的定理就是代数基本定理。我对于这类内容是缺乏想象力的，即使知道数形结合是理解概念的最佳途径，也难以找到关键之处。所以就会去寻找一些对于高等代数直观的描述。后来意外发现了 3Blue1Brown 的 Essense of Linear Algebra 系列的视频。事实上，我不赞同“本质”的描述，只能说是通过空间实际的变化，直观的刻画出高等代数里的这些东西干了什么，或者说课本上的数学语言也是“本质的”，但很抽象。但我确实在直观的刻画中获益匪浅，视频的内容已经足够简明扼要了，但我还是从中做了一些摘抄和笔记，以便自己困惑时回头看看。 视频目录： 向量究竟是什么？ 线性组合、张成的空间与基 矩阵与线性变换 矩阵乘法与线性变换复合 三维空间中的线性变换 行列式 逆矩阵、列空间与零空间 非方阵 点积与对偶性 叉积的标准介绍 以线性变换的眼光看叉积 基变换 特征向量与特征值 计算二阶矩阵特征值的妙计 抽象向量空间 克莱默法则 PS：这一系列视频学过一遍来看更为提神醒脑。"},{"title":"数据结构","path":"/wiki/R-notes/index.html","content":"所有R语言对象都有两个内在属性，类型和长度。类型是对象元素的基本种类，共有四种： 数值型——整型、单精度实型、双精度实型 字符型 复数型 逻辑型(FALSE、TRUE或NA) 常用mode()、class()、length得到类型和长度 注：mode：表示对象在内存中的存储类型 基本数据类型’atomic’ mode： numeric（Integer/double）, complex, character和logical 递归的对象（recursive object）： ‘list’ 或 ‘function’ class：是一种抽象类型，或者理解为一种数据结构 他主要是用来给泛型函数（参考java中泛型的概念）识别参数用。 对象 对象有7种：向量、因子、数组、矩阵(特殊的数组)、数据框、时间序列(ts)、列表 基本运算中：xor()异或函数：a⊕b = (¬a ∧ b) ∨ (a ∧¬b) 逻辑运算 浏览对象的信息 ls()返回环境中的对象名称，参数pattern指定含有某个字母，^指定首字母：ls(pat=&quot;^m&quot;) ls.str() 显示内存中所有对象的详细情况，max.level=-1避免结果过长 向量 seq(from = , to = , by = ((to - from)/(length.out - 1)),length.out = NULL) 12seq(from = 2, to = 5, by = 0.5)seq(from = 2, to = 5, length.out = 7) rep(x, times = 1, length.out = NA, each = 1) times x重复的次数；each x中每一个元素重复的次数 1234rep(2:5, times = 2)rep(2:5, each = 2)rep(2:5, times = 2, each = 2)rep(2:5, c(2,3,4,5)) # 2:5 中的每个元素按c(2,3,4,5)重复 sequence() 123sequence(5:10)sequence(10:5)sequence(c(3,2,4)) 字符 paste (..., sep = &quot; &quot;, collapse = NULL) 12paste(c(&quot;X&quot;, &quot;Y&quot;), 1:10, sep = &quot;&quot;)paste(c(&quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;), 1:5, sep = &quot;&quot;) 因子 factor(x = character(), levels, labels = levels, ordered = is.ordered(x) ) 12345factor(x = LETTERS[1:3], levels = c(&quot;C&quot;, &quot;A&quot;, &quot;B&quot;))factor(x = LETTERS[1:3], labels = 1:3)factor(x = LETTERS[1:3], labels = c(3, 2, 1))factor(x = LETTERS[1:3], levels = c(&quot;C&quot;, &quot;A&quot;, &quot;B&quot;), labels = c(3, 2, 1)) gl(n, k, length = n*k, labels = seq_len(n), ordered = FALSE) 12gl(2, 3, labels = seq(2))gl(2, 3, length = 10, labels = seq(3)) 数组和矩阵 array(data, dim, dimnames) 123456789101112131415161718192021# Create two vectors of different lengths.vector1 &lt;- c(5,9,3)vector2 &lt;- c(10,11,12,13,14,15)column.names &lt;- c(&quot;COL1&quot;,&quot;COL2&quot;,&quot;COL3&quot;)column.names &lt;- paste0(&quot;COL&quot;, seq(3))row.names &lt;- c(&quot;ROW1&quot;,&quot;ROW2&quot;,&quot;ROW3&quot;)matrix.names &lt;- c(&quot;Matrix1&quot;,&quot;Matrix2&quot;)# Take these vectors as input to the array.result &lt;- array(c(vector1,vector2),dim = c(3,3,2),dimnames = list(row.names, column.names, matrix.names))# Print the third row of the second matrix of the array.print(result[3,,2])# Print the element in the 1st row and 3rd column of the 1st matrix.print(result[1,3,1])# Print the 2nd Matrix.print(result[,,2]) 对矩阵运算 apply()、sweep函数 1234567891011A &lt;- matrix(seq(9), ncol=3)B &lt;- matrix(4:15, ncol=3)C &lt;- matrix(rep(c(8,9,10),2), ncol=2)# Create a list of matricesMyList &lt;- list(A,B,C)# Extract the 2nd column from `MyList` with the selection operator `[` with `lapply()`lapply(MyList,&quot;[&quot;, , 2)# Extract the 1st row from `MyList`lapply(MyList,&quot;[&quot;, 1, ) 数据切片sweep 123456789101112131415161718192021# NOT RUN &#123;require(stats) # for medianmed.att &lt;- apply(attitude, 2, median)sweep(data.matrix(attitude), 2, med.att) # subtract the column medians## More sweeping:A &lt;- array(1:24, dim = 4:2)## no warnings in normal usesweep(A, 1, 5);sweep(A, 2, 5)(A.min &lt;- apply(A, 1, min)) # == 1:4sweep(A, 1, A.min)sweep(A, 1:2, apply(A, 1:2, median))## warnings when mismatchsweep(A, 1, 1:3) # STATS does not recyclesweep(A, 1, 6:1) # STATS is longer## exact recycling:sweep(A, 1, 1:2) # no warningsweep(A, 1, as.array(1:2)) # warning# &#125; 数据框 data.fram() 注意函数rownames()、colnames()、attach()、with 12345attach(Puromycin)xtabs(~state + conc, data = Puromycin)summary(Puromycin)pairs(Puromycin, panel = panel.smooth) 列表 略 时间序列 ts(data = NA, start = 1, end = numeric(), frequency = 1,deltat = 1, ts.eps = getOption(&quot;ts.eps&quot;), class = , names = ) 123456A &lt;- ts(1:10, start = 1959)ts(1:47, frequency = 12, start = c(1959, 2))ts(1:47, frequency = 4, start = c(1959, 2))ts(matrix(rpois(36, 5), 12, 3), start = c(1961,1),frequency = 12)ts(matrix(rpois(36, 5)), start = c(1961,1),frequency = 12) 常用的统计函数 mad() 中位绝对离差 MAD=median(∣Xi−median(X)∣) 鲁棒性 具体可参见：https://blog.csdn.net/horses/article/details/78749485 中位数、方差、标准差、范围、四分位数极差、分位数 1234567x &lt;- seq(10)sd(x)var(x)sd(x)range(x)IQR(x)quantile(x) 累乘、累和（结果） 123x &lt;- seq(5)prod(x)sum(x) 累和、累积、累小、累大（每一个） 123456x &lt;- seq(5)y &lt;- c(3, 5, 2, 6, 1, 7)cumsum(x)cumprod(x)cummax(y)cummin(y) 排序 rev()、sort()、order()、rank() 12345678(x &lt;- sample(seq(20),5,replace = F))rev(x) # 逆序sort(x) # 按从小到大顺序rank(x) # 排序后的顺序order(x) # 排序后所放元素在之前的位置x[order(x)]sort(x)[rank(x)] 一个技巧 这是一个乱入的技巧，记得使用R语言做机器学习的时候用到的。 123?substitutedeparse(substitute(series))?deparse #将表达式转换为字符串"},{"title":"确定性趋势参数估计","path":"/wiki/Time-series-notes/index.html","content":"常均值模型 参数估计的R语言函数 常均值模型为： Yt=μ+XtY_t=\\mu+X_t Yt​=μ+Xt​ 其中对所有的ttt有E(X)=0E(X)=0E(X)=0。使用观测到的时间序列Y1,Y2,…,YnY_1,Y_2,…,Y_nY1​,Y2​,…,Yn​ 来估计μ\\muμ 。则可由OLSEOLSEOLSE得出μ\\muμ的估计为样本均值或平均数，定义为 Yˉ=1n∑t=1nYt\\bar{Y}=\\frac{1}{n}\\sum_{t=1}^n Y_t Yˉ=n1​t=1∑n​Yt​ 在模型假设成立的前提下，可以看出E(Yˉ)=μE(\\bar{Y})=\\muE(Yˉ)=μ，基于此常均值模型的参数估计算法函数ConReg()如下: 123456ConReg &lt;- function(Y)&#123; mu = sum(Y) / length(Y) out = list(Y=Y, mu=mu)&#125; 参数估计的R语言函数检验 由于课本并未给出相关数据，下面人为生成一组数据进行验证，做法如下：令模型中的μ=2\\mu=2μ=2，Xt∼N(0,1)X_t\\sim N(0,1)Xt​∼N(0,1)，通过模型生成一组Yt,t=1,…,100Y_t,t=1,…,100Yt​,t=1,…,100,以此使用上述函数ConReg()估计μ\\muμ的值，比较真实的μ=2\\mu=2μ=2，判断算法的正确性。代码如下： 123456set.seed(1)mu = 2X &lt;- rnorm(100,0,1)Y &lt;- mu + X + rnorm(100, 0, .2)muest &lt;- ConReg(Y)muest$mu 可以计算得估计μ=2.101\\mu=2.101μ=2.101，与真实值相差不大，可以认为函数ConReg()是合理的。 线性模型 参数估计的R语言函数 对于线性模型 μt=β0+β1t+β2t+…+βnt\\mu_t=\\beta_0+\\beta_1t+\\beta_2t+…+\\beta_nt μt​=β0​+β1​t+β2​t+…+βn​t 类似的可通过OLSEOLSEOLSE，计算得起参数估计β\\betaβ应该为： β=(X′X)−1XY\\beta=(X&#x27;X)^{-1}XY β=(X′X)−1XY 基于此给出线性模型参数估计的模型LinReg()代码如下： 12345678910111213141516171819202122232425LinReg &lt;- function(X, y, lambda = 0, intercept = T)&#123; n = dim(X)[1] p = dim(X)[2] #Coefficients if(intercept == T)&#123; X. = cbind(rep(1,n), X) &#125;else&#123; X. = X &#125; beta = solve(t(X.)%*%X. + lambda*diag(dim(X.)[2]), t(X.)%*%y) if (intercept == T)&#123; beta1 = beta[2:(p+1)] beta0 = beta[1] &#125;else&#123; beta1 = beta beta0 =NULL &#125; out = list(X=X, y=y, beta=beta1, beta0 = beta0, intercept = intercept )&#125; 参数估计的R语言函数检验 类似于常均值模型，人为产生数据进行验证，代码如下： 123456789101112n &lt;- 100p &lt;- 6set.seed(1)X &lt;- matrix(rnorm(n*p), n, p)beta = c(3, 1, rep(0,p-2))beta0 = 0set.seed(1)y = X%*%beta + beta0 + rnorm(100, 0, .2)result &lt;- LinReg(X, y)result$betaresult$beta0 可以看出估计的参数β^\\hat\\betaβ^​与真实值非常接近，认为该函数没有问题。 二次模型 参数估计的R语言函数 对于二次模型我们可以将其转化为线性模型进行参数估计，一般的二次模型如下： μt=β0+β1t2\\mu_t=\\beta_0+\\beta_1t^2 μt​=β0​+β1​t2 我们可以令X0=1,X1=t2X_0=1,X_1=t^2X0​=1,X1​=t2，这样将其转为，设计矩阵为X=(X0X1)X=(\\begin{matrix}X_0&amp;X_1 \\end{matrix})X=(X0​​X1​​)的线性模型，为方便以后的函数调用，在设计R语言函数时推广为多项式模型，代码如下： 123456789101112PolyDes &lt;- function(t)&#123; n &lt;- length(t[, 1]) p &lt;- length(t[1, ]) X &lt;- matrix(nrow = n, ncol = p) for (i in 1:p) &#123; X[, i] &lt;- t[, i]^i &#125; out = X &#125; 参数估计的R语言函数检验 函数PolyDes()仅给出多项式模型的设计矩阵，要求其参数估计可再次调用线性模型函数LinRes()。以下给出模型的验证： 123456789101112131415161718beta &lt;- c(5, 4, 3, 2, 1)beta0 &lt;- 0t &lt;- matrix(nrow = 100, ncol = 5)set.seed(1)r &lt;- matrix(rnorm(100*5), 100, 5)for (i in 1:5) &#123; t[, i] = 6-i + r[, i]&#125;y = beta0 + t[,1]*beta[1] + t[,2]^2*beta[2] + t[,3]^3*beta[3] + t[,4]^4*beta[4] + t[,5]^5*beta[5]+rnorm(100, 0, .2)X &lt;- PolyDes(t)result &lt;- LinReg(X,y)result$betaresult$beta0 对比估计的参数和真实的参数β\\betaβ是很接近的，可以认为函数是有效的。 季节趋势模型 参数估计的R语言函数 对季节性趋势模型，其观测到的数据可表示为$$Y_t=\\mu_t+X_t$$,其中，对所有t，E(Xt)=0E(X_t)=0E(Xt​)=0。对于月度季节新数据，对μt\\mu_tμt​最常用的假设是存在12个常数（参数）β1,β2,⋯ ,β12\\beta_1,\\beta_2,\\cdots,\\beta_{12}β1​,β2​,⋯,β12​，它们给出了12个月的期望平均气温。可以记为： μ={β1t=1,13,15,…β2t=2,14,16,…⋮β12t=12,24,36,…\\mu=\\begin{cases}\\beta_1&amp;t=1,13,15,…\\\\ \\beta_2&amp;t=2,14,16,…\\\\ \\vdots \\\\ \\beta_{12}&amp;t=12,24,36,…\\end{cases} μ=⎩⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎧​β1​β2​⋮β12​​t=1,13,15,…t=2,14,16,…t=12,24,36,…​ 该模型有时被称为季节均值模型。 对于季节均值模型的估计，关键点在于将模型按月进行参数估计，这需要对设计矩阵XXX进行特殊处理。这里的处理是，设计矩阵XXX是大小为n×12n×12n×12的示性矩阵，n为季节性时间序列的长度。XXX的每一行就为一个示性函数，仅有唯一一个位置为1，即对于确定的iii，XijX_{ij}Xij​表示第iii个数据是第jjj月的。值得注意的是对于有截距项的模型如下： μt=β0+β2I(t%12=2)+⋯+β12I(t%12=0)\\mu_t=\\beta_0+\\beta_2I(t\\%12=2)+\\cdots+\\beta_{12}I(t\\%12=0) μt​=β0​+β2​I(t%12=2)+⋯+β12​I(t%12=0) 参考前面的线性参数进估计，季节均值模型参数估计代码如下: 12345678910111213141516171819202122232425262728293031SeaReg &lt;- function(y, intercept = F)&#123; if (!is.ts(y)) stop(&quot;y need to be a time series&quot;) n &lt;- length(y) X &lt;- matrix(ncol = 12, nrow = n) month &lt;-c(&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;) month.y &lt;- as.character(season(y)) for (i in 1:n) &#123; for (j in 1:12) &#123; if(month.y[i]==month[j])&#123; X[i,j] = 1 &#125;else&#123; X[i,j] = 0 &#125; &#125; &#125; if(intercept == F)&#123; X. = X &#125;else&#123; X[, 1]=rep(1, n) X. = X &#125; beta = solve(t(X.)%*%X., t(X.)%*%y) out = list(y=y, X=X., beta=beta,intercept = intercept )&#125; 参数估计的R语言函数检验 为对季节性趋势模型函数SeaReg()进行检验，采用TSA包中的tempdub数据进行检验。代码如下： 12345678library(TSA)data(&quot;tempdub&quot;)#无截距项result1 &lt;- SeaReg(tempdub)result1$beta#有截距项result2 &lt;- SeaReg(tempdub, intercept = T)result2$beta 对比《时间序列》P24页的数据可知，有截距项和无截距项的参数估计的结果是基本一致的，故而该函数是可以接受的。 余弦趋势模型 参数估计的R语言函数 余弦趋势模型的最简单形式可表示为: μt=β0+β1cos(2πft)+β2sin(2πft)\\mu_t=\\beta_0+\\beta_1cos(2\\pi ft)+\\beta_2sin(2\\pi ft) μt​=β0​+β1​cos(2πft)+β2​sin(2πft) 类比二项式模型可知，其可也转换为线性模型求解，只不过需要对其设计矩阵做一定的设置，代码如下： 12345678910111213CosDes &lt;- function(y, f=1)&#123; if (!is.ts(y)) stop(&quot;y need to be a time series&quot;) n = length(y) t = as.numeric(time(y)) X1 = cos(2*pi*f*t) X2 = sin(2*pi*f*t) X = cbind(X1, X2) out = X&#125; 参数估计的R语言函数检验 采用TSA包中的tempdub数据进行检验。使用默认频率f=1，代码如下： 123456library(TSA)data(&quot;tempdub&quot;)X &lt;- CosDes(tempdub, 1)result&lt;-LinReg(X,tempdub)result$betaresult$beta0 可以看到其参数估计的结果与课本P25页表3-5的数据一致，说明该函数的确可以完成余弦趋势模型的设计矩阵变换。"},{"title":"认识 Git","path":"/wiki/git/index.html","content":"什么是 Git ？ Git 是目前世界上最先进的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 Git 与 SVN 区别点 Git 是分布式的，SVN 不是。这是 Git 和其它非分布式的版本控制系统如 SVN，CVS 等最核心的区别。 Git 把内容按元数据方式存储，而 SVN 是按文件。 Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。 Git 没有一个全局的版本号，而 SVN 有。目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。 Git 的内容完整性要优于 SVN。Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。 图片来源于 RUNOOB Git 工作区、暂存区和版本库 工作区：就是你在电脑里能看到的目录。 暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。 版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。"},{"title":"前言","path":"/wiki/technique/index.html","content":"Beautiful is better than ugly. （优美比丑陋好） Explicit is better than implicit.（清晰比晦涩好） Simple is better than complex.（简单比复杂好） Complex is better than complicated.（复杂比错综复杂好） Flat is better than nested.（扁平比嵌套好） Sparse is better than dense.（稀疏比密集好） Readability counts.（可读性很重要） Special cases aren’t special enough to break the rules.（特殊情况也不应该违反这些规则） Although practicality beats purity.（但现实往往并不那么完美） Errors should never pass silently.（异常不应该被静默处理） Unless explicitly silenced.（除非你希望如此） In the face of ambiguity, refuse the temptation to guess.（遇到模棱两可的地方，不要胡乱猜测） There should be one-- and preferably only one --obvious way to do it.（肯定有一种通常也是唯一一种最佳的解决方案） Although that way may not be obvious at first unless you’re Dutch.（虽然这种方案并不是显而易见的，因为你不是那个荷兰人[^1]） Now is better than never.（现在开始做比不做好） Although never is often better than *right* now.（不做比盲目去做好[^2]） If the implementation is hard to explain, it’s a bad idea.（如果一个实现方案难于理解，它通常不是一个好的方案） If the implementation is easy to explain, it may be a good idea.（如果一个实现方案易于理解，它很有可能是一个好的方案） Namespaces are one honking great idea – let’s do more of those!（命名空间非常有用，我们应当多加利用）"},{"title":"1. 向量究竟是什么？","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-1/index.html","content":"视频 随手记 注意：线性代数围绕两种基本运算：v⃗+w⃗\\vec{v}+\\vec{w}v+w、kv⃗k\\vec{v}kv 。 1.和2.两种观点碰撞出向量的重要概念。 向量的坐标表明了向量以原点为起点，向x轴某方向和y轴某方向运动的距离，按这个距离走完之后到达向量的终点，将原点与之相连，便得出一段有方向的线段–向量。 v⃗+w⃗\\vec{v}+\\vec{w}v+w ：为何以“数字列表”对应元素相加来定义向量加法？直观理解，沿着两个向量方向运动，先按 v⃗\\vec{v}v 坐标标注的那样沿坐标轴运动，再按 w⃗\\vec{w}w 坐标标注的那样沿坐标轴运动，运动后的结果与依次按坐标轴走完两个向量在该坐标轴的运动一致。 kv⃗k\\vec{v}kv : 对向量的缩放。 数学家为何只选取这两种运算，并如何将他们抽象出来？ 标准定义 列向量同理。"},{"title":"10.叉积的标准介绍","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-10/index.html","content":"视频 随手记 这一部分只是基本介绍。 为什么两个三维向量叉乘可以写成第一列为三个基向量的3x3行列式? 为什么叉乘向量的三个坐标是 v2w3−v3w2,v3w1−v1w3,v1w2−v2w1v_2w_3-v_3w_2, v_3w_1-v_1w_3, v_1w_2-v_2w_1v2​w3​−v3​w2​,v3​w1​−v1​w3​,v1​w2​−v2​w1​ ？ 叉积，外积，向量积（cross product），一般指三维向量，超过三维是张量积。模长：∣v⃗×w⃗=∣v⃗∣⋅∣w⃗∣sin⁡θ|\\vec{v}×\\vec{w}=|\\vec{v}|·|\\vec{w}|\\sin\\theta∣v×w=∣v∣⋅∣w∣sinθ。 不严谨的说法：v⃗×w⃗=(±)平行四边形面积\\vec{v}×\\vec{w}=(\\pm)平行四边形面积v×w=(±)平行四边形面积 ，符号由向量位置而定，由 v⃗\\vec{v}v 到 w⃗\\vec{w}w 逆时针方向为正。 这里的面积可以直接看 行列式 这一节，将向量按列写做行列式行列式的值记为向量叉积。 但实际上，叉积应该是通过两个三维向量生成一个新的三维向量，新向量于原向量构成的平面垂直，模长为平行四边形面积，方向由右手法则确定。 具体的解释在下一节，还是涉及对偶性。"},{"title":"11.以线性变换的眼光看叉积","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-11/index.html","content":"随手记 为什么两个三维向量叉乘可以写成第一列为三个基向量的 3x33x33x3 行列式? 为什么叉乘向量的三个坐标是 v2w3−v3w2,v3w1−v1w3,v1w2−v2w1v_2w_3-v_3w_2, v_3w_1-v_1w_3, v_1w_2-v_2w_1v2​w3​−v3​w2​,v3​w1​−v1​w3​,v1​w2​−v2​w1​ ？ 考虑如下这样的函数： 该函数的几何意义在于，对于任意输入的向量 (x,y,z)(x,y,z)(x,y,z) ，考虑他与 v⃗\\vec{v}v 和 w⃗\\vec{w}w 确定的平行六面体，得到他的体积，根据取向确定符号。 这个函数是线性的，由于是从三维到一维的变换，就可以用一个 1×31×31×3 的矩阵来表示这个变换（点积中的对偶性），这里把这个矩阵当作颠倒的向量 p⃗\\vec{p}p​ 。 计算意义： 左侧是 p⃗\\vec{p}p​ 与 (x,y,z)(x,y,z)(x,y,z)点乘的结果，右边是行列式的值，对应来看，可以得到 p⃗\\vec{p}p​ 的坐标。 这和前面提到的 (i^,j^,l^)(\\hat i,\\hat j, \\hat l)(i^,j^​,l^) 一致。 那么对于第一个问题的答案就通过这个线性函数 f(x)f(x)f(x) 转化为： 将 p⃗\\vec{p}p​ 和某个向量 (x,y,z)(x,y,z)(x,y,z) 点乘时，结果等于一个 3x33x33x3 矩阵的行列式，这个矩阵的第一列为 [x,y,z]T[x,y,z]^T[x,y,z]T ，第二三列为 v⃗\\vec{v}v、w⃗\\vec{w}w 的坐标，什么样的 p⃗\\vec{p}p​ 可以满足这个性质。 几何角度： 左边： 注意到是 (x,y,z)(x,y,z)(x,y,z) 的投影长度 × p⃗\\vec{p}p​ 的长度。 右边： 是平行六面体的体积，首先计算 v⃗\\vec{v}v 和 w⃗\\vec{w}w 确定的平行四边形面积。该体积等于 (x,y,z)(x,y,z)(x,y,z) 到该四边形垂线的分量与面积的成绩。 左右相等，相当于这个向量 p⃗\\vec{p}p​ 为模长为平行四边形面积，与v⃗\\vec{v}v 和 w⃗\\vec{w}w确定平面垂直，方向满足右手定则的向量。按叉积的定义，这个 p⃗\\vec{p}p​ 就是叉积。"},{"title":"12.基变换","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-12/index.html","content":"随手记 如何在不同坐标系下相互转化？ 过渡矩阵： 啊，这个颠倒的感觉我也有。过渡矩阵将新基底下的坐标变成原基底的坐标。 如果要求原基底的坐标在新基底下的表示，采用过渡矩阵的逆阵： 这是一个新的变换，代表将新基底向原基底变换。 这样一看就没有那么颠倒了： 对于基变换而言这里提到了两种理解：一是作为从线性变换的角度，变换前后都默认使用原来的网格（基底）表示向量。另一种理解，将矩阵看作一个坐标翻译器，向量始终没有变化，但通过这个翻译器将表示向量的坐标再两个网格下相互转化，坐标系变了。 详细解释： 假设转换矩阵为 AAA，转换后基底下坐标 (1,2)(1,2)(1,2) 为 BBB，但在原基底下坐标为 (1,2)(1,2)(1,2) 时的向量为 CCC (CCC 和 BBB 不是同一向量)，转后后的基底坐标再原基底下的坐标实际为 XXX。 按照线性变换的角度，是将错误理解的 CCC (注意错误理解的 CCC 的坐标也是 (1,2)(1,2)(1,2)，只不过是在原基底下) 通过线性变换转换成 XXX 或者说 BBB。在空间中 BBB 和 XXX 就是同一个向量，只不过名字不一样，坐标表示不一样，但是空间中的位置就在那里，那么在原基底下就可以通过变换将错误理解的坐标 CCC 转换的他原本的位置上。这里向量 XXX 或者说 BBB 是没有变的，变的是 CCC。 按照翻译器的角度，BBB 和 XXX 是两个向量，虽然他们模长方向都相同，但他们采用了不同的描述方式（基底不同导致的坐标不同），但这描述方式的问题在于，在各自的描述体系下可以对应到对方内容上，以产生混淆。类似于英语中说 cow 是在说奶牛，而在中文中相同的发音 kao【靠】 却是不礼貌的感叹词。那么就需要有一个翻译器将 cow 翻译成奶牛。这里的矩阵 AAA 就可以当作翻译器，他将 BBB 正确的翻译为 XXX，也就是正确的用原基底的坐标描述 BBB，这个坐标就是 XXX。 所以说向量的坐标表示不是唯一的。 如何转化一个矩阵： 首先转换成原基底的坐标，再旋转 90ο90^\\omicron90ο，最后使用逆变换转化为目标基底坐标。用上述式子的结果乘以任何目标基底下的向量，将得到该向量旋转 90ο90^\\omicron90ο 的结果。 总的来说，当看到 A−1MAA^{-1}MAA−1MA 时，按时着数学上的转移作用，中间的矩阵 MMM 代表一种变换，两边的矩阵代表转移作用。"},{"title":"13.特征向量与特征值","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-13/index.html","content":"随手记 在线性变换中，存在一种特殊向量在变换后没有发生旋转，只有拉伸，不会离开它原本所在的直线。这些特殊的向量就被称为 “特征向量”，他们都有一个特殊值——“特征值”，该值正负没有什么特殊意义，但其绝对值描述了“特征向量”的拉伸倍数。 ps: 从特征值的几何意义可以轻松看出 ∣A∣=λ1+λ2+⋯+λn|A| = \\lambda_1 + \\lambda_2 + \\dots +\\lambda_n∣A∣=λ1​+λ2​+⋯+λn​ ，因原始的基底长度默认为单位 1 ，变换后每一基底扩大 λi\\lambda_iλi​ 倍。 特征向量：Av⃗=λv⃗A\\vec{v} = \\lambda\\vec{v}Av=λv，求解该式等价于求解 det⁡(A−λI)=0\\det(A-\\lambda I)=0det(A−λI)=0 但是注意，不是所有变换都有实特征值，特征值为复数时，一般对应于变换中的某种旋转。 特征基，对角矩阵，有许多良好性质，例如幂乘。 通过线性变换将特征向量作为新的基向量： 这样得出的基称之为特征基。 不是所有的矩阵都可以对角化，例如剪切变换，他的特征向量不够多，不能张成全空间。 结尾的问题： 问题解答： 答案来源链接 斐波那契数列矩阵 标准定义"},{"title":"14.计算二阶矩阵特征值的妙计","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-14/index.html","content":"随手记 快速计算二阶行列式的奇淫技巧 三个步骤： 但其实这玩意就是个韦达定理(或者按作者说是简化的求根公式)，不过确实便捷一点。"},{"title":"15.抽象向量空间","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-15/index.html","content":"随手记 这个视频实际上是在讲一般向量空间。 开篇问题：向量是什么？ 一个箭头？还是一个实数对？ 坐标的表示对于向量是不唯一的，就好像向量是独立于坐标的一样。 行列式和特征向量与所选坐标系无关。 数学上所说的向量空间是什么意思？事实上并非只有这些有向箭头符合向量空间，像函数等一系列的东西也具有向量的特性的。 作者举了函数的例子，其中特别描述了求导元素是线性的，可以用矩阵来描述。 首先线性的严格定义(这大概是线性代数的开篇定义了吧) 按这个定义，容易得出求导运算是线性的。 对于一个求导运算： 线性代数中的概念应用于函数时的别名： 回到向量是什么的问题，数学中有很多类似向量的不同事物，如果他们具有合理的数乘和加法概念，线性代数中的概念都是适用的。 数学上考虑的不是特例的一种线性空间，而是所有这些空间遵循的本质性质，符合这些条件的都被称为线性空间： 油管上的一个评论：“Everything is a matrix in its own way”"},{"title":"16.克莱默法则","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-16/index.html","content":"随手记 克莱默法则不是解方程的好方法。 作者只考虑了行列式非零的情况。 克莱默法则中解的形式为 xj=∣Dj∣∣D∣x_j = \\frac{|D_j|}{|D|}xj​=∣D∣∣Dj​∣​，其中 DDD 为系数行列式，DjD_jDj​ 为 DDD 中第 jjj 列替换为 (b1⋮bn)\\begin{pmatrix} b_1 \\\\ \\vdots \\\\ b_n \\end{pmatrix}⎝⎜⎜⎛​b1​⋮bn​​⎠⎟⎟⎞​。 这里主要解释了为什么是这种形式。 一个线性方程组（考虑二维）Ax=bAx=bAx=b ，解这个线性方程组可以看作是寻找一个向量 xxx，使得他被 AAA 变换后的向量是 bbb。 如上图，在原基底下，对于这个坐标值 xxx 的表示，可以看作是向量 [x,y]T[x,y]^T[x,y]T 和 i^\\hat ii^ 组成的平行四边形面积。对于 yyy 同理可以考虑 j^\\hat jj^​ 与向量组成的面积。推广到三维就是体积： 例如该图中的向量围成的平行六面体体积就是 yyy 的坐标值。 在二维下，考虑到 AAA 对 xxx 的变换作用，其面积的伸缩比例都等于给定的变换矩阵的行列式 ∣A∣|A|∣A∣。 此时，对于上面提到基底和 [x,y]T[x,y]^T[x,y]T 组成的平行四边形，在经过 AAA 的变换后，向量分量坐标值 iii 与 基底组成的平行四边形面积应该为 Area=∣A∣i{\\rm Area} = |A|iArea=∣A∣i。从形式上易知，变换后的平行四边形面积与变换矩阵的行列式之比为向量分量坐标值。 下面的关键是这个变换后的面积如何求出？ 注意到 [x,y]T[x,y]^T[x,y]T 变换后的向量为 bbb，AAA 中的列可以看作变换后的基底（考虑的 ∣A∣|A|∣A∣ 非零情况），这时和前文的平行四边形构造一致，使用 bbb 替换掉 AAA 第 jjj 列即可，这个新的矩阵记为 AjA_jAj​。那么 ∣Aj∣|A_j|∣Aj​∣ 记为变换后的四边形面积。 那么就有 xj=∣Aj∣∣A∣x_j = \\frac{|A_j|}{|A|}xj​=∣A∣∣Aj​∣​。 最后，克莱默法则虽然不适用手动解方程，但计算机计算常用此法。且该方法对于微分几何有奇效。"},{"title":"2. 线性组合、张成的空间与基","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-2/index.html","content":"视频 随手记 ps：xy坐标系 一个有趣的观点，一个向量实际上是对单位向量进行放缩并相加的结果。这样的单位向量被称为基向量。将坐标看作标量，基向量就是这些标量所放缩的对象。 基向量的选择不是唯一的，完全可以随意确定两个不同的向量作为基向量，他同样可以得到整个二维平面。 当使用数字描述向量时，他依赖于使用的基向量。 两个向量标量乘法之和的结果被称为这两个向量的线性组合。线性：可以这么理解，固定其他标量，变化一个标量，向量重点所经过的路径为一条直线。 所有可以表示为给定向量线性组合的向量集合被称为给定向量张成的空间（span）。 两个向量张成的空间实际上是问：仅通过向量加法与向量数乘这两个种基础运算能获得的所有可能的集合是什么。 在一个线性组合中，如果所有向量都给张成的空间增添了新的维度，那么称其为线性无关的，否则线性相关。 在二维中，如果两向量共线，则张成的空间只有一条线；若共点，张成的空间也只有一个点。 向量空间的一个基是张成该空间的一个线性无关向量集。 标准定义"},{"title":"3. 矩阵与线性变换","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-3/index.html","content":"视频 随手记 “变换”本质上是“函数”的一种花哨的说法，他接受输入内容，并输出对应结果。 “线性变换”限制了是“线性”的，变换后，直线仍然是直线，原点保持固定。总的来说可以看作是“保持网格线平行并等距分布”的变换。 通过记录基向量的变换来确定其他向量的变换。 通过矩阵记录基的变换，若要得到变换后的坐标，只需将原向量左乘变换矩阵即可。 矩阵记录了线性变换。若矩阵的列线性相关，以 2×22×22×2 矩阵为例，该矩阵所进行的线性变换将整个二维空间挤压到他们所在一条直线上，也就是这两个向量张成的一维空间。 每当看到一个矩阵时都可以将其解读为对空间的一种特定变换。 标准定义"},{"title":"4. 矩阵乘法与线性变换复合","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-4/index.html","content":"视频 随手记 上期回顾： 严格意义上，线性变换是将向量作为输入和输出的一类函数，但也可以将线性变换看作对空间的挤压伸缩，它保持网格线平行且等距分布，并且保持原点不变。线性空间有它的基向量完全决定。 先做一个变换，在做一个变换？——复合变换，追踪基向量的变化即可。 如果先作旋转变换，再做剪切变换： 两个矩阵相乘的几何意义，就是两个线性变换相继作用。 剪切和旋转变换的次序更换，变换的最终效果不一致，矩阵相乘不可交换。"},{"title":"5. 三维空间中的线性变换","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-5/index.html","content":"视频 随手记 尽管三维下的旋转难以直接表述，但将其分解为分立且简单旋转的符合就很容易理解了。"},{"title":"6. 行列式","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-6/index.html","content":"视频 随手记 测量变换对空间有多少拉伸或挤压——行列式 。 一个二维线性变换的行列式的值为 3.0 意味着它将一个区域的面积增加为原来的3倍。 一个二维线性变换的行列式为 0，意味着它将整个平面压缩到一条线，甚至一个点上。此时任意区域的面积都为0。 仅需检验一个矩阵的行列式是否为零，就可以得知这个矩阵所代表的变换是否将空间压缩到维度更小的空间上。 行列式负数：变换将整个平面翻转了。右手定则。 计算： 最后的小问题： det⁡(M1M2)=det⁡(M1)det⁡(M2)\\det(M_1M_2)=\\det(M_1)\\det(M_2) det(M1​M2​)=det(M1​)det(M2​) 先后经过 M2M_2M2​ 和 M1M_1M1​ 两次变换，其所作用的空间也相应先后变化 det⁡(M2)\\det(M_2)det(M2​) 、det⁡(M1)\\det(M_1)det(M1​) 倍，这与直接进行 M1M2M_1M_2M1​M2​ 所代表的变换产生的结果一致。"},{"title":"7. 逆矩阵、列空间与零空间","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-7/index.html","content":"视频 随手记 线性代数描述对空间的操纵，但被广泛应用的原因是可以求解特定的方程组——线性方程组。 Ax⃗=v⃗A\\vec{x} = \\vec{v}Ax=v ，矩阵 AAA 代表一种线性变换。求解该方程，意味着寻找一个向量 x⃗\\vec{x}x ，在变换后与 v⃗\\vec{v}v 重合。 换句话说，方程的解依赖于 变换 AAA 。 考虑到变换后可能保持空间维度，或者将空间压缩到低维，甚至零维。可以分为两种情况：AAA 的行列式为零，AAA 的行列式不为零。 AAA 的行列式不为零：有且仅有一个向量可以与 v⃗\\vec{v}v 重合，此时可以通过逆变换找到 x⃗\\vec{x}x。 这个逆变换也就是 A−1A^{-1}A−1，也就是说 A−1A=IA^{-1}A = IA−1A=I 是一个&quot;什么都不做&quot;的变换——恒等变换 III。 AAA 的行列式为零：此时没有逆变换，不能将一条线“解压缩”为一个平面。否则会映射为多个向量，但函数不能这样。 此时如果 v⃗\\vec{v}v 恰好在压缩后的空间上，那么解存在，否则解不存在。 “秩（rank）代表变换后的空间维度”。当变换的结果为一条直线时，也就是说结果是一维的，称这个变换的秩为 1。变换后在二维平面，称变换的秩为 2。秩与列数相等时称为满秩。 列空间（Column space）：所有可能的输出向量 Av⃗A\\vec{v}Av 构成的集合。换句话说，列空间就是矩阵的列张成的空间。 零向量： 一定被包含在列空间中，因线性变换保持原点位置不变。 对满秩变换来说唯一能在变换后落在原点的就是零向量自身。 而对非满秩矩阵，它将空间压缩到更低的维度上，会有一系列向量在变换后成为零向量。 零空间：在变换后落在原点的向量集合被称为所选矩阵的“零空间”或“核”。 在线性方程中，如果Ax⃗=v⃗=0⃗A\\vec{x}=\\vec{v} = \\vec{0}Ax=v=0 那么，零空间就是这个方程的所有可能解。 列空间让我们清楚什么时候解存在，零空间让我们理解所有可能解是什么样子的。 标准定义"},{"title":"8. 非方阵","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-8/index.html","content":"视频 随手记 不同维度之间的映射。 输入的二维向量与输出的三维向量是完全不同的“物种”，生活中完全不同的空间。这句话的意思大概是： 非满秩方阵进行的空间压缩是“伪降维”，实际上还是在高纬度内，只是空间压缩了。但非方阵映射进行的降维是真正意义上的降维，维度确实消失，只能从剩下的维度看待这个空间。 两者都失去了高纬度信息，但前者仍处在高维中 ，后者只能在低纬度看待这个空间。 二维到一维的映射是有意义的，可以联系到点积。"},{"title":"9.点积与对偶性","path":"/wiki/Essense-of-Linear-Algebra/essence-of-linear-algebra-9/index.html","content":"视频 随手记 点积：向量对应元素相乘 w⃗⋅v⃗\\vec{w}·\\vec{v}w⋅v 直观的几何意义：w⃗\\vec{w}w 向量投影的长度和 v⃗\\vec{v}v 向量的长度相乘，即 w⃗⋅v⃗=∣w⃗∣∣v⃗∣cos⁡θ\\vec{w}·\\vec{v}=|\\vec{w}||\\vec{v}|\\cos\\thetaw⋅v=∣w∣∣v∣cosθ 但是为什么？不仅是数字巧合，还有代数与线性变换的对应关系。 点积与顺序无关。 为什么点积和投影有所联系？——对偶性。 一个 1×21×21×2 矩阵 和 二维向量 似乎就是放倒和立起来的关系，但就从数值表达上看没什么意义。 将向量转化为数的线性变换和这个向量本身有着某种关系。 假设还不知道点积和投影的关系： 在二维空间中放一个数轴，将二维向量直接投影到这条数轴上，这相当于定义了一个从二维向量到数的一个函数（线性变换）。 注意这个 u^\\hat uu^ 是二维空间的一个向量，只是刚好在数轴上。 接下来需要找到这个投影线性变换的矩阵。 巧合的是，基底变换后恰为 u^\\hat uu^ 的坐标，这个矩阵为 [ux,uy][u_x,u_y][ux​,uy​]。 而按照线性变换，空间中其他向量变换后的坐标为投影矩阵和这个向量相乘。 这就是为什么单位向量的点积可以解读为将向量投影到单位向量所在的直线上所得到的投影值。 注意，这里谈到的只是空间里有一个通过将空间投影到给定数轴上 来定义的线性变换。恰好这个变换是线性的，就可以用 1×21×21×2 矩阵来描述。并不是由向量数值或点积运算定义得到。 最后，无论何时，一个二维到一维的线性变换，空间中会存在唯一的向量 v 与之相关。"},{"title":"图形功能","path":"/wiki/R-notes/graphics-function/index.html","content":"高级绘图函数 向日葵花型图 sunflowerplot 以相似坐标的点作为花朵，其花瓣数目为点的个数 123456789101112131415161718192021222324252627282930313233343536## my understandx &lt;- rep(2, 10);y &lt;- rep(2, 10)sunflowerplot(x, y)x &lt;- rep(2, 10);y &lt;- rep(3, 10)sunflowerplot(x, y)x &lt;- rep(1:5, 5); y &lt;- rep(3, 25)sunflowerplot(x, y)## 实例require(stats) # for rnormrequire(grDevices)## &#x27;number&#x27; is computed automatically:sunflowerplot(iris[, 3:4])## Imitating Chambers et al, p.109, closely:sunflowerplot(iris[, 3:4], cex = .2, cex.fact = 1, size = .035, seg.lwd = .8)## orsunflowerplot(Petal.Width ~ Petal.Length, data = iris, cex = .2, cex.fact = 1, size = .035, seg.lwd = .8)sunflowerplot(x = sort(2*round(rnorm(100))), y = round(rnorm(100), 0), main = &quot;Sunflower Plot of Rounded N(0,1)&quot;)## Similarly using a &quot;xyTable&quot; argument:xyT &lt;- xyTable(x = sort(2*round(rnorm(100))), y = round(rnorm(100), 0), digits = 3)utils::str(xyT, vec.len = 20)sunflowerplot(xyT, main = &quot;2nd Sunflower Plot of Rounded N(0,1)&quot;)## A &#x27;marked point process&#x27; &#123;explicit &#x27;number&#x27; argument&#125;:sunflowerplot(rnorm(100), rnorm(100), number = rpois(n = 100, lambda = 2), main = &quot;Sunflower plot (marked point process)&quot;, rotate = TRUE, col = &quot;blue4&quot;) 饼图、箱图 饼图不宜多用，一般用于比较各部分的占比情况 箱图常用于同一类数据的比较，可以看到数据分布和数据量，有横向和纵向两种。 对于图像的颜色填充可使用rainbow()设定 12345678910111213141516171819202122232425262728293031323334require(grDevices)pie(rep(1, 24), col = rainbow(24), radius = 1)pie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)names(pie.sales)&lt;-c(&quot;Blueberry&quot;,&quot;Cherry&quot;,&quot;Apple&quot;, &quot;Boston Cream&quot;, &quot;Other&quot;, &quot;Vanilla Cream&quot;)pie(pie.sales) # default colourspie(pie.sales, density = 10, angle = 15 + 10 * 1:6)pie(pie.sales, clockwise = TRUE, main = &quot;pie(*, clockwise = TRUE)&quot;)segments(0, 0, 0, 1, col = &quot;red&quot;, lwd = 2)text(0, 1, &quot;init.angle = 90&quot;, col = &quot;red&quot;)## 另一个例子par(mfrow = c(2,2))slices &lt;- c(10,12,4,16,8) # 数据lbls &lt;- c(&quot;US&quot;,&quot;UK&quot;,&quot;Australis&quot;,&quot;Germany&quot;,&quot;France&quot;) # 标签数据pie(slices,lbls) # 基本饼图pct &lt;- round(slices/sum(slices)*100) # 数据比例lbls2 &lt;- paste(lbls,&quot; &quot;,pct ,&quot;%&quot;,sep = &quot;&quot;)pie(slices,labels = lbls2,col = rainbow(length(lbls2)), # rainbow是一个彩虹色调色板 main = &quot;Pie Chart with Percentages&quot;)library(plotrix)pie3D(slices,labels=lbls,explode=0.1,main=&quot;3D pie chart&quot;) # 三维饼图mytable &lt;- table (state.region)lbls3 &lt;- paste(names(mytable),&quot; &quot;,mytable,sep = &quot;&quot;)pie(mytable,labels = lbls3, main = &quot;pie chart from a table (with sample sizes&quot;) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354boxplot(mtcars$mpg,main=&quot;Box plot&quot;, ylab =&quot;Miles per Gallon&quot;) # 标准箱线图boxplot(mpg ~ cyl,data= mtcars, main=&quot;car milesge data&quot;, xlab= &quot;Number of cylinders&quot;, ylab= &quot;Miles per Gallon&quot;)boxplot(mpg ~ cyl,data= mtcars, notch=TRUE, # 含有凹槽的箱线图 varwidth = TRUE, # 宽度和样本大小成正比 col= &quot;red&quot;, main=&quot;car milesge data&quot;, xlab= &quot;Number of cylinders&quot;, ylab= &quot;Miles per Gallon&quot;)mtcars$cyl.f&lt;- factor(mtcars$cyl, # 转换成因子结构 levels= c(4,6,8), labels = c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;))mtcars$am.f &lt;- factor(mtcars$am,levels = c(0,1), labels = c(&quot;auto&quot;,&quot;standard&quot;))boxplot(mpg~ am.f*cyl.f, # 分组的箱线图 data = mtcars, varwidth=TRUE, col= c(&quot;gold&quot;,&quot;darkgreen&quot;), main= &quot;MPG Distribution by Auto Type&quot;, xlab=&quot;Auto Type&quot;, ylxb=&quot;Miles per Gallon&quot;)boxplot(len ~ dose, data = ToothGrowth, boxwex = 0.25, at = 1:3 - 0.2, subset = supp == &quot;VC&quot;, col = &quot;yellow&quot;, main = &quot;Guinea Pigs&#x27; Tooth Growth&quot;, xlab = &quot;Vitamin C dose mg&quot;, ylab = &quot;tooth length&quot;, xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = &quot;i&quot;)boxplot(len ~ dose, data = ToothGrowth, add = TRUE, boxwex = 0.25, at = 1:3 + 0.2, subset = supp == &quot;OJ&quot;, col = &quot;orange&quot;)legend(2, 9, c(&quot;Ascorbic acid&quot;, &quot;Orange juice&quot;), fill = c(&quot;yellow&quot;, &quot;orange&quot;))boxplot(len ~ dose:supp, data = ToothGrowth, boxwex = 0.5, col = c(&quot;orange&quot;, &quot;yellow&quot;), main = &quot;Guinea Pigs&#x27; Tooth Growth&quot;, xlab = &quot;Vitamin C dose mg&quot;, ylab = &quot;tooth length&quot;, sep = &quot;:&quot;, lex.order = TRUE, ylim = c(0, 35), yaxs = &quot;i&quot;) stripchart() 将x画在一条直线上 对于数据量较小时可以作为箱型图的替代 stripchart(x, data = NULL, dlab = NULL, ...,subset, na.action = NULL) 12345678910111213141516x &lt;- stats::rnorm(50)xr &lt;- round(x, 1)stripchart(x) ; m &lt;- mean(par(&quot;usr&quot;)[1:2])text(m, 1.04, &quot;stripchart(x, \\&quot;overplot\\&quot;)&quot;)stripchart(xr, method = &quot;stack&quot;, add = TRUE, at = 1.2)text(m, 1.35, &quot;stripchart(round(x,1), \\&quot;stack\\&quot;)&quot;)stripchart(xr, method = &quot;jitter&quot;, add = TRUE, at = 0.7)text(m, 0.85, &quot;stripchart(round(x,1), \\&quot;jitter\\&quot;)&quot;)stripchart(decrease ~ treatment, main = &quot;stripchart(OrchardSprays)&quot;, vertical = TRUE, log = &quot;y&quot;, data = OrchardSprays)stripchart(decrease ~ treatment, at = c(1:8)^2, main = &quot;stripchart(OrchardSprays)&quot;, vertical = TRUE, log = &quot;y&quot;, data = OrchardSprays) coplot(x~y|z)给定z绘制(x,y)的散点图 12345678910111213141516171819202122232425262728293031## Tonga Trench Earthquakescoplot(lat ~ long | depth, data = quakes)given.depth &lt;- co.intervals(quakes$depth, number = 4, overlap = .1)coplot(lat ~ long | depth, data = quakes, given.v = given.depth, rows = 1)## Conditioning on 2 variables:ll.dm &lt;- lat ~ long | depth * magcoplot(ll.dm, data = quakes)coplot(ll.dm, data = quakes, number = c(4, 7), show.given = c(TRUE, FALSE))coplot(ll.dm, data = quakes, number = c(3, 7), overlap = c(-.5, .1)) # negative overlap DROPS values## given two factorsIndex &lt;- seq(length = nrow(warpbreaks)) # to get nicer default labelscoplot(breaks ~ Index | wool * tension, data = warpbreaks, show.given = 0:1)coplot(breaks ~ Index | wool * tension, data = warpbreaks, col = &quot;red&quot;, bg = &quot;pink&quot;, pch = 21, bar.bg = c(fac = &quot;light blue&quot;))## Example with empty panels:win.graph()with(data.frame(state.x77), &#123;coplot(Life.Exp ~ Income | Illiteracy * state.region, number = 3, panel = function(x, y, ...) panel.smooth(x, y, span = .8, ...))## y ~ factor -- not really sensible, but &#x27;show off&#x27;:coplot(Life.Exp ~ state.region | Income * state.division, panel = panel.smooth)&#125;) interaction.plot(f1, f2, y, fun=mean) 以f1(因子)为横坐标，fun(y|f2)为纵坐标绘制相应的f2(因子)的图像 123456789101112131415161718require(graphics)with(ToothGrowth, &#123;interaction.plot(dose, supp, len, fixed = TRUE)dose &lt;- ordered(dose)interaction.plot(dose, supp, len, fixed = TRUE, col = 2:3, leg.bty = &quot;o&quot;)interaction.plot(dose, supp, len, fixed = TRUE, col = 2:3, type = &quot;p&quot;)&#125;)with(OrchardSprays, &#123; interaction.plot(treatment, rowpos, decrease) interaction.plot(rowpos, treatment, decrease, cex.axis = 0.8) ## order the rows by their mean effect rowpos &lt;- factor(rowpos, levels = sort.list(tapply(decrease, rowpos, mean))) interaction.plot(rowpos, treatment, decrease, col = 2:9, lty = 1)&#125;) matplot() 二元图，x的第一列对应y的第一列，以此类推绘制图像 12345x &lt;- matrix(rep(1:10, 5), ncol = 5)y &lt;- matrix(seq(50), ncol = 5)matplot(x, y, type = &quot;l&quot;, lty = 1:5, col=rainbow(30), lwd = 2) dotchar(x) x为数据框，点图(逐行逐列累加图) dotchart(x, labels = NULL, groups = NULL, gdata = NULL,cex = par(&quot;cex&quot;), pt.cex = cex,pch = 21, gpch = 21, bg = par(&quot;bg&quot;),color = par(&quot;fg&quot;), gcolor = par(&quot;fg&quot;),lcolor = &quot;gray&quot;,xlim = range(x[is.finite(x)]), main = NULL, xlab = NULL, ylab = NULL, ...) 具体可参见： https://blog.csdn.net/moxigandashu/article/details/53383041 12345678910111213141516171819202122232425262728## 例1dotchart(VADeaths, main = &quot;Death Rates in Virginia - 1940&quot;)op &lt;- par(xaxs = &quot;i&quot;) # 0 -- 100%dotchart(t(VADeaths), xlim = c(0,100), main = &quot;Death Rates in Virginia - 1940&quot;)par(op)## 例2 dotchart(mtcars$mpg,labels = row.names(mtcars),cex= .7, main = &quot;Gas Mileage for Car Models&quot;, xlab = &quot;Miles Per gallon&quot;)x &lt;- mtcars[order(mtcars$mpg),] #按照mpg排序x$cyl &lt;-factor(x$cyl) #将cyl变成因子数据结构类型x$color[x$cyl==4] &lt;-&quot;red&quot; #新建一个color变量，油缸数cyl不同，颜色不同x$color[x$cyl==6] &lt;-&quot;blue&quot;x$color[x$cyl==8] &lt;-&quot;darkgreen&quot;dotchart(x$mpg, #数据对象 labels = row.names(x), #标签 cex = .7,#字体大小 groups = x$cyl, #按照cyl分组 gcolor = &quot;black&quot;, #分组颜色 color = x$color, #数据点颜色 pch = 19,#点类型 main = &quot;Gas Mileage for car modes grouped by cylinder&quot;, #标题 xlab = &quot;miles per gallon&quot;) #x轴标签 pairs(x) 1234## 基础用法pairs(iris[1:4], main = &quot;Anderson&#x27;s Iris Data -- 3 species&quot;, pch = 21, bg = c(&quot;red&quot;, &quot;green3&quot;, &quot;blue&quot;)[unclass(iris$Species)]) 直方图 hist(x, ...) 12345678910111213141516171819202122232425262728par (mfrow = c(2,2)) # 设置四幅图片一起显示hist(mtcars$mpg) # 基本直方图hist(mtcars$mpg, breaks = 12, # 指定组数 col= &quot;red&quot;, # 指定颜色 xlab = &quot;Miles per Gallon&quot;, main = &quot;colored histogram with 12 bins&quot;)hist(mtcars$mpg, freq = FALSE, # 表示不按照频数绘图 breaks = 12, col = &quot;red&quot;, xlab = &quot;Miles per Gallon&quot;, main = &quot;Histogram,rug plot,density curve&quot;)rug(jitter(mtcars$mpg)) # 添加轴须图lines(density(mtcars$mpg),col= &quot;blue&quot;,lwd=2) #添加密度曲线x &lt;-mtcars$mpgh &lt;-hist(x,breaks = 12, col = &quot;red&quot;, xlab = &quot;Miles per Gallon&quot;, main = &quot;Histogram with normal and box&quot;)xfit &lt;- seq(min(x),max(x),length=40)yfit &lt;-dnorm(xfit,mean = mean(x),sd=sd(x))yfit &lt;- yfit *diff(h$mids[1:2])*length(x)lines(xfit,yfit,col=&quot;blue&quot;,lwd=2) # 添加正态分布密度曲线box() # 添加方框 条形图 barplot() 123456789101112library(vcd)counts &lt;- table(Arthritis$Improved) ## 引入vcd包只是想要Arthritis中的数据barplot(counts,main = &quot;bar plot&quot;,xlab = &quot;improved&quot;,ylab = &quot;counts&quot;)barplot(counts,main = &quot; horizontal bar plot&quot;, xlab = &quot;frequency&quot;, ylab = &quot;improved&quot;, horiz = TRUE) ## horizon值默认是FALSE，为TRUE的时候表示图形变为水平的 星图 stars() stars(x,full=TRUE,scale=TRUE,key.loc=NULL,draw.segments=FALSE,…) 参数x是矩阵或者是数据框，按照矩阵的行变量进行绘制。对每个标准量单独标准化之后绘制星图。draw.segments=TRUE制定画出弧形 1234567891011121314151617181920212223x &lt;- c(-1.9,-12.7,5.7,6.6,0.3,4.2,15.8,18.5,7.8,10.8, -0.9,-8.1,5.6,6.5,3.9,5.81,7.3,20.5,9.0,13.2, 8.0,0.5,11.1,12.7,11.5,12.8,17.9,21.8,13.3,15.9, 13.5,8.0,16.6,19.3,17.1,19.0,23.6,26.7,19.2,18.0, 20.4,18.3,20.8,22.7,21.8,23.9,25.3,28.3,22.9,18.0, 25.9,21.6,25.6,26.0,27.8,28.4,27.8,29.4,25.4,20.4, 25.9,24.2,29.4,30.0,27.1,30.2,29.8,30.0,31.0,21.3, 26.4,24.3,30.2,30.0,26.1,29.7,29.4,28.5,32.4,20.6, 21.8,17.5,23.9,24.3,21.2,24.0,27.0,27.4,24.8,18.3, 16.1,11.6,22.1,22.1,19.0,21.0,26.4,27.1,20.6,16.9, 6.7,0.8,15.7,15.0,10.8,14.0,21.9,25.3,14.6,13.2, 1.0,6.7,8.2,8.1,3.0,6.8,16.0,20.8,9.4,9.8)x &lt;- matrix(x, ncol = 10, nrow = 12, byrow = T)cnames &lt;- c(&quot;北京&quot;,&quot;沈阳&quot;,&quot;上海&quot;,&quot;南昌&quot;,&quot;郑州&quot;,&quot;武汉&quot;,&quot;广州&quot;,&quot;海口&quot;,&quot;重庆&quot;,&quot;昆明&quot;)rnames &lt;- paste0(1:12,&quot;月&quot;,seq=&quot;&quot;)colnames(x) &lt;- cnamesrownames(x) &lt;- rnamesstars(x)stars(x,key.loc=c(10,2,4),cex=0.8)stars(t(x),full=FALSE,draw.segments=TRUE,key.loc=c(10,3,5),cex=0.8) 绘图选项 add=FALSE :若为TRUE则叠加一个图形在前一个图上(注意坐标系的位置和尺度可能不一样) axes=TRUE :若为FALSE则不绘制轴和边框 type=&quot;p&quot; :制定图形类型(plot)，“P”：点、“l”：线、“b”：点连线、“o”：点连线，线在点上、“h”：垂直线、“s”：阶梯式，垂直线顶端显示数据、“S”：阶梯式，垂直线低端显示数据 xlim=,ylim=:指定轴的上下限 xlab=,ylab=:坐标轴标签，必须为字符型值 main=:主标题，字符型值 sub: 副标题(小字体)"},{"title":"参数估计","path":"/wiki/R-notes/parameter-estimation/index.html","content":"矩法估计和极大似然估计 矩法估计 无固定的函数，矩估计需自行构造统计量，并计算相关数据 例： 1234X&lt;-sample(c(1,0), 20, replace = T, prob = c(0.6, 0.4))theta &lt;- mean(X)t &lt;- theta/(1-theta) # 构造的t统计量t 在这里插入图片描述 极大似然估计 需自行求解出(对数)极大似然函数，可以使用optimize()函数求解极大值和极大值点。多参数时可使用optim()或nlm() optimize(f = , interval = ,lower = min(interval), upper = max(interval), maximum = T, tol = .Machine$dobule.eps^&#123;0.25&#125;, \\cdots 例： 12f &lt;- function(p)(p^517)*(1-p)^483optimize(f, c(0,1), maximum = T) 在这里插入图片描述 单正态总体参数的区间估计 均值μ\\muμ的区间估计 方差σ2\\sigma^2σ2已知时μ\\muμ的置信区间 这种情况下R语言中没有相关内置函数，以下给出方差σ2\\sigma^2σ2已知时μ\\muμ的置信区间估计的R语言函数。 1234567891011121314151617181920z.test &lt;- function(x, n, sigma, alpha=0.05, u0=0, alternative=&quot;two.side&quot;)&#123; mean &lt;- mean(x) z &lt;- (mean-u0)/(sigma/sqrt(n)) p &lt;- pnorm(z, lower.tail = F) mean &lt;- mean z &lt;- z p.value &lt;- p if(alternative ==&quot;two.side&quot;)&#123; p.value &lt;- 2*pnorm(abs(z), lower.tail = F) &#125;else&#123; p.value &lt;- pnorm(z) &#125; conf.int &lt;- c( mean-sigma*qnorm(1-alpha/2, mean=0, sd=1, lower.tail = T)/sqrt(n), mean+sigma*qnorm(1-alpha/2, mean=0, sd=1, lower.tail = T)/sqrt(n) ) out &lt;- list(mean=mean, z=z, p.value=p.value, conf.int=conf.int)&#125; 验证一个例子 123x &lt;- c(175, 176, 173, 175, 174, 173, 173, 176, 173, 179)result &lt;-z.test(x, 10, 1.5, 0.05)result 在这里插入图片描述 方差σ2\\sigma^2σ2未知时μ\\muμ的置信区间 此时R语言中有内置函数t.test() 例： 123x &lt;- c(175, 176, 173, 175, 174, 173, 173, 176, 173, 179)result &lt;-t.test(x)result 在这里插入图片描述 方差σ2\\sigma^2σ2的区间估计 讨论μ\\muμ未知，此种情况R语言中依然没有内置函数求解方差σ2\\sigma^2σ2的区间估计，给出函数chisq.var.test如下 1234567891011121314151617181920chisq.var.test &lt;- function(x, var, alpha, alternative = &quot;two.side&quot;)&#123; n &lt;- length(x) v &lt;- var(x) chi &lt;- (n-1)*v/var p.value &lt;- pchisq(chi, n-1) if(alternative==&quot;less&quot;)&#123; p.value &lt;- pchisq(chi, n-1, lower.tail = F) &#125;else if(alternative==&quot;two.side&quot;)&#123; p.value &lt;- 2*min(pchisq(chi, n-1), pchisq(chi, n-1, lower.tail = F)) &#125; conf.int &lt;- c( (n-1)*v/qchisq(alpha/2, df=n-1, lower.tail = F), (n-1)*v/qchisq(alpha/2, df=n-1, lower.tail = T) ) out &lt;- list(var=v, chi2=chi, p.value=p.value, conf.int=conf.int)&#125; 给出一个验证 123x &lt;- c(175, 176, 173, 175, 174, 173, 173, 176, 173, 179)result &lt;- chisq.var.test(x , var=1.5, alpha=0.05)result 在这里插入图片描述 正态总体参数的区间估计 均值差μ1−μ2\\mu_1-\\mu_2μ1​−μ2​的置信区间 两方差都已知时两均值差的置信区间 依然没有内置函数，需给出函数two.sample.ci()，求解双侧置信区间 1234567two.sample.ci &lt;- function(x, y, conf.int = 0.95, sigma1, sagma2)&#123; alpha = 1-conf.int m &lt;- length(x); n&lt;-length(y) xbar = mean(x)-mean(y) zstar = qnorm(1-alpha/2)*sqrt((sigma1/m+sagma2/n)) xbar + c(-zstar,+zstar)&#125; 看一个例子： 1234x &lt;- c(628, 583, 510, 554, 612, 523, 530, 615)y &lt;- c(534, 433, 398, 470, 567, 480, 498, 560, 503, 426)sigma1 &lt;- 2140;sigma2&lt;-3250two.sample.ci(x, y, conf.int=0.95, sigma1, sigma2) 在这里插入图片描述 两方差都未知但相等时两均值差的置信区间 此时可以直接利用t.test()函数 123x &lt;- c(628, 583, 510, 554, 612, 523, 530, 615)y &lt;- c(534, 433, 398, 470, 567, 480, 498, 560, 503, 426)t.test(x,y,var.equal = T) 在这里插入图片描述 均值差σ12/σ22\\sigma^2_1/\\sigma^2_2σ12​/σ22​的置信区间 此时,在R中var.test()可以直接用于求两正态总体方差比的置信区间 例子： 123x &lt;- c(20.5, 19.8, 19.7, 20.4, 20.1, 20.0, 19.0, 19.9)y &lt;- c(20.7, 19.8, 19.5, 20.8, 20.4, 19.6, 20.2)var.test(x,y) 在这里插入图片描述 单总体比率ppp的区间估计 假设估计在总体中具有某种特性的个体站总体的比例，设为ppp。例如整个学校中女生占全校人数的比例，产品的不合格率，电视的收视率，政策的支持率等。这里采用一种求ppp的近似区间估计的方法， 称在样本中具有某种特征的个体站样本总数的比例为样本比例。设xxx为容量为n的样本中具有某种特征的个体数量，则样本比例为x/nx/nx/n。当总体中的样品数足够多时，xxx近似服从二项分布b(n,p)b(n,p)b(n,p)(实际上它是超几何分布)，这时总体比例可用样本比例来估计，及p^=xn\\hat p=\\frac{x}{n}p^​=nx​，且为极大似然估计。 可直接使用prop.test()对ppp进行估计与检验，这时用正态分布来近似 一个例子 ：矫正 1prop.test(38, 200, correct = T) 在这里插入图片描述 不矫正： 1prop.test(38, 200, correct = F) 在这里插入图片描述 用二项分布来近似binom.test() 1binom.test(38, 200) 在这里插入图片描述 两总体比率差pi−p2p_i-p_2pi​−p2​的区间估计 这里仍可使用函数prop.test()，这里给出的是经过连续性修正之后的结果 123like &lt;- c(478, 246)people &lt;- c(1000, 750)prop.test(like, people) 在这里插入图片描述 可自行给出函数ratio.ci() 计算没有修正的两比例之间的区间估计 12345678ratio.ci &lt;- function(x,y,n1,n2,conf.level)&#123; xbar1 &lt;- x/n1; xbar2 &lt;- y/n2 xbar &lt;- xbar1-xbar2 alpha &lt;- 1-conf.level zstar &lt;- qnorm(1-alpha/2)* (xbar1*(1-xbar1)/n1+xbar2*(1-xbar2)/n2)^(1/2) xbar+c(-zstar,+zstar)&#125; 给一个例子 1ratio.ci(478, 246, 1000, 750, conf.level = 0.95) 在这里插入图片描述 估计正态总体均值时样本容量的确定 总体方差σ2\\sigma^2σ2已知 给出自定义函数size.norm1： 1234size.norm1 &lt;- function(d, var, conf.level=0.95)&#123; alpha &lt;- 1-conf.level ((qnorm(1-alpha/2)*var^(1/2))/d)^2&#125; 给一个例子：某地区1000户，拟抽取一个简单的样本调查一个月的评价开始，要求置信水平95%，允许最大误差为2，根据经验，家庭间开支的方差为500，应抽取多少户进行调查 1size.norm1(2, 500, conf.level = 0.95) 在这里插入图片描述 总体方差σ2\\sigma^2σ2未知 给出函数size.norm2() 1234567891011size.norm2 &lt;- function(s, alpha, d, m)&#123; t0 &lt;- qt(alpha/2, m, lower.tail = F) n0 &lt;- (t0*s/d)^2 t1 &lt;- qt(alpha/2, n0, lower.tail = F) n1 &lt;- (t1*s/d)^2 while(abs(n1-n0)&gt;0.5)&#123; n0 &lt;- (qt(alpha/2, n1, lower.tail = F)*s/d)^2 n1 &lt;- (qt(alpha/2, n0, lower.tail = F)*s/d)^2 &#125; n1&#125; 给一个例子： 某公司生产了一批新产品，产品总体服从正态分布，现要估计这批产品的平均重量，最大允许误差2，样本标准差s=10s=10s=10，试问α=0.01\\alpha=0.01α=0.01下要抽多少样本 1size.norm2(10, 0.01, 2, 100) 在这里插入图片描述 估计比例ppp时样本容量的确定 同样给出自定义函数size.bin &lt;- f() 1234size.bin &lt;- function(d, p, conf.level = 0.95)&#123; alpha = 1 - conf.level ((qnorm(1-alpha/2))/d)^2*p*(1-p)&#125; 例 ：某市一所重点大学历届毕业生就业率为90%，估计应用毕业生就业率，要求估计误差不超过3%，试问α=0.05\\alpha=0.05α=0.05下要抽取应届毕业生多少人？ 1size.bin(0.03, 0.9, 0.95) 在这里插入图片描述"},{"title":"概率分布","path":"/wiki/R-notes/probability-distribution/index.html","content":"随机抽样 sample(x, size, replace = FALSE, prob = NULL) 1sample(c(&quot;成功&quot;, &quot;失败&quot;), 10, replace = T, prob = c(0.9, 0.1)) 排列组合与概率的计算 prod() 返回连乘积 choose() 返回取法的数目 121/prod(52:49)1/choose(52,49) 部分概率分布 二项分布：binom(n,p) 分布律： f(x∣n,p)=(nx)px(1−p)n−xf(x|n,p)=\\begin{pmatrix}n\\\\x\\end{pmatrix}p^x(1-p)^{n-x} f(x∣n,p)=(nx​)px(1−p)n−x 数字特征：E(X)=np,var(X)=np(1−p)E(X)=np,var(X)=np(1-p)E(X)=np,var(X)=np(1−p) dbinom(x, size, prob, log = FALSE) pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE) qbinom(p, size, prob, lower.tail = TRUE, log.p = FALSE) rbinom(n, size, prob) 正态分布：norm(μ\\muμ,σ2\\sigma^2σ2) 密度函数： f(x∣μ,σ)=12πσe(x−μ)22σ2f(x|\\mu,\\sigma)=\\frac{1}{\\sqrt{2\\pi}\\sigma}e^{\\frac{(x-\\mu)^2}{2\\sigma^2}} f(x∣μ,σ)=2π​σ1​e2σ2(x−μ)2​ 数字特征：E(X)=μ,var(X)=σ2 E(X)=\\mu,var(X)=\\sigma^2 E(X)=μ,var(X)=σ2 dnorm(x, mean = 0, sd = 1, log = FALSE) pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) rnorm(n, mean = 0, sd = 1) 泊松分布：pois(λ\\lambdaλ) 分布律： f(x∣λ)=λxx!e−λf(x|\\lambda)=\\frac{\\lambda^x}{x!}e^{-\\lambda} f(x∣λ)=x!λx​e−λ 数字特征：$$E(X)=\\lambda,var(X)=\\lambda$$ dpois(x, lambda, log = FALSE) ppois(q, lambda, lower.tail = TRUE, log.p = FALSE) qpois(p, lambda, lower.tail = TRUE, log.p = FALSE) rpois(n, lambda) 均匀分布：unif(a,b) 密度函数： f(x∣a,b)=1b−af(x|a,b)=\\frac{1}{b-a} f(x∣a,b)=b−a1​ 数字特征： E(X)=a+b2,var(X)=b2−a212E(X)=\\frac{a+b}{2},var(X)=\\frac{b^2-a^2}{12} E(X)=2a+b​,var(X)=12b2−a2​ dunif(x, min = 0, max = 1, log = FALSE) punif(q, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE) qunif(p, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE) runif(n, min = 0, max = 1) 12345require(DAAG)data(possum)fpossum &lt;- possum[possum$sex==&quot;f&quot;, ]var(fpossum$totlngth)mad(fpossum$totlngth)^2"},{"title":"ARMA(1,1)和AR(2)自相关函数的R语言实现","path":"/wiki/Time-series-notes/deterministic-trend/index.html","content":"ARMA(1,1)模型 ARMA(1,1)模型的自相关函数 模型定义的方程是： Yt=ϕYt−1+et−θet−1Y_t=\\phi Y_{t-1}+e_t-\\theta e_{t-1} Yt​=ϕYt−1​+et​−θet−1​ 为得到Yule-Walk形式的方程组，首先： E(etYt)=E(et(ϕYt−1+et−θet−1))=σe2E(e_tY_t)=E(e_t(\\phi Y_{t-1}+e_t-\\theta e_{t-1}))=\\sigma^2_e E(et​Yt​)=E(et​(ϕYt−1​+et​−θet−1​))=σe2​ 或 E(et−1Yt)=E(et−1(ϕYt−1+et−θet−1))=(ϕ−θ)σe2E(e_{t-1}Y_t)=E(e_{t-1}(\\phi Y_{t-1}+e_t-\\theta e_{t-1}))=(\\phi-\\theta)\\sigma^2_e E(et−1​Yt​)=E(et−1​(ϕYt−1​+et​−θet−1​))=(ϕ−θ)σe2​ 在其定义式两边乘以Yt−kY_{t-k}Yt−k​并求期望值，得到： γ0=ϕγ1+[1−θ(ϕ−θ)σe2]γ1=ϕγ0−θσe2γk=ϕγk−1}\\left.\\begin{aligned} \\gamma_0 &amp; =\\phi\\gamma_1+[1-\\theta(\\phi-\\theta)\\sigma^2_e]\\\\ \\gamma_1 &amp; = \\phi\\gamma_0-\\theta\\sigma^2_e\\\\ \\gamma_k &amp; =\\phi\\gamma_{k-1} \\end{aligned} \\right \\} γ0​γ1​γk​​=ϕγ1​+[1−θ(ϕ−θ)σe2​]=ϕγ0​−θσe2​=ϕγk−1​​⎭⎪⎪⎬⎪⎪⎫​ 求解前两个方程得到： γ0=1−2ϕθ+θ21−ϕ2σe2\\gamma_0=\\frac{1-2\\phi\\theta+\\theta^2}{1-\\phi^2}\\sigma^2_e γ0​=1−ϕ21−2ϕθ+θ2​σe2​ 进一步通过递推关系式，得到: ρk=(1−θϕ)(ϕ−θ)1−2ϕθ+θ2ϕk−1，k&gt;1\\rho_k=\\frac{(1-\\theta\\phi)(\\phi-\\theta)}{1-2\\phi\\theta+\\theta^2}\\phi^{k-1}，k&gt;1 ρk​=1−2ϕθ+θ2(1−θϕ)(ϕ−θ)​ϕk−1，k&gt;1 值得注意的是，随着之后长度kkk的增加，该模型的相关函数指数递减。相关函数的初始值 ρ0=0\\rho_0=0ρ0​=0，从 ρk\\rho_kρk​ 的递推式中可以看到，它的形状依赖于 ρ1\\rho_1ρ1​ 和 ϕ\\phiϕ 的符号。 ARMA(1,1)模型自相关函数的R语言函数 按照前述中的递推式可构造求解ARMA(1,1)模型自相关函数并画出其自相关图像的函数 ARMA1.1 &lt;- function(phi=phi, theta=theta, max.lag=20, pic=T, ylim=NULL) 12345678910111213ARMA1.1 &lt;- function(phi=phi, theta=theta, max.lag=20, pic=T, ylim=NULL)&#123; rho = NULL rho[1] &lt;- 1 for (k in 1:max.lag) &#123; rho[k+1] &lt;- (1-theta*phi)*(phi-theta)/(1-2*theta*phi+theta^2)*phi^(k-1) &#125; if(pic == T)&#123; plot(x = 1:max.lag, y = rho[-1], type = &quot;h&quot;, xlab = &quot;Lag&quot;, ylab = &quot;ACF&quot;, ylim = ylim) abline(h=0) &#125; out &lt;- list(phi = phi, theta = theta, rho = rho)&#125; 该函数包含五个参数: phi ARMA(1,1)模型中自回归部分的系数，即ϕ\\phiϕ. theta ARMA(1,1)模型中滑动平均部分的系数，即θ\\thetaθ. max.lag ARMA(1,1)模型中需要求解的最大滞后长度k，默认为k=20k=20k=20. pic 逻辑值，pic=T时绘制自相关函数图像，默认pic=T. ylim 一个二维的向量，作为绘制自相关函数图像的纵坐标范围，默认为ylim=NULL 该函数的输出为一个列表，其中phi为输入的 phi，theta 为输入的 theta，rho 为计算所得的max.lag+1个自相关函数（第一个为 ρ0=1\\rho_0=1ρ0​=1）。 AR(2)模型 AR(2)模型的自相关函数 模型定义的方程是： Yt=ϕ1Yt−1+ϕ2Yt−2+etY_t=\\phi_1Y_{t-1}+\\phi_2Y_{t-2}+e_t Yt​=ϕ1​Yt−1​+ϕ2​Yt−2​+et​ 为推导其自相关函数，在其两边乘上Yt−kY_{t-k}Yt−k​，并求期望。假定平稳、零均值，并且ete_tet​独立于Yt−1Y_{t-1}Yt−1​,得到： γk=ϕ1γk−1+ϕ2γk−2，k=1,2,3,⋯\\gamma_k=\\phi_1\\gamma_{k-1}+\\phi_2\\gamma_{k-2}，k=1,2,3,\\cdots γk​=ϕ1​γk−1​+ϕ2​γk−2​，k=1,2,3,⋯ 两边再除以γ0\\gamma_0γ0​， ρk=ϕ1ρk−1+ϕ2ρk−2，k=1,2,3,⋯\\rho_k=\\phi_1\\rho_{k-1}+\\phi_2\\rho{k-2}，k=1,2,3,\\cdots ρk​=ϕ1​ρk−1​+ϕ2​ρk−2，k=1,2,3,⋯ 称上述方程为Yule-Walker方程。 下面需求解 k=1k=1k=1 和 k=2k=2k=2 时对应的ρ\\rhoρ值。首先令 k=1k=1k=1，因 ρ0=1，ρ−1=ρ1\\rho_0=1，\\rho_{-1}=\\rho_1ρ0​=1，ρ−1​=ρ1​，得到 ρ1=ϕ1+ϕ2ρ2\\rho_1=\\phi_1+\\phi_2\\rho_2ρ1​=ϕ1​+ϕ2​ρ2​ ，整理得： ρ1=ϕ11−ϕ2\\rho_1=\\frac{\\phi_1}{1-\\phi_2} ρ1​=1−ϕ2​ϕ1​​ 再令 k=2k=2k=2，将上式带入Yule-Walker方程中，得出 ρ2=ϕ2(1−ϕ2)+ϕ121−ϕ2\\rho_2=\\frac{\\phi_2(1-\\phi_2)+\\phi_1^2}{1-\\phi_2} ρ2​=1−ϕ2​ϕ2​(1−ϕ2​)+ϕ12​​ 至此我们可以通过Yule-Walker方程求出AR(2)模型的自相关函数。 下面在给出计算ρk\\rho_kρk​的显示表达： ρk=(1−G22)G1k+1−(1−G12)G2k+1(G1−G2)(1+G1G2)，k≥0\\rho_k=\\frac{(1-G^2_2)G^{k+1}_1-(1-G^2_1)G^{k+1}_2}{(G_1-G_2)(1+G_1G_2)}，k\\ge 0 ρk​=(G1​−G2​)(1+G1​G2​)(1−G22​)G1k+1​−(1−G12​)G2k+1​​，k≥0 其中，G1=ϕ−ϕ12+4ϕ22G1=\\frac{\\phi-\\sqrt{\\phi^2_1+4\\phi_2}}{2}G1=2ϕ−ϕ12​+4ϕ2​​​、G2=ϕ+ϕ12+4ϕ22G2=\\frac{\\phi+\\sqrt{\\phi^2_1+4\\phi_2}}{2}G2=2ϕ+ϕ12​+4ϕ2​​​ 特别地，当ϕ12+4ϕ2&lt;0\\phi^2_1+4\\phi_2&lt;0ϕ12​+4ϕ2​&lt;0时，其可表示为： ρk=Rksin(θk+Φ)sin(ϕ)，k≥0\\rho_k=R^k\\frac{sin(\\theta k+\\Phi)}{sin(\\phi)}，k\\ge 0 ρk​=Rksin(ϕ)sin(θk+Φ)​，k≥0 其中，R=−ϕ2R=\\sqrt{-\\phi_2}R=−ϕ2​​ 为阻尼因子，θ=arccos(ϕ1/(2−ϕ2))\\theta=arccos(\\phi_1/(2\\sqrt{-\\phi_2}))θ=arccos(ϕ1​/(2−ϕ2​​)) 为频率，ϕ=arctan[(1−ϕ2)/(1+ϕ2)]\\phi=arctan[(1-\\phi_2)/(1+\\phi_2)]ϕ=arctan[(1−ϕ2​)/(1+ϕ2​)] AR(2)模型自相关函数的R语言函数 按照前述中的递推式可构造求解AR(2)模型自相关函数并画出其自相关图像的函数 AR2 &lt;- function(phi1=phi1, phi2=phi2, max.lag = 20, pic = T, ylim=c(-1,1))，此函数还可求出其特征根为复数时的阻尼因子RRR和Θ\\ThetaΘ。 12345678910111213141516171819202122232425262728293031AR2 &lt;- function(phi1=phi1, phi2=phi2, max.lag = 20, pic = T, ylim=c(-1,1))&#123; rho = NULL;root=NULL; rho1 &lt;- phi1/(1-phi2) rho2 &lt;- (phi2*(1-phi2)+phi1^2)/(1-phi2) rho[1] &lt;- rho1 rho[2] &lt;- rho2 for (k in 3:max.lag) &#123; rho[k] &lt;- phi1*rho[k-1]+phi2*rho[k-2] &#125; if(pic == T)&#123; plot(x = 1:max.lag, y = rho, type = &quot;h&quot;, xlab = &quot;Lag&quot;, ylab = &quot;ACF&quot;, ylim = ylim) abline(h=0) &#125; if(phi1^2+4*phi2 &lt; 0)&#123; root1 &lt;- (phi1+sqrt(as.complex(phi1^2+4*phi2)))/(-2*phi2) root2 &lt;- (phi1-sqrt(as.complex(phi1^2+4*phi2)))/(-2*phi2) R &lt;- sqrt(-phi2) Theta &lt;- acos(phi1/2*sqrt(-phi2)) &#125;else&#123; root1 &lt;- (phi1+sqrt(phi1^2+4*phi2))/(-2*phi2) root2 &lt;- (phi1-sqrt(phi1^2+4*phi2))/(-2*phi2) R &lt;- NULL Theta &lt;-NULL &#125; out &lt;- list(phi=c(phi1,phi2), rho = rho, root = c(root1, root2), R = R, Theta = Theta)&#125; 该函数包含五个参数: phi1,phi2 AR(2)模型中的两个参数，即ϕ1，ϕ2\\phi_1，\\phi_2ϕ1​，ϕ2​. max.lag AR(2)模型中需要求解的最大滞后长度k，默认为k=20k=20k=20. pic 逻辑值，pic=T时绘制自相关函数图像，默认pic=T. ylim 一个二维的向量，作为绘制自相关函数图像的纵坐标范围，默认为ylim=c(-1,1) 该函数的输出为一个列表，其中phi为输入的phi为输入的两个参数，rho为计算所得的max.lag个自相关函数，root为特征方程的两个根，R为阻尼系数，Theta为频率。"},{"title":"搭建 Git 服务器","path":"/wiki/git/git-server/index.html","content":"网上相关教程挺多，但是步骤略繁琐，本文将借助 Gitblit 开源工具使用最简单的方式搭建和维护 Git 服务器，支持 Linux、Windows、Mac 平台。 服务器搭建 安装 JDK 下载并安装 JDK：https://www.oracle.com/java/technologies/javase-downloads.html 安装并配置 Gitblit 下载 Gitblit：https://github.com/gitblit/gitblit 解压 Gitblit，进入目录 ~/gitblit-1.8.0/data/defaults.properties 用编辑器打开 defaults.properties 12git.repositoriesFolder = /Users/用户名/gitserver/gitRepositoryserver.httpPort = 7070 启动服务 在终端中执行 gitblit.sh 脚本即可启动服务： 1./gitblit.sh 建议设置开机自启动通过 Mac 的自动化工具，将启动指令写成脚本，系统启动后自动运行脚本即可。Windows 平台可以添加到启动计划任务中。 客户端访问 用服务器 IP + 端口号来访问。例如我的电脑的 IP 是 10.8.12.200，那么在局域网内另外一台电脑访问 http://10.8.12.200:7070 就可以看到管理页面了： 网页操作和使用 GitHub、Coding 等平台相似，非常简单。"},{"title":"使用 GitHub","path":"/wiki/git/github/index.html","content":"fork &amp; pull request fork 操作相当于把别人的 git 仓库克隆到自己账号中。 pull request 则可以将自己 fork 过来的仓库中的修改合并到原仓库中，实现团队协作。 静态页面持续集成 1. 生成 SSH Key 打开 terminal 输入下面的命令生成 id_rsa 和 id_rsa.pub 文件： 1ssh-keygen -t rsa -C me@xxx.com 其中 me@xxx.com 就是 GitHub 账号的邮箱。 2. 填写 Deploy Keys 和 Secrets 打开源码仓库，在设置中找到「Secrets」第 1/3 步：添加 DEPLOY_KEY 内容是 id_rsa 文件的全部内容。第 2/3 步：添加 EMAIL 内容是 GitHub 邮箱。第 3/3 步：添加 NAME 内容是 GitHub 账号名。打开 deploy 目标仓库，在设置中找到「Deploy Keys」第 1/1 步：添加 deploy_key.pub 内容是 id_rsa.pub 文件的全部内容。 3. 在 GitHub 上添加 Actions 在 GitHub 上添加 Actions 内容为： .github/workflows/auto-deploy.yml123456789101112131415161718192021222324252627282930313233343536name: auto deploy # workflow nameon: [push] # 触发事件jobs: build: # job1 id runs-on: ubuntu-latest # 运行环境为最新版 Ubuntu name: A job to deploy blog. steps: - name: Checkout # step1 获取源码 uses: actions/checkout@v1 # 使用 actions/checkout@v1 with: # 条件 submodules: true # Checkout private submodules(themes or something else). 当有子模块时切换分支？ # Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.) 缓存压缩 node_modules，不用每次下载，使用时解压，可以加快工作流的执行过程，超过 7 天没有使用将删除压缩包。 - name: Cache node modules # step2 uses: actions/cache@v1 id: cache with: path: node_modules key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125; restore-keys: | $&#123;&#123; runner.os &#125;&#125;-node- - name: Install Dependencies # step3 name if: steps.cache.outputs.cache-hit != &#x27;true&#x27; # 如果变量 cache-hit 不等于 true run: npm install # 安装 node modules 相关依赖 # Deploy hexo blog website. - name: Deploy # step4 id: deploy uses: sma11black/hexo-action@v1.0.0 with: deploy_key: $&#123;&#123; secrets.DEPLOY_KEY &#125;&#125; user_name: $&#123;&#123; secrets.NAME &#125;&#125; user_email: $&#123;&#123; secrets.EMAIL &#125;&#125; 4. 大功告成 您可以尝试修改一下源码库，看是否能够成功运行 Actions 。 GitHub API https://docs.github.com/en/graphql 未完待续"},{"title":"安装与配置","path":"/wiki/git/install-and-config/index.html","content":"安装 LinuxWindowsMac下载地址https://git-scm.com/download/linux 安装指定系统的依赖包： Centos/RedHat12$ yum install curl-devel expat-devel gettext-devel \\ openssl-devel zlib-devel Debian/Ubuntu12$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\ libz-dev libssl-dev 解压安装下载的源码包： 1234$ tar -zxf git-1.7.2.2.tar.gz$ cd git-1.7.2.2$ make prefix=/usr/local all$ sudo make prefix=/usr/local install 使用终端指令安装Debian/Ubuntu1234567$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\ libz-dev libssl-dev$ apt-get install git$ git --versiongit version 1.8.1.2CentOS/RedHat1234567$ yum install curl-devel expat-devel gettext-devel \\ openssl-devel zlib-devel$ yum -y install git-core$ git --versiongit version 1.7.1下载地址https://gitforwindows.org/ 完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。 在开始菜单里找到 Git -&gt; Git Bash，会弹出 Git 命令窗口，你可以在该窗口进行 Git 操作。下载地址https://git-scm.com/download/mac Mac 自带 git 并且随着系统版本的更新，自带的 git 也会升级到最新，一般无需手动安装。 配置 Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方： /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。 ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。 当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。 用户信息 12$ git config --global user.name xaoxuu$ git config --global user.email git@xaoxuu.com 如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。 如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。 查看配置信息 1234$ git config --listhttp.postbuffer=2Muser.name=xaoxuuuser.email=git@xaoxuu.com git-ssh 1ssh-keygen -t rsa -C user@example.com 其中 user@example.com 对应的是你的 Git 邮箱。 ssh-agent 是一种控制用来保存公钥身份验证所使用的私钥的程序，其实 ssh-agent 就是一个密钥管理器，运行 ssh-agent 以后，使用 ssh-add 将私钥交给 ssh-agent 保管，其他程序需要身份验证的时候可以将验证申请交给 ssh-agent 来完成整个认证过程。 1eval &quot;$(ssh-agent -s)&quot; 添加生成的 SSH key 到 ssh-agent： 1ssh-add ~/.ssh/id_rsa 登陆 Github，添加 ssh： 把 id_rsa.pub 文件里的内容复制到这里："},{"title":"基本操作入门","path":"/wiki/git/usage/index.html","content":"基本操作流程 在对代码进行了一些修改之后，使用：git add --all 将本地所有新增文件和修改内容添加到暂存区。 使用：git commit -m 备注 将代码提交到本地版本库。（备注内容没有空格的话不需要加引号） 使用：git pull origin 从服务器拉取代码，更新本地版本库。 使用：git push origin 将本地版本库推送到服务器。 克隆与配置 克隆版本库 123git clone https://github.com/xaoxuu/AXKit.git# 或者git clone https://github.com/xaoxuu/AXKit.git AXKit 配置版本库 要忽略某些文件的改动需要配置 .gitignore 文件： 123456789101112# 这是macOS文件夹属性的隐藏文件，不需要同步到git.DS_Store# 某个文件夹不想要同步到git/public/node_modules# 某个文件不想要同步到gittest.txt# 通配符._* 基本操作指令 创建与切换分支 创建并切换 branch1git checkout -b 分支名 仅仅切换 branch1git checkout 分支名 创建 tag1git tag 标签名 创建 tag 并备注1git tag -a 标签名 -m 备注信息 创建 PGP tag 并备注1git tag -s 标签名 -m 备注信息 查看分支和标签 查看本地 tag1git tag 查看某个本地 tag 详情1git show 标签名 查看本地 branch list1git branch 分支名 查看远程 branch list1git branch -r 分支名 查看所有 branch list1git branch -a 分支名 删除分支和标签 删除本地 branch / tag1git branch -d 分支名或标签名 删除所有未推送的本地 branch1git fetch -p 仅仅删除某个远程 branch / tag123git push origin :分支名或标签名# 或者git push origin --delete 分支名或标签名 推送分支和标签 推送某个 branch / tag1git push origin 分支名或标签名 推送所有 branch1git push --all origin 推送所有 tag1git push --tags 重命名分支 重命名本地分支： 1git branch -m 旧分支名 新分支名 重命名远程分支： 删除远程分支 重命名本地分支 推送本地分支 拉取、合并分支 拉取某个远程标签 1git fetch origin tag 远程标签名 合并某本地分支到当前分支 1git merge 分支名 合并某远程分支到当前分支 1git pull origin 远程分支名 代码冲突 我一般使用 Tower 客户端操作，pull 之后有冲突的文件会列出来。建议使用一个比较好的编辑器如 Atom ，有冲突的部分会用两种颜色高亮。 未完待续 代码回退 如果冲突文件没有妥善解决就提交到版本库导致严重后果，这是需要查看某个历史时刻的代码，使用： 12git log# 查看提交记录 然后 copy 某个 commit id 进行回退，回退的类型有两种： soft 这是默认的回退方式，版本库的 HEAD 回滚到某个 commit 但本地代码不变，处于未 commit 的状态。 123git reset [commit id]# 或者git reset --soft [commit id] hard HEAD 和本地代码都回到某个 commit，后面的更改将会被丢弃。（如同时光穿梭） 1git reset --hard [commit id] 版本迭代 查看本地所有标签 1git tag 把当前 HEAD 打个标签（名为：1.0） 123git tag 1.0# 也可以添加备注信息，如同commitgit tag 1.0 -m &#x27;message&#x27; 切换到某个标签（1.0） 1git checkout 1.0 把标签 push 到远程 push指定的tag1git push origin 1.0 push所有未push的tag1git push --tags 删除标签（1.0） 12345678# 删除本地taggit tag -d 1.0# 删除远程tag# 方法一：将空白tag覆盖到远程taggit push origin :1.0# 方法二：执行删除命令git push origin --delete 1.0 客户端操作 Stash save：将当前未 commit 的代码保存到 stash，并且回到上次 commit 的状态。 apply：应用某个 stash 的代码。 Git-Flow 自动化管理功能，例如： 准备开发新版本的时候：点击 Start Release，客户端会自动新建一个 release 分支。 准备增加一个新特性的时候：点击 Start Feature，客户端会新建一个 feature 分支。 需要修复 bug 的时候：点击 Start Hotfix，客户端会新建一个 fix 分支。 当修复完 bug，点击 Finish Hotfix 的时候，客户端会自动把 fix 分支合并到创建它的分支，并且创建一个 tag。 当一个新特性开发完成，点击 Finish Feature 的时候，客户端会自动把 feature 分支合并到创建它的分支，并且创建一个 tag。 当一个新版本开发完成，点击 Finish Release 的时候，客户端会自动把 release 分支合并到创建它的分支，并且创建一个 tag。"},{"title":"1/(sinx＋cosx) 的不定积分","path":"/wiki/technique/I-001/index.html","content":"关键在于变换三角函数形式，将其转化为已知积分的函数。包括但不限于，换元、辅助角、半角甚至复数。 辅助角公式换元 令： I(a,b)=∫1asin⁡x+bcos⁡xdxI(a,b)=\\int \\frac{1}{a\\sin x+b\\cos x}dx I(a,b)=∫asinx+bcosx1​dx 由辅助角公式： asin⁡x+bcos⁡x=a2+b2(aa2+b2sin⁡x+ba2+b2cos⁡x)a\\sin x+b\\cos x=\\sqrt{ a^{2}+b^{2} }\\bigg( \\frac{a}{ a^{2}+b^{2} }\\sin x+\\frac{b}{ a^{2}+b^{2} }\\cos x \\bigg) asinx+bcosx=a2+b2​(a2+b2a​sinx+a2+b2b​cosx) 设：aa2+b2=cos⁡α,ba2+b2=sin⁡α\\cfrac{a}{a^{2}+b^{2}}=\\cos\\alpha,\\cfrac{b}{a^{2}+b^{2}}=\\sin\\alphaa2+b2a​=cosα,a2+b2b​=sinα，asin⁡x+bcos⁡x=a2+b2sin⁡(x+α)a\\sin x+b\\cos x=\\sqrt{a^{2}+b^{2}}\\sin{(x+\\alpha)}asinx+bcosx=a2+b2​sin(x+α)，其中α=arctan⁡ab\\alpha=\\arctan{\\cfrac{a}{b}}α=arctanba​ 则有： I(a,b)=1a2+b2∫1sin⁡(x+α)dx=1a2+b2∫csc⁡(x+α)d(x+α)I(a,b)=\\frac{1}{a^{2}+b^{2}}\\int \\frac{1}{\\sin{(x+\\alpha)}}dx=\\frac{1}{a^{2}+b^{2}}\\int \\csc{(x+\\alpha)}d(x+\\alpha) I(a,b)=a2+b21​∫sin(x+α)1​dx=a2+b21​∫csc(x+α)d(x+α) 熟知： ∫csc⁡udu=∫sin⁡usin⁡2udu=−∫d(cos⁡u)1−cos⁡2u=−12∫(11−cos⁡u+11+cos⁡u)d(cos⁡u)=−12[−ln⁡(1−cos⁡u)+ln⁡(1+cos⁡u)+C]=ln⁡∣1−cos⁡u1+cos⁡u∣+C=ln⁡∣2sin⁡u22cos⁡u2∣+C=ln⁡∣tan⁡u2∣+C\\begin{aligned} \\int \\csc udu &amp;= \\int\\cfrac{\\sin u}{\\sin^2 u}du=-\\int\\cfrac{d(\\cos u)}{1-\\cos^2 u}\\\\ &amp;= -\\frac{1}{2}\\int(\\cfrac{1}{1-\\cos u}+\\cfrac{1}{1+\\cos u})d(\\cos u)\\\\ &amp;= -\\frac{1}{2}[-\\ln(1-\\cos u)+\\ln(1+\\cos u)+C]\\\\ &amp;= \\ln\\left|\\sqrt{\\frac{1-\\cos u}{1+\\cos u}}\\right|+C=\\ln\\left|\\sqrt{\\frac{2\\sin^ \\frac{u}{2}}{2\\cos^ \\frac{u}{2}}}\\right|+C\\\\ &amp;= \\ln\\left|\\tan\\frac{u}{2}\\right|+C \\end{aligned} ∫cscudu​=∫sin2usinu​du=−∫1−cos2ud(cosu)​=−21​∫(1−cosu1​+1+cosu1​)d(cosu)=−21​[−ln(1−cosu)+ln(1+cosu)+C]=ln∣∣∣∣∣∣​1+cosu1−cosu​​∣∣∣∣∣∣​+C=ln∣∣∣∣∣∣∣​2cos2u​2sin2u​​​∣∣∣∣∣∣∣​+C=ln∣∣∣∣​tan2u​∣∣∣∣​+C​ 故： (a,b)=1a2+b2∫∣tan⁡x+α2∣dx(a,b)=\\frac{1}{\\sqrt{ a^{2}+b^{2}}}\\int\\left|\\tan\\frac{x+\\alpha}{2} \\right| dx (a,b)=a2+b2​1​∫∣∣∣∣∣​tan2x+α​∣∣∣∣∣​dx 其中α=arctan⁡ba\\alpha = \\arctan\\cfrac{b}{a}α=arctanab​ 则有： ∫1sin⁡x+cos⁡xdx=I(1,1)=12ln⁡∣tan⁡x+π42∣\\int\\frac{1}{\\sin x+\\cos x}dx=I(1,1)=\\frac{1}{\\sqrt{2}}\\ln\\left|\\tan\\frac{x+\\frac{\\pi}{4}}{2}\\right| ∫sinx+cosx1​dx=I(1,1)=2​1​ln∣∣∣∣∣​tan2x+4π​​∣∣∣∣∣​"},{"title":"牛顿迭代法求开 n 次方","path":"/wiki/technique/I-002/index.html","content":"牛顿迭代法本身是一种对于高次多项式数值解的一种方法。考研的时候，某个学校的题竟然要手动开n次方，虽然以前背过常见的开平方的值，比如 2=1.414，3=1.732，⋯\\sqrt{2}=1.414，\\sqrt{3}=1.732，\\cdots2​=1.414，3​=1.732，⋯，但对于高次的复杂的没啥意义。 于是就想到这个方法。基本上迭代个三四次精度就很不错了。 求根式 An\\sqrt[n]{A}nA​ 的值，等同于求方程 xn−A=0x^n-A=0xn−A=0 的解，或者说是求 f(x)=xn−Af(x)=x^n-Af(x)=xn−A，求 f(x)=0f(x)=0f(x)=0 的根。 这实际上是牛顿迭代法的一个特例。形式上，计算上都要简单一些，也就为手算提供可能。 牛顿迭代法 首先，要找到一个初始值 x0x_0x0​，要尽量接近解（避免过多无效的迭代）。如果初始值 x0x_0x0​ 不是解，则过(x0,f(x0))(x_0,f(x_0))(x0​,f(x0​))点作 f(x)f(x)f(x) 的切线与 xxx 轴交于点 x1x_1x1​。若 x1x_1x1​ 不是解，则过(x1,f(x1))(x_1,f(x_1))(x1​,f(x1​))点作 f(x)f(x)f(x) 的切线与 xxx 轴交于点 x2x_2x2​，依次类推。直到 xnx_nxn​ 是方程的解，或 xnx_nxn​ 满足要求的精度。 通常用牛顿迭代法难以求到解析解，一般情况下，数值解也够了（例如：应对手动开n次方） 迭代关系式 令初始点为 (xi,f(xi))(x_i,f(x_i))(xi​,f(xi​)) ，切线方程为 f(x)=f(xi)+f′(xi)(x−xi)f(x)=f(x_i)+f&#x27;(x_i)(x-x_i)f(x)=f(xi​)+f′(xi​)(x−xi​)， 其中，f′(xi)f&#x27;(x_i)f′(xi​) 为 f(xi)f(x_i)f(xi​) 的倒数，令切线方程为0，则有： xi+1=xi−f(xi)f′(xi)x_{i+1}=x_i-\\cfrac{f(x_i)}{f&#x27;(x_i)} xi+1​=xi​−f′(xi​)f(xi​)​ 带入 f(x)=xn−Af(x)=x^n-Af(x)=xn−A，则有： xi+1=xi−xin−Anxin−1=xi−xin+Anxin−1=(n−1)xin+Anxin−1x_{i+1}=x_i-\\cfrac{x_{i}^{n}-A}{nx_i^{n-1}}=x_i-\\cfrac{x_i}{n}+\\cfrac{A}{nx_{i}^{n-1}}=\\cfrac{(n-1)x_i}{n}+\\cfrac{A}{nx_{i}^{n-1}} xi+1​=xi​−nxin−1​xin​−A​=xi​−nxi​​+nxin−1​A​=n(n−1)xi​​+nxin−1​A​ 例子 以 97.245=2.49786515707\\sqrt[5]{97.24}=2.49786515707597.24​=2.49786515707 ，求解的方程为 f(x)=x5−97.24f(x)=x^5-97.24f(x)=x5−97.24 首先确定初始值，97.245\\sqrt[5]{97.24}597.24​ 开五次方大概是 222 点多（25=32，35=2432^5=32，3^5=24325=32，35=243），那么 f(x)=x5−97.24f(x)=x^5-97.24f(x)=x5−97.24 初始值就从 x0(2,−65.24)x_0 (2,-65.24)x0​(2,−65.24) 开始，因为2，比3更接近零点。 则：x1=(n−1)x0n+Anx0n−1=(5−1)25+97.425×25−1=2.8155x_1=\\cfrac{(n-1)x_0}{n}+\\cfrac{A}{nx_{0}^{n-1}}=\\cfrac{(5-1)2}{5}+\\cfrac{97.42}{5×2^{5-1}}=2.8155x1​=n(n−1)x0​​+nx0n−1​A​=5(5−1)2​+5×25−197.42​=2.8155，则 x1=2.8155x_1=2.8155x1​=2.8155 以此类推 x2=2.562x_2=2.562x2​=2.562，x3=2.501x_3=2.501x3​=2.501，x4=2.501x_4=2.501x4​=2.501，x5=2.49787x_5=2.49787x5​=2.49787 此时迭代了 5 次，精度就很可观了。"},{"title":"可怜的小猪","path":"/wiki/technique/I-003/index.html","content":"题目 有 buckets 桶液体，其中正好有一桶含有毒药，其余装的都是水。它们从外观看起来都一样。为了弄清楚哪只水桶含有毒药，你可以喂一些猪喝，通过观察猪是否会死进行判断。不幸的是，你只有 minutesToTest 分钟时间来确定哪桶液体是有毒的。 喂猪的规则如下： 选择若干活猪进行喂养： 可以允许小猪同时饮用任意数量的桶中的水，并且该过程不需要时间。 小猪喝完水后，必须有 minutesToDie 分钟的冷却时间。在这段时间里，你只能观察，而不允许继续喂猪。 过了 minutesToDie 分钟后，所有喝到毒药的猪都会死去，其他所有猪都会活下来。 重复这一过程，直到时间用完。 给你桶的数目 buckets ，minutesToDie 和 minutesToTest ，返在规定时间内判断哪个桶有毒所需的 最小 猪数。 示例 1： 12输入：buckets = 1000, minutesToDie = 15, minutesToTest = 60输出：5 示例 2： 12输入：buckets = 4, minutesToDie = 15, minutesToTest = 15输出：2 示例 3： 12输入：buckets = 4, minutesToDie = 15, minutesToTest = 30输出：2 提示： 1 &lt;= buckets &lt;= 1000 1 &lt;= minutesToDie &lt;= minutesToTest &lt;= 100 解答"},{"title":"语言艺术","path":"/wiki/technique/II-001/index.html","content":"lab Theory is when you know everything but nothing works.Practice is when everything works but no one knows why.In our lab，theory and practice are combined: nothing works and no one knows why. 唐僧取经回来 唐僧取经回北京才下飞机，记者问：你对三陪小姐有何看法？唐僧很吃惊：北京也有三陪小姐？记者第二天登报《唐僧飞抵北京，开口便问有无三陪》记者问唐僧：你对三陪问题有何看法？唐僧：不感兴趣！记者第二天登报《唐僧夜间娱乐要求高，本地三陪小姐遭冷遇》记者问唐僧，你对三陪小姐有没有看法？唐僧很生气：什么三陪四陪五陪的？不知道！ 记者第二天登报《三陪已难满足唐僧，四陪五陪方能过瘾》记者后来再问唐僧，唐僧不发言。记者第二天登报《面对三陪问题，唐僧无言 以对》唐僧大怒，对记者说，这么乱写，我去法院告你！记者第二天登报《唐僧一怒为三陪》唐僧气急之下，将记者告到法庭。媒体争相报道《法庭将审理唐僧三陪小姐案》，唐僧看后撞墙而死。7. 唐僧撞墙而死后，媒体补充报道《为了三陪而殉情：唐僧的这一生 》 brain your brain have two parts，your left brain has nothing right，your right brain has nothing left. 鲁迅先生笔名 一字笔名有16个：卂、飞、树、俟、独、洛、干、豫、L、干、敖、隼、旁、迅、直、庚；二字笔名有117个：翁隼、唐俟、旅隼、朔尔、家干、苇索、杜斐、何干、干凡、一尊、余铭、译者、张沛、阿二、阿法、苗挺、直入、明瑟、罗怃、佩韦、周树、周悼、庚辰、庚言、孟弧、封余、荀继、茹莼、树人、候堂、飞斐、冬华、乐文、洛文、乐贲、乐雯、品音、记者、家斡、宴教、冥昭、焉于、梦文、雪之、常庚、曼雪、崇巽、符灵、康郁、隋文、越丁、越山、越侨、越容、楮冠、鲁迅、尊古、游光、遐观、编者、虞明、豫才、燕客、霍冲、孺牛、L.S.、丁珰、丁萌、士繇、E.L.、及锋、之达、子明、丰瑜、元艮、元期、不堂、中头、中拉、长庚、公汗、风声、巴人、尤刚、且介、且文、史赉、史癖、白舌、白道、令飞、自树、许遐、许霞、鲁行、迅行、独立、姜珂、黄棘、洛丈、神飞、敖者、莫朕、桃椎、索士、索子、动轩、仲度、华圉、阿张、豫山、樟寿、豫亭、符买、俟堂、润土、晓角；三字笔名有37个：华约瑟、齐物论、唐丰瑜、唐元期、黄凯音、戛剑生、康伯（白）度、隋洛文、葛何德、董季荷、敬一尊、朝花社、编辑者、编纂者、纂述者、杜德机、何家干、何家斡、即鲁迅、张承禄、张禄如、周玉才、周动轩、小孩子、丰之余（瑜）、韦士繇、邓当世、白在宣、周树人、周樟寿、周豫才、宓子章、赵令仪、某生者、倪朔尔、栾廷石、孺子牛；四字笔名有5个：宴之教者、宴之敖者、ELEF、旅沪记者、楮冠病叟五字笔名有7个：朝花社同人、中国教育社、奔流社同人、诸夏怀霜社、译文社同人、铁木艺术社、旅沪一记者；六字笔名有1个：上海三闲书屋。 一次 有一对夫妇感情非常好，结婚50年了都没有吵过一次架，有人问那位丈夫你们是怎么做到这么多年都不吵架的，丈夫就和那个人说，结婚之前他养了一条狗，婚后狗狗第一次见到他老婆，因为不熟悉就对他老婆吠了几声，他老婆说：一次。他也不懂是什么意思，几个月后狗狗又对他老婆吠了，他老婆说：两次。他没在意，又过了几个月狗狗叒对着他老婆吠了，他老婆就拿刀屠了狗，他接受不了就对他老婆大骂出口，他老婆很冷静地看着他说：一次。 帝国的征程 任务线：帝国的征程——一个国家如何获得联合国安理会常任理事国的席位流程：一、激活任务：璀璨的放射 璀璨的放射 难度：困难 描述：完成一次成功的核裂变试验 奖励：无 特殊：获得 debuff：制裁——进口物资减少70%，出口物资减少50%，时间N/A 攻略：任务可在各阵营领袖处接到。完成核裂变实验需要宗师级物理学，学习核裂变α配方后凑齐材料制作“核裂变装置”后使用即可。 核裂变配方有两种方式获得∶1.制作“放射性的小玩意”时有0.0000000001%的几率领悟;2.已学习该配方的玩家可制作“裂变手册”交易给别的玩家供学习。 制作“放射性的小玩意”需要特殊原料铀矿石，采集任意矿脉时有0.00000000001%几率拾取，且铀矿石不能挂拍卖行。 领悟配方后凑齐材料即可，需要巨量氟金矿石，布匹，食物，金币及铀矿石。 任务回顾：土豪玩家美国全服第一个烧钱完成该任务;苏联也烧了一阵子钱，最后据说是趁美国睡觉的时候偷偷盗号做了个裂变手册邮给了自己;TG接了任务后卖了仓库所有物品和身上所有装备后天天裸体打怪做日常打钱，死了N次后终于攒够钱完成了任务(好在裸体死了装备倒也不掉持久了) ……二、进阶任务：六选一 1.怒海狂涛 难度：地狱 描述：在美国第2、第3、第7舰队中选择一支全部击沉 奖励：联合国安理会常任理事国席位的邀请函上半部分*1 任务简介：美国海军是美国赖以生存的航商霸权的保卫者，消灭任意航母编队都将造成美国霸权的重创. 隐藏任务：任意美国海军舰队被消灭至50%以下都将触发&quot;珍珠港的回忆&quot;事件,美国本土获得Buff&quot;造船速度+300%,船厂船台数量X2,损管效率+500%&quot;,其它美国舰队将在5分钟之内组成&quot;TF58灭国舰队&quot;对你发起挑战击败他们.原作不可靠，应该自贴吧流出"},{"title":"故事大全","path":"/wiki/technique/II-002/index.html","content":"弃子 吴嫡一个消失的叛徒，一种恶魔般的药剂，一盘灭绝人性的棋局，一枚被历史遗忘的弃子…… 1.飞来横祸 日伪统治时期，北平白天看上去还算热闹，可一到晚上，立刻就冷清了，买卖铺子都早早地关了门。唯独有一条街还算热闹，那就是琉璃街。在这乱世，还敢在这条街上做古董生意的，一般都有点靠山。 雅古斋是这条街上新开业的铺子。这天晚上，张老板正眯着眼睛在后堂喝茶，前面招呼生意的伙计忽然喊了起来：“这是干什么？你们是什么人？”张老板眉头一皱，放下茶壶正要出去，伙计已经被几个黑衣人推搡着进了后堂。 张老板一惊，看着这几个黑衣人，以为遇上绑票的了，他清清嗓子说：“几位想发财，可能找错地方了吧。” 有个领头的黑衣人冷冷地说：“错不了，你是张老板吧，或者叫金角。给我搜！” 张老板急了：“什么金角银角？兄弟，要钱的话说个数，别动粗啊！” 领头的看了他一眼说：“你拿我们当土匪了？别装了，你一眼就看出我们是什么人了吧。自我介绍一下，我是特高课的行动队长刘峰，久闻你金角的大名了，想不到就在我眼皮子底下。” 张老板一愣：“特高课？误会呀误会，我也是给皇军办事的，这不是大水冲了龙王庙吗？宪兵队的山本少佐，就是这家店的股东啊。” 刘峰也愣了愣，但马上挥手说：“搞情报工作的，不会唬人怎么行？要真有这事，特高课会不知道？别废话了，等把电台搜出来，你需要交代的多着呢。” 张老板拿起电话说：“我这里没有什么电台，我跟你说不清楚，我给山本少佐打电话。”刘峰一把按住电话，用枪顶在张老板头上说：“你敢拨一下，我就打死你。”不知道该取什么名 张老板急得吼起来：“你这混蛋，老子也不是好惹的！”刘峰冷笑一声，用枪把打在张老板的头上，张老板顿时瘫倒在地。 这时，屋子里已被翻得乱七八糟，古董倒是翻出来不少，瓶瓶罐罐和字画被随意地扔在地上，但始终没翻到电台。刘峰在屋子里仔细寻找着蛛丝马迹，终于在地板上找到一处异样。他用手在地板缝里摸索着，然后一抬，果然掀起来一块地板，地板下面有个暗室。刘峰得意地冷笑道：“你还有什么可说的吗？” 张老板被人死死捆住，急得满头大汗：“那里面的东西不能动啊，要掉脑袋的！” 刘峰哈哈大笑道：“你放心，只要你老老实实交代出其他同伙，脑袋掉不了，还能发财呢。” 刘峰下到暗室里，打开手电，顿时觉得目眩神迷。小屋里满满的都是古董，跟外面比起来可不是一个档次的，还有一叠叠的金条，可这些都不是刘峰想要找的东西。他疯狂地翻找着，但小屋很小，转眼就翻完了，根本就没有电台。刘峰跳上来，照着张老板就是一拳，恶狠狠地说：“电台究竟在哪儿？不说出来，老子在这儿就剥了你的皮。” 张老板痛得蜷缩着身体，嘴里却不服软：“你找死！” 这时，外面传来了砸门声，刘峰歪头示意，一个手下从店门缝隙里往外看了看，回来报告说：“队长，是宪兵队的。”只听外面传来一阵叽里呱啦的日本人说话声，还夹杂着翻译的声音：“里面的人快开门，宪兵队查夜！” 刘峰叫手下打开门，一队日本兵冲进来，举枪逼住了黑衣特工们，刘峰赶紧掏出证件：“特高课办案！别误会！” 一个少佐军官冲进屋，上来就给了刘峰一嘴巴。翻译则忙着给张老板松绑，嘴里埋怨着：“特高课办案也不能随便打人啊。天哪，这些古董你们怎么能这么糟蹋？” 少佐军官掏出手枪，怒气冲冲地对着刘峰。刘峰见势不妙，赶紧说：“我们是奉命行事，有人举报这里是军统的情报部门。” 张老板在一旁吼叫着：“我早跟你解释了，你偏不信。我怀疑你就是假借办案，想黑了我们的古董和金条！” 刘峰和几个特高课的人被抓进了宪兵队，虽然没被严刑拷打，但也挨了不少拳脚，直到半夜，才被得知情况的特高课给接了回去。 上司告诉刘峰，刚跟军部里的人沟通过，那家古董店名义上是中国人开的，其实是军部高层的人参与的，他们一边打仗，一边搜刮了很多中国的古董，这些东西需要有渠道变成黄金。因为见不得光，所以由山本出面，和姓张的汉奸合作开店；也因为过于秘密，特高课竟然不知道。 2.失效神药 刘峰莫名挨了打，不禁怒火冲天，他来到了特高课的审讯室。审讯室的刑架上绑着一个男人，遍体鳞伤，不成人样，已昏死过去，一个日本军医正在翻看他的眼皮。 刘峰压住火气，对日本军医说：“怎么样，傻了吗？”军医点点头，用生硬的汉语说：“不出所料，药物的副作用已经把他变成白痴了。” 刘峰恼火地说：“我就说你那药不灵，现在他也傻了，你知道我抓住一个国民党的特务有多难吗？本来还指望他立大功呢，现在都让你的神药给毁了。” 日本军医满脸惭愧地说：“我根据以往的试验，以为万无一失了，没想到中国特工确实比普通人厉害，在注射药物后还能提供假情报，是我的失职。” 刘峰也不敢对日本军医太凶，这事只能打落牙齿自己吞，当下换上笑脸说：“算了算了，都是为了大日本帝国效力，不能互相埋怨。这次被这小子耍了，得罪了军部，你是军部看重的专家，还要请你去解释误会，特高课没有军部的支持，很难工作。” 军医连连点头，表示一定会办，然后又观察了一会儿刑架上的男人，垂头丧气地走了。刘峰摸着被宪兵打肿的脸，忍不住又狠狠地给了那男人两鞭子。 男人身体微微一颤，睁开眼睛。那是一双无神的眼睛，茫然地看着刘峰，又像是什么也没看见，他“呵呵”笑了两声，才感觉到身上的剧痛，又哇哇大哭起来。 一个手下对刘峰说：“军医说，他确实变成傻子了，咱们留着也没用，做了吧。” 刘峰心疼地说：“这可是银边，你知道在北平，国民党的特工只有三个银边，就这么让那个日本笨蛋给毁了，还是什么专家呢。” 手下说：“一个金角，三个银边，剩下的就都是草肚了，他确实算是大人物了。” 国民党在北平区的特工是以围棋为名的。围棋术语里有金角银边草肚皮的说法，就是说棋子在棋盘上的位置，角是必争之地，边是战略要地，至于中心地带的子，丢几个不重要，所以叫金角银边草肚皮。刘峰好不容易破译了多份情报才弄清了这份组织架构，又幸运地抓住了一个银边，本指望顺藤摸瓜找到金角，铲除北平的国军情报机构，不料却功败垂成。 忽然，刘峰眼睛一亮：“咱们知道他变傻了，国民党可不知道。咱们把他送到日本人的医院去养着，国民党肯定会派人营救，到时咱们就守着鱼饵钓大鱼！” 第二天，日本人的东亚友好医院里收治了这个叫王飞的病人。虽然是日本人的医院，但里面的医生护士很多都是中国人，他们对病人是一视同仁的，只要是病人，都会尽力救治。但在王飞身上，他们束手无策，因为他们发现，王飞的大脑已经发生了不可逆转的病变，而这种病变，他们谁也没见过。无奈之下，只能派一个护士好好照顾他。 小护士叫刘萍，是刘峰的远房亲戚，托刘峰的关系进的医院。她热情善良，把王飞照顾得很好。王飞现在的智商相当于三岁的孩子，他很快就极度依赖刘萍，没有刘萍，连饭都吃不下去。 刘峰一直派人盯着，当然也交代刘萍，任何人来探望王飞，都要马上报告。可国军特工的警惕性也很高，一次都没有露过面。 这天，刘萍在用轮椅推着王飞散步时，趁左右无人，刘萍小声对王飞说：“我知道你是国民党的特工，我想救你出去，你如果明白就告诉我。” 王飞茫然地看着刘萍，只是“嘿嘿”地傻笑。 刘萍说：“我知道你不一定相信我，我明确告诉你，其实我也是特工，不过我不是国民党的，我是共产党的人。我在延安受过培训，如果你不愿意回去，我可以把你送到延安去。你是抗日英雄，我们欢迎你这样的人。” 王飞的表情毫无变化，依旧咬着手指头“嘿嘿”地傻笑。 刘萍叹了口气，其实她知道王飞的情况，但她仍然盼望能有奇迹发生。她忘不了第一次和王飞见面时，王飞那英气勃勃的样子。 那时她刚来到这个医院，需要拍入职照片。当时王飞还是个摄影师，开着一家照相馆，很多达官贵人都曾光顾过他的照相馆。那会儿，刘萍凭着一个特工的敏锐，能感觉到王飞对那些汉奸和日本人的不屑。尽管他看起来彬彬有礼，但刘萍就是能感觉到。 直到王飞被送进医院，刘萍才从上级的口中得知，他竟然是个特工，而且还是“银边”！ 晚上，刘萍回到自己的公寓，忽然发现包里多了一张纸，打开一看，竟是一张银行存票！ 3.神秘金角 这张银行存票的金额不小，足够一个人生活十年。存票背面还贴着张纸条，上面的字都是从报纸上剪下来的：“我观察你很久了，知道你是个好人。请好好照顾王飞，不成敬意。”后面是一串密码。 刘萍看着纸条出了半天神，然后小心翼翼地藏了起来。 过了两天，刘萍来到银行，拿出银行存票，问能不能看出是谁存的。银行经理礼貌地告诉她，这是无记名存票，只要有存票和密码就能取钱，不过是无法查出最初的存款人的。 刘萍没有取款，她猜这个人一定就是金角。刘萍也是经过训练的特工，但被人把存票塞进包里竟然毫无知觉，而且这人说已经观察她很久了，她竟然也没有察觉，可见对方是个非常厉害的特工，只有金角才有这样的水平吧。 刘萍向上级汇报了情况，上级回复她，由于怀疑银边是被内部人出卖的，国民党内部正在严查内鬼，并且双方特工高层已经达成默契，共产党方面也将协助一起调查。毕竟这个内鬼出卖的是抗日英雄，毁灭的是抗日力量。但不管两边如何努力，却始终查不出内鬼是谁。这内鬼行动了一次之后，就好像消失了一样。 除了那张银行存票，再也没有其他动作，国民党似乎遗忘了王飞，由于一直没有鱼上钩，刘峰也失去了耐心，不再派人跟踪了，只是让刘萍注意监视。 在刘萍无微不至的照顾下，王飞的伤势一点点好转了，但他双腿腿骨被打断了几节，只能靠双拐走路。一条胳膊也被打残废了。满身的伤疤，到处都是烙铁印，原本英俊的脸上布满了伤痕，由于那些伤口都用盐水浸泡过，皮肉收缩，再也难以复原。最让人难受的是，他只会傻笑和哭，连话都不会说。 刘萍含着眼泪看着他，脑海里总是难以忘怀第一次见面时他的微笑。 过了些日子，日本人的战局日渐不利，东亚友好医院里住满了日本伤兵，其他病人都被轰出去了。刘峰对王飞已经不抱希望，自然也不会为他争取什么。 王飞被赶出了医院，拄着双拐茫然地站在路边。饥饿的本能让他开始翻找路边的垃圾堆，他找到半块肮脏的饼，兴奋地往嘴里塞，却被人一掌打掉了。王飞咧嘴哭了起来，刘萍也哭了，她抱着王飞说：“跟我回家，我给你做饭吃。” 就这样，王飞在刘萍家住下了。小小的公寓里，王飞每天扒着窗户望着大街，盼着刘萍回家。而刘萍一下班就急匆匆地赶回家，她知道王飞在等她。 有一天，一拨新的日本伤兵被送进医院，所有医护人员被要求加班。刘萍半夜才得以脱身，她飞快地往家跑，快到家的时候，她被黑暗中蹿出来的一个男人抱住了，拖进了巷子里。 那是个日本浪人，喝醉了酒，在街上寻找猎物。刘萍撕打着，喊叫着，希望能有巡夜的人发现。就在她快没力气的时候，王飞突然出现，他举起一根拐杖狠狠地砸在浪人的头上，然后是第二下、第三下⋯⋯等刘萍回过神来时，那浪人的脑袋都被砸扁了。 刘萍拉着王飞跑回家，给他刷洗拐杖。王飞却似乎忘了自己干过什么，只是委屈地看着刘萍，摸摸肚子，表示他饿了。 没过几天，刘峰来医院看刘萍，说日本人要完蛋了，他打算逃走，问刘萍跟不跟他一起走。刘萍不肯，刘峰也无所谓，扔下几块大洋说：“得空就跑吧，你是我亲戚，又在日本人医院上班，没准就被当成汉奸了。” 刘萍抓住机会问他：“之前你送来的那个傻子，到底是咋回事啊？后来又不让住了，被赶走了，估计已经饿死了，真可怜。” 刘峰叹口气说：“那是国民党的特工，我们接到一个匿名情报，说他是银边。我们突袭了他的照相馆，结果真的搜出了枪和密码本。我们想通过他抓住金角，结果严刑拷打没有用，他嘴严得很。我们才用上了军部新研发的一种药物，这药是七三一部队研制的，说是很厉害，不管多硬的人，只要被注射了，就会说实话。只是这药的副作用太大了，能把人脑子烧坏，几十个试验品都变成了傻子。本来我还想留着他套出更多情报，可十二个小时快到了，国民党的特工有规矩，十二个小时联系不上，就会转移地点，所以我最后还是用了药，没想到，这药对老特工根本不像对老百姓试验时那么好使，那小子用假情报耍了我们，自己也成了傻子，再没用处了。” 刘萍低下头努力掩饰愤怒，只说了句：“真可怜。” 最后，刘峰还是没能成功逃走，他带着金条在逃跑的路上被人暗杀了，身上被人用匕首刻了字：“民族罪人”。落款是金角。 4.死里逃生 日本人眼看要吃败仗了，他们也变得更加疯狂，在北平城里疯狂搜查抗日分子，只要略有怀疑，就直接枪毙。 一时间古城里人人自危，刘萍接到上级命令，让她迅速转移。她汇报了王飞在自己这里，上级犹豫了一阵，同意她带着王飞一起走，会在城外十里铺接应她。 刘萍雇了辆马车，以带丈夫去外地治病为由出城。王飞呆呆傻傻的样子让守城门的人放松了警惕，把他们放出去了。 出城后，刘萍刚松口气，忽然两个日本人巡逻过来，其中一个认出了刘萍是医院的护士，日本人是不允许医护人员离开的，因为他们的伤兵越来越多，他们抓住刘萍要押回城去。 刘萍万分焦急，自己没带武器，这里离十里铺还有很远，同志们也不可能来接应自己。一旦被日本人押回去，自己和王飞肯定是要死在城里了。 正在刘萍紧张地想办法时，一声枪响，一个日本人应声倒地，另一个日本人转身寻找目标，又被一枪毙命。这时，一个商贾模样的中年人从路边草丛里钻出来，把刘萍和王飞扶上一辆马车，然后赶起马车向前飞奔。 刘萍惊魂未定地问：“你是什么人？为什么救我们？”中年人往车里看了看，王飞蜷缩着身子吓哭了。中年人说：“我是为他而来的，我给你的银票，你为什么没用？”刘萍恍然大悟道：“你是他们说的金角？”金角点点头说：“刘峰说的吧。他是你亲戚，我杀了他，你恨不恨我？”刘萍摇摇头说：“他虽然对我不错，但他是汉奸。” 金角说：“我观察过你，你是个好人，王飞跟着你我放心。他不是银边了，只是个傻子，需要人照顾。那银票不是我个人的，是上峰的安排。你带着王飞去重庆吧，那里安全，上峰也安排好了住处，我们不是无情无义的人，会养王飞一辈子的。当然，如果你不愿意跟王飞一起，我这就带他走，你可以离开了。” 刘萍紧张地思索着，看来金角虽然观察过自己，但他并不知道自己是共产党的人，能去重庆，还有国民党特工的照顾，对自己的工作可能有意想不到的好处，而且，她确实也不放心王飞。思索片刻，她点头说：“我愿意去，咱们走东边的路吧，那边离车站近。”金角点点头，驾着马车驶向东边，绕过了在西边等待接应刘萍的人。 在金角的安排下，刘萍和王飞有惊无险地到了重庆。刘萍和上级重新取得了联系，她一边掩藏着自己的身份，一边暗地里搜集信息。金角试探着问刘萍愿不愿意和王飞结婚，刘萍考虑两天后同意了。 金角特意赶回重庆参加了婚礼，他拉着刘萍的手落泪了：“谢谢你，我替党国感谢你。”刘萍趁机提出：“我想找份工作，王飞的抚恤金虽然不少，但坐吃山空也不行啊。”金角拍着胸脯说：“别的部门不好说，当个机要秘书我还是能安排的，我明天就向上峰申请。你是王飞的妻子，这个面子他们必须给。” 果然，刘萍顺利地当上了机要秘书。这个职位虽然不高，但能接触到很多机密信息。 很快，日本人投降了，但内战又开始了。刘萍一下子变成了最重要的特工，因为她几乎是在敌人的心脏里工作。刘萍有时也很怅然，本来大家都是齐心协力打鬼子的，怎么刚刚胜利，就成敌人了，为什么国共两党就不能和平共处呢？ 刘萍跟上级联系不敢通过电台，因为怕被追踪到。重庆城里有一个糕饼店，刘萍常去买点心，因为大家都知道王飞爱吃点心，其实，那也是共产党的地下情报站。 有一天，刘萍忽然被叫到审讯室，几个高级特工正在审讯一个人，金角也在其中。那个人被打得血肉模糊，睁眼看着刘萍，刘萍的心一下子抽紧了——那是糕饼店的伙计，自己的同志！ 一个特工看着刘萍：“你认识他吗？”刘萍仔细看了看，点点头说：“我常去他家买点心。”那特工说：“他是共产党的特务，你为什么偏去这家店买点心呢？” 刘萍沉着地说：“王飞就喜欢吃他家的，换了别家的他不肯吃。” 那个伙计吐了口血水说：“我说怎么就被你们盯上了，原来这女人是你们的人！早就听说你们国民党的特务都靠女人干活，离了女人，什么情报也搞不到，我也算是倒了血霉了……” 不等他说完，金角上去狠狠一拳，打落了他两颗牙齿：“你嘴放干净点。”接下来又是一顿毒打，刘萍在一旁看着，心里疼得直抽搐，脸上却不能表现出来。 那几个特务果然对刘萍的口气变软了：“共匪就这德性，你别往心里去。我们都是很敬佩王飞兄的，询问你也是例行公事。” 刘萍刚松了口气，一个一直没说话的特务忽然问：“你是机要秘书，情报不能带出办公室这一点你应该很清楚。可我在你家里搜到了你抄写的情报人员名单，这你怎么解释？” 这句话犹如晴天霹雳，刘萍只觉得天旋地转，她把那份名单藏在了自己的脂粉盒里，还没来得及送出去，竟然被发现了。自己该怎么解释呢？被毒打的伙计和一旁的金角也都愣住了，呆呆地看着刘萍。刘萍昂起头，泪水滚滚而下：“没错，我是抄了一份名单，而且我还给其中两个人打过电话。”那特务冷冷地逼问：“为什么？”刘萍说：“因为刘峰给我听过一段录音，就是那段录音，举报了王飞。我要给名单上所有的人都打一遍电话，我要找出那个出卖王飞的人！” 大家都沉默了，过了半天金角才说：“原来，你前几天给我打电话是因为这个，你又不是没跟我说过话。”刘萍说：“电话里的声音和平时的声音不一样，我不确定一下怎么行？” 那特务口气也软了：“嫂夫人的心情我们都能理解，我们也想抓出那个内鬼来。不过规矩不能不遵守，这次我们会替你瞒下，以后不能再这样了。”刘萍含泪点点头说：“王飞，太惨了……”金角黯然地扶着刘萍出去了。 回到家，刘萍抱着王飞失声痛哭：“你知道吗？今天你又救了我一次。”王飞懵懂地看着刘萍，笨拙地摇着头，含糊地说着：“不哭，不哭。” 5.残忍真相 转眼两年过去了，国民党节节败退，已经开始做退守台湾的准备了。但重庆作为中心，余党仍然不肯言败，特务们也愈加疯狂，清除了大量反战人士和被怀疑是共产党的人。刘萍不顾暴露的危险，传递了大量的信息，帮助共产党营救了很多进步人士。 这天她正在机要室工作，金角走进来说：“我刚从北平回来，很久没看王飞了，带我去看看他吧。”刘萍交接了一下工作，带着金角回到家里。 几年间，金角经常来看望，王飞对金角也熟悉了，笑呵呵地看着他。金角脸色阴沉，看看外面，小声说：“弟妹，赶紧收拾东西，我送你们出城。” 刘萍一愣：“怎么了？”金角看着她：“当着我的面你就别装了，上次糕饼店的事，我就有疑惑，因为按刘峰当时的情况，是很难给突然接到的匿名举报电话录音的。当时给你解围后，我就暗中调查你。不过你一直演得很好，我也没发现太多破绽。这段时间，你太急了，急就容易露出马脚。我知道你是共党的人，至于什么时候开始的，我还不清楚。不过我既然能查出来，别人很快也会查出来。趁还来得及，赶紧走吧。” 刘萍沉默半晌：“你为什么要放过我？”金角苦笑着说：“人心都是肉长的，这几年的相处怎么说也有感情了。不过最主要的，你是王飞的老婆，你要是死了，他也得死。如果是在前几年，我可能顾不了这些。不过现在眼看败局已定，就是多杀一个你，又有什么用呢？” 刘萍抱住王飞的胳膊，轻声说：“谢谢你。”金角惨笑道：“我这身份未必能去得了台湾，上面还希望我们这些特工继续潜伏呢。没准以后我就是死在你手上的人。不说这些了，都是命，走吧。” 刘萍和王飞被金角送出重庆，一路不停地直奔东北。此时东北已经解放了，刘萍找到组织，受到了热烈欢迎。她留在当地工作，同时照顾王飞。对王飞，组织上只有一句话：“从他被注射了那药的时候，就已经不再是哪个党派的人了，他是个民族英雄。” 很快，全国解放了，举国上下掀起了肃清敌特的行动。刘萍心里一直有一个念头在挣扎：她把自己背下来的所有特务名单都交给了组织，唯独金角，她没有说。她知道这是对组织的不忠诚，但她真心希望金角去了台湾，再也不要回大陆了。她知道，不管自己有没有说，其实组织上都不会不知道这个人，他是北平的金角，是老牌的特务，早就挂在黑名单上了。自己不说，只是一个人最后的一点私心罢了。 一年后，金角落网了，他在企图破坏一个电厂时被捕。被抓捕后，他拒不交代有其他同伙，只是强调自己在抗日斗争中立过功。经过公审后，政府决定判无期徒刑，进行劳动改造。金角没有什么反应，淡淡地说道：“不枪毙我，已经很轻了。不过服刑前，我有个要求，就是写封信给一个老朋友，请帮我转达。” 很快，信送到了刘萍手里，但审查过信的领导对刘萍说：“这封信我看过了，我希望你不要再看了。有些事，还是不知道比较好。”刘萍疑惑地看着领导，领导叹了口气，接着说：“当初我们两边怎么查都查不到出卖王飞的内鬼，都觉得很奇怪。只要是内鬼，就不可能只行动一次，哪有这样的内鬼呢？可这个内鬼就此销声匿迹了，好像从来不存在一样。直到看了这封信，我才明白，我们都想错了。根本就没有内鬼，又从何查起呢？” 刘萍咬咬牙打开了信，她几乎是颤抖着看完的，看完后，她不知道是该哭还是该喊，也不知道是该恨还是该同情。 的确，王飞是被内鬼出卖的，但这个内鬼却不是为日本人做事，而是为了中国人的战争胜利。王飞是被精心挑选的牺牲品，是这盘棋局里的弃子。 金角截获过一份情报，是来自日本军部的。七三一部队用中国人做试验，研究了一种逼供用的催眠剂。这种催眠剂药力极强，能让人把心底最想保守的秘密都吐露出来，这不是意志坚定就能顶住的，它不同于严刑拷打，人可以用意志对抗，这是直接作用于人的大脑，作用于意志本身。这种药一旦获得认可批量生产，中国的情报系统在日本人面前将不堪一击。唯一值得庆幸的是，这种药目前还没能批量生产的原因是副作用极强，所有试验品无一例外都成了白痴。因此，日本人在犹豫该不该用，毕竟这是杀鸡取卵的做法，但他们认为，如果药效有保证，能获得重大情报，还是可以先试用。金角苦思冥想了一晚上，一个让人震惊又恐怖的计划形成了。 王飞是最年轻的银边，他是军校毕业的优秀特工，但参加工作不久，对北平的情报网尚不了解，一直跟金角通过电台单线联系。 有一天，金角告诉王飞，是该见面的时候了，明天晚上去琉璃厂的雅古斋，那就是自己的据点，张老板就是金角。这个日本人的销赃窝点，金角早就清楚，这次却意外地派上了用场。然后，金角给刘峰打了匿名电话，告诉他王飞是北平的银边。刘峰果然马上出动，抓住了王飞，并且在照相馆里找到了足够的证据。接下来，刘峰对王飞严刑拷打，要问出金角是谁。 王飞没有辜负金角的期望，在刘峰动用了所有酷刑后，王飞仍然一言不发。眼看已经过去了十个小时，再拖下去金角就可能警觉并转移了，刘峰无奈之下让日本军医给王飞注射了药剂。王飞不是神仙，他钢铁般的意志也无法抵抗那恶魔一般的药剂，他在昏昏沉沉中说出了自己拼死保护的“秘密”——雅古斋是据点，张老板是金角。 接下来发生的一切都如金角所料，特高课和宪兵队狗咬狗，吃了大亏的刘峰理所当然地认为王飞顶住了药剂，编了个假情报耍了自己。等他回去想要继续审问时，却发现王飞正如自己担心的那样，变成了白痴。辛辛苦苦抓到的大鱼，最后什么都没得到，刘峰怒火冲天，写了份报告，证明这药剂对特工人员效果不佳，且弊大于利，而那个现场的军医也成了最好的证人。就这样，这种药剂被放弃了。 一种可能终结中国情报史的药物，就在金角的死亡棋局中被消灭了。这是一场残酷的胜利，由于计划本身的人性泯灭，金角没有向任何人汇报，这个永远也查不出来的内鬼，就这样消失了。而被称为民族英雄的王飞，其实是最无辜的弃子。 围棋中，为了赢一盘棋，弃子是常见的，但当这颗棋子是一个满怀壮志、一心报国的人时，这样的做法无疑变得残忍恐怖。 金角之所以一次次地营救王飞，甚至最后发展到保护刘萍，是因为他心里压着的秘密，每次想起都让他呕吐不止。作为老牌特工，他杀人不眨眼，但亲手把自己的战友送进地狱，他从没做过。 在信的最后，金角对刘萍说：“我罪无可恕，但我不后悔。战争把我变成了魔鬼，但在看到你推着王飞散步的那一刻，我泪流满面，因为我发现即使在那样恐怖的地狱里，仍然有天使存在。” 刘萍回到家时，王飞正在玩水，弄得满屋子都是，看见刘萍回来，畏缩地坐在地上，咧着嘴看着刘萍。刘萍走过去抱着王飞，流着泪说：“不怕的，玩吧，我陪你玩。”王飞“呵呵”笑了，又玩起水来。 自由的天空中，艳阳高照，曾经饱受摧残的土地上，一片生机盎然.故事会&nbsp;期数：2018年4月下 拯救大兵哈里斯 一场”乱弹琴“之战的背后，却隐藏着大兵哈里斯的秘密，也引出了一场”乱弹琴“的追击。可就是这”乱弹琴“，却弹出了押送队，甚至敌方特战队的一曲壮烈的悲歌…… 1.“乱弹琴”之战 1951年7月开始，朝鲜战争进入了长达两年的停战谈判期。由于美韩方提出的停战条件太苛刻，谈判进展缓慢。双方为了配合谈判都要增加各自的筹码，所以局部战争时有发生。双方打打谈谈，谈谈打打，三八线附近枪声不断。 一天凌晨，美韩方突然集结了三个步兵师的兵力，在飞机大炮的掩护下，对我军一个直属后勤营驻守的马头岭发起了猛烈的攻击。 消息传到前线作战参谋部，参谋们就琢磨不透了。马头岭地势险要，易守难攻。驻守部队如果弹药粮草充足，不用说敌军三个师，就是来一个集团军，攻得下攻不下还不一定呢。 再说，马头岭虽然位置接近敌军阵地，但那就是一个望哨，没有什么实质的军事价值。敌军干吗这么疯狂进攻呀？难道仅仅是为了不让我军观察？可三八线附近接近敌军的山头有许多，没了马头岭还有牛头岭羊头岭呢。 参谋们想破脑袋也想不明白美韩军的作战意图，只好给指挥总部打电话，请示是否对马头岭进行支援。总指挥拿着电话沉吟了半晌，只说了句“乱弹琴”就挂了。参谋们更懵了，这是说谁呢？是说敌军攻击马头岭是乱弹琴，还是说我们支援马头岭是乱弹琴呢？ 于是，前线所有中国人民志愿军和朝鲜人民军官兵集体噤声，大家凝神听着马头岭上的枪炮声响了两天一夜，眼巴巴地看着伤亡过半的美韩军队占领了马头岭。 这次“乱弹琴”之战的发起者是美韩方停战谈判代表团成员——美国陆军亨利少将。原来，战斗前夜，一架执行特殊任务的美军飞机失事，负责联络的电台传来机上人员哈里斯最后的呼救声：“飞机起火，我要跳伞……”然后就和他失去了联系。随后，美军望哨在黑夜中发现一名伞兵落在了马头岭。 这时，亨利少将正登上马头岭，听着下属官员的伤亡汇报，气急败坏地说：“你们找到哈里斯没有？不要跟我说伤亡多少，我不在乎！我要的是哈里斯！” 亨利说着，愤怒得一脚将地上一顶钢盔踢出老远，咆哮道：“把霍尔上尉给我叫来！慢着……”他平息了一下怒火，整理了一下仪容，淡淡地说，“就说我请他！有请特战队队长霍尔上尉。” 随着一阵有力的马靴声响，消瘦精干的霍尔上尉来到了亨利面前。亨利急切地问：“上尉，有什么发现？” 霍尔表情平淡地说：“只发现一名敌军雇用的马夫，他说，确实听说捉到一个伞兵俘虏，已经连夜押往后方，具体目的地他也不清楚。他只隐约听到一个地名：沙砾窝子。” 亨利懊恼地拍着脑袋，说：“喔，天呐！可怜的哈里斯！那俘虏还说了些什么？” 霍尔笑道：“他还说，负责押送的是后勤营临时抽调的非战斗人员，有文书、通讯员、司号、护士、厨师、挑夫和仓库管理员，一共七八个人，随行的还有十几个伤员。” 亨利长出了一口气，说：“还好，我们只耽误了两天的时间。上尉，你有信心率领你的特战队追上这支厨师和伤员队伍吗？当然，我会给他们前行的旅程制造一点麻烦。” 说起这陆军特战队，可是全美陆军的骄傲，号称陆上航母。霍尔听到亨利竟要自己带着这艘航母去追击一支押运队！他啼笑皆非地摇摇头说：“对付这支蹩脚的队伍，我一个人去就够了。” 亨利哈哈大笑道：“不，不，我亲爱的霍尔，带上你的十二名队员，去把哈里斯带回来。”说着，他压低声音说，“哈里斯的父亲是国会议员，如果知道哈里斯落在中国军队手中，会给我们的谈判平添很大的压力。我们已经输掉了这场战争，绝不能再输在谈判桌上。” 临走时，亨利拍拍霍尔的肩膀说：“听说你认识哈里斯？” 霍尔点点头，说：“是的！在东京特训学校，我是他的教官。” 亨利说：“那可太好了！记住，把哈里斯毫发无损地带回来！要确保万无一失！” 霍尔立正敬礼，庄严地说：“是！将军！我保证哈里斯一根头发都少不了！因为，听说中国军队优待俘虏。” 2.愚蠢的间谍 在通往沙砾窝子的路上，后勤营通讯员小丁带着六个临时抽调的战士，护送着十几个伤员和一个“战俘”艰难而行。这个“战俘”是个中国人，所以，小丁更认为他是个叛徒，或者说是间谍。当然了，如果他是间谍，那绝对是天下最愚蠢的间谍。 因为他穿着中国军队的伞兵服从天而降，被捕之后，说自己是黄埔23级生、志愿军某师报务员。审讯人员一听乐了，告诉他他说的那个师番号已经取消了，黄埔23期是国民党办的，我们是共产党。“俘虏”一听就蔫了。其实小丁明白，关键是他的伞兵服，他可能不知道，中国的飞机就没在这一个地界的天空飞过。 反正甭管是叛徒还是间谍，都是俘虏，没什么客气好讲，小丁直接给他来了个五花大绑。 离开马头岭的第三天，队伍开始遭到美军飞机的猛烈轰炸。可古怪的是，美军飞机的炸弹没有一颗投向伤员乘坐的马车，反而把他们前行的道路炸得坑坑洼洼。 卧倒在地的小丁，被炸起的尘土扬得灰头土脸，他抹去脸上的尘土，大笑着说：“美国人都拼光了，这飞行员一定和我一样，通讯员出身。我打枪打不准，他投弹投不准！”等飞机飞走后，战士们扶着伤员爬起来，拿起铁锹把路填平，继续前进。这样停停走走，速度就慢了，两天才走了十几里。 这天傍晚，队伍在一个叫黑龙口的地方扎营，小丁安排了岗哨之后，就来找看守“俘虏”的五班长摆龙门。五班长是个老红军，在战斗中腹部中弹，就被安排到后方休养。因为他参加的战斗多，枪法又准，被小丁软磨硬泡拉着来和自己一起看守“俘虏”。 这时夜很静，屋外传来不知名的鸟叫声，小丁听着五班长绘声绘色地讲故事，看着昏昏欲睡的“俘虏”，心里惬意极了。不料，这“俘虏”突然睁开了眼睛，惊叫一声：“美军追上来了！”小丁吓了一跳，接着生气地说：“做梦吧？这是后方，不是前线，吓唬谁呢？” “俘虏”神情严肃地说：“听到那阵鸟叫声了吗？”小丁呸了一声，说：“这种鸟在朝鲜天天晚上叫！你以为你主子在叫你？” “俘虏”叹了口气说：“那是他们的联络信号，我在东京特训学校学过的。”小丁一听，哈哈笑道：“你是黄埔23期，又是东京特训学校，那不成了杂……”没等他说下去，五班长忽然伸手拦住他，凝神听了一会，说：“这鸟叫确实古怪。” 小丁抓起枪就要往外跑，“俘虏”说：“别出去！他们十分钟后发起攻击。”看着小丁疑惑的眼神，“俘虏”苦笑着说：“那阵鸟叫是通知我，要我十分钟后卧倒。你要不信，可以先关上灯，往外看看，如果我估计不错，你安排的岗哨应该已经没了。” 小丁关了灯，掀起帐篷一角往外一看，果然，原本哨兵站的地方，现在已空无一人。“俘虏”接着说：“美军的狙击手已经就位，突击手开始渗透，十分钟后往帐篷里扔催泪弹。然后，出去一个，消灭一个，这是美国陆军特种兵分队的通用战术。” 五班长诧异地说：“什么特种兵分队？” “俘虏”点点头，说：“一个指挥官，十二名队员，善于突袭作战。每个队员熟识各种兵器，射击准确率在百分之九十五以上。他们会驾驶坦克、飞机、轮船，具备海陆空三栖作战能力。有点类似于我们的侦察连，却比侦察连更可怕。” 小丁听了，倒吸了一口凉气，焦急地说：“我去通知其他帐篷的同志，做好战斗准备。”“俘虏”说：“从帐篷侧面爬过去，告诉他们，熄灯，准备好湿毛巾，不要走出帐篷，不要开枪，用手榴弹。”他刚说完，一直倚着帐篷的五班长说了声：“我去。”说罢，掀起帐篷的侧角，爬了出去。 几分钟过后，周围帐篷的灯陆续熄灭了，喧哗声也静了下来，静得吓人。“俘虏”低声嘱咐小丁：“他们会匍匐着过来，注意观察屋外的地面。”过了一会儿，从外面扔进来几个黑乎乎的催泪弹，帐篷里顿时浓烟一片。小丁急忙抓起湿毛巾捂住口鼻，然后看准位置，抬手将手榴弹扔了出去。接着，爆炸声枪声响作一团。 战斗结束得很快，几分钟后，伴随着一阵尖锐的鸟叫声，周围便慢慢安静下来。帐篷里“俘虏”被呛得眼泪鼻涕直流，一边咳嗽一边说：“咳咳……他们撤了，快把……咳咳……这东西扔出去。”小丁闭着眼睛向地上仍在冒烟的催泪弹摸去，忽觉得后脑一疼，昏了过去。 3.俘虏的故事 小丁醒过来才知道，刚才是“俘虏”用脚踢昏了自己，然后钻出帐篷想要逃跑，被闻讯追来的两名战士捉住了。小丁气得扑上去给了“俘虏”两记老拳，打得他嘴角冒血。 “俘虏”冷冷地说：“不是我，你们早都死了，你就这样对待你的救命恩人？” 小丁喘着粗气说：“那你为什么逃跑？”“俘虏”说：“他们还会回来的，到时候就是死路一条，我为什么要陪着你们莫名其妙死在这儿？” 小丁愤怒地说：“这次我们没有防备，敌人如果再来，就是他们的死期。”“俘虏”哈哈大笑，道：“他们身上有世界上最先进的武器设备，每个人都是身经百战的神枪手，还有侦察飞机的支持。你们有什么？就凭这几条破枪？一群伤员、通讯员、护士和厨子？” 小丁刚要说话，五班长递给他一支带有夜视瞄准镜的狙击步枪，这是他从刚才击毙的一个狙击手身上缴获的。这场战斗，我军一共牺牲了四个战士三个伤员。除了岗哨，一个伤员死于窒息，其他都是冲出帐篷或者忍不住开枪暴露了目标，被狙击手射杀的。美军只死了三个人，有两个居然是被小丁的手榴弹炸死的，还有一个狙击手，是被五班长开枪打死的。 小丁接过狙击步枪，看着那夜视瞄准镜，越看越惊讶。有这样一支步枪，岂不是人人都是神枪手？而且不分白天黑夜，都可以一枪命中。特战分队——这是怎样一支可怕的部队？ 五班长指着“俘虏”，说：“他说的没错，敌人的飞机投弹不是不准，而是想要阻拦我们，我们的一举一动都在敌人的掌握中。他们想要我们走多少公里，我们就只能走多少公里；想要我们在哪儿宿营，我们就得在哪儿宿营。” 说完，五班长转头看着“俘虏”，一字一句地说：“现在，我想知道，你究竟是什么人？为什么美国人费这么大力气来救你？” “俘虏”自嘲地笑笑，说：“我是什么人？又要我说我是什么人？”他忽然激动起来，脸色涨得通红，大吼起来，“可我说了你们就是不信！还要我说！” 小丁坐下来，和蔼地说：“别激动，你说吧！我们现在相信你。” “俘虏”平静了一下，说：“我叫张文荣，是黄埔23级生、志愿军180师报务员。”接着他说： 1949年12月，黄埔学员起义，张文荣参加了解放军。朝鲜战争爆发，他被编入志愿军某师，参加了抗美援朝。一次战役中，全师中了埋伏，张文荣被俘。美军得知张文荣是黄埔生，就从台湾调来国民党特务，对他进行拉拢。 战俘营地下党抓住这一机会，动员张文荣假投降，寻机出逃。于是，张文荣被送往东京特训学校，接受美方的特训。一天夜里，美方发给张文荣发报机、地图、指南针、步枪、手雷等东西，把他带上一架飞机，要将他空投到我军后方收集情报，搞破坏。 到了目的地，飞机舱门打开，在跳机前的瞬间，张文荣掏出手雷，向机舱深处投去。机上美军都惊呆了，等他们明白过来，怪叫着拔枪射击时，张文荣已经跳离了机舱。飞机爆炸了，张文荣落在了马头岭，戏剧性地又被直属后勤营俘虏了。 听完“战俘”的讲述，小丁琢磨了半天，才说：“就这样？那你怎么解释美军派出特战分队费尽心思地营救你？按道理，他们更应该是来杀你的才对。” 这个自称张文荣的俘虏说：“是，他们应该是来杀我的，为什么会这样我也不清楚。是不是他们弄错了？”小丁不屑地撇撇嘴，说：“你蒙谁呢？别以为我们都是傻子！” 张文荣大声说：“你看，我说你不信吧，你非让我说，结果我说了你还是不信。你到底想要我说什么？”说着，他的声音哽咽了，“我被敌人包围、被关进战俘营、又被送到东京，我受了多少苦，只有想着你们我才能活下来。可我历经生死回来了，你们怎么可以这样对我！快给我松绑！我宁可战斗着死去，也不愿被战友绑着、被敌人杀死。” 小丁冷笑一声，说：“演得还真像！”张文荣嚎啕大哭，五班长慢慢走过来，拍拍他的肩膀，说：“别难过，会调查清楚的，总有水落石出的一天。告诉我，现在该怎么做？” 张文荣止住眼泪，摇头说：“没用！我们绝不是他们的对手。他们现在肯定赶往我们下一个宿营地了。明晚，他们不会再客气，一强攻，我们全完了。” 五班长从怀中掏出一张地图，说：“这是从你身上缴获的，看来，我们得改变路线了。” 张文荣闭上眼睛，说：“问题是，我们躲得过他们的飞机吗？” 4.无名大峡谷 霍尔突袭失败，带着他的特战队员垂头丧气地来到营地。对骄傲的陆军特战队而言，这次可谓损失惨重。当场战死三人，一人重伤，死于途中。一个队员忍不住，站起来大声指责道：“这是一支非战斗人员和伤员混编的押送队吗？怎么会这样？谁提供的情报？这简直就是一个圈套！” 于是，队员们七嘴八舌地议论起这场古怪的战斗。他们发出信号后帐篷里灯光就先后熄灭，突击手扔进催泪弹，中国军人就立即进行反击，并且准确地击中狙击手。很明显，中国人熟知他们的联络信号，而且对他们的战术了如指掌，更可怕的是，他们至少有一个神枪手。 霍尔静静地听着，脑子里闪过一个个疑问，他摆手制止住大家，然后说：“现在，大家再熟悉一下地形，天亮开始休息，明晚强攻。”接着，霍尔通过电台呼叫，要求明天的飞机将中国军人阻拦在这一带宿营。 天亮了，霍尔收到侦察飞机的紧急呼叫：中国押送队把马车扔下了，从大路上消失了。霍尔一边要求飞机扩大侦察范围，一边把队员们叫到一起研究。 霍尔心事重重说：“可以确信，我们碰上了一个非常了解我们的对手。现在我要你们看着地图想想，如果你是他，带着一群伤员，要避开我们的飞机、避开我们的追击，你们会选择去哪里？” 队员们看了一会地图，开始发表意见，有的说会往回走，有的说会投降。这时，有一个队员指着地图西面一处标记不清的无名峡谷说：“我会选择这里。” 霍尔看着那峡谷，淡淡地问：“为什么？”说着，他脸上露出了会心的笑容。 这名队员说：“这里地形地貌标记不清，说明地势险要，飞机无法侦察，当然就可以躲过飞机。另外，这里离他们的宿营地不远，以他们的速度夜间赶路的话，现在完全可以到达这里。” 霍尔当即拿起话机，呼叫侦察飞机对无名峡谷进行低空搜索。飞行员为难地说，对这里进行低空侦察难度太大。霍尔一听，暴跳如雷，厉声指责，飞行员只好飞进了无名峡谷，边飞边向霍尔进行汇报。不一会儿，听筒里突然传来一声清脆的枪响，飞行员就失去了联系。霍尔扔下话筒，冲队员们大声命令：“快！无名峡谷，全速前进。” 而这时，位于无名峡谷的小丁正兴奋地举着狙击步枪，看着远处冒着焦烟坠落的飞机，笑哈哈地说：“哈哈，我一颗手榴弹炸死了两个美国兵，现在又一枪打死一个飞行员，击落一架飞机。” 张文荣反剪着双手从石头后面站起来，说：“别笑了，我们暴露了，快走。”于是，轻伤员互相搀扶，两名战士拖着担架上的重伤员，小丁押着张文荣艰难地向峡谷深处走去。 快到中午时，他们走到一片沼泽边。张文荣望地着一眼望不到边的沼泽地，又看看五班长，失望地长叹息一声，垂下了头。五班长说：“敌人就要追来了，快走吧。” 小丁傻眼了，说：“可是……这是片沼泽地，怎么走？” 五班长笑笑说：“难道你没听说红军爬雪山过草地吗？”说着，他将背包打开，取出棉被缠在身上。又从旁边的大树上折下两根粗树枝，一根横着绑在两脚上，一根两手握着，说了句：“都跟着我。”说完率匍匐着朝沼泽中爬去。 战士们依样画葫芦，一个个进入了沼泽。大树树枝很快被折光了，剩下小丁、张文荣和两个重伤员。重伤员互相看了一眼，说：“我们不行了，留下来打阻击吧，担架你们拆了用木棍。”说着抱起枪，不顾小丁的劝阻从担架上滚了下来。 小丁眼含热泪拆了担架，递给张文荣，张文荣说：“现在，可以给我解开绳索了吧？” 小丁看看张文荣，又看看无边的沼泽，无奈地解开了绳子，边解边说：“你要是敢逃跑，我就一枪崩了你。别忘了，我有狙击步枪。” 张文荣苦笑着看看阴沉的天色，说：“快走吧！但愿老天保佑，保佑我们能在下雨前爬出这片沼泽。”说着，向沼泽中爬去。小丁又回头看看两个重伤员，见他们平静地笑着向自己挥手。小丁别过头，含着泪跟上了张文荣。 5.血战沼泽地 到傍晚时，霍尔带领特战队赶到了沼泽地，经过一阵并不激烈的战斗，打死了两个重伤员。但队员们站在沼泽边，犯起愁了。一个队员指着沼泽中的爬痕，泄气地说：“他们进了沼泽。” 霍尔低头仔细查看，又看看满地的散落物和沼泽边光秃秃的树干，心里明白了。他由衷地感叹道：“我们的对手给我们上了一堂生动的沼泽课。都是一样的士兵，他们还有伤员，他们能爬，我们为什么不能！别忘了，我们是美国陆军特战队。” 说完，霍尔指挥队员把那棵大树炸断，锯成一截截的木块，给队员们绑在身上。霍尔目光炯炯的看着队员们，大声说：“突击手在前，狙击手在后，顺着他们的爬痕前进。注意保持队形。”说完，带着队员进入了沼泽。 这阵枪声和爆炸声惊动了沼泽深处的中国军人，殿后的张文荣和小丁对望一眼，张文荣叹了口气，说：“我们和他们的距离只差半天的时间。” 小丁忍不住问：“难道他们也敢进沼泽？”张文荣点点头，说：“莫忘了，他们是陆军特战队。”说完，把手伸向小丁说，“给我一颗手榴弹，现在，该是咱们给他们制造一点障碍的时候了。” 看着迟疑的小丁，张文荣自嘲地笑笑，说：“好吧，算了，给我一把水壶。”说着，接过小丁递过的水壶，从身上扯下一根线系上，又绑上一块石头，埋入了沼泽中。 小丁奇怪地问：“你这是干什么？”张文荣解释说，这是一枚假诡雷，探雷器检测到金属物，就会发出警报。小丁一听来了兴致，赶紧学着张文荣的样子，把一些铁件埋入了沼泽中。 小丁的好奇心越来越大，终于忍不住诱惑，向张文荣：“为什么不设置一些真的诡雷？”张文荣无奈地笑道：“你不给我手榴弹啊！没有炸药，怎么做真的？” 小丁想了想，说：“给你解开绳子我已经犯了错误，手榴弹是决不能给你了。这样吧，你教我，我来弄。”张文荣点点头，就开始手把手教小丁各种诡雷的制作和各种布雷法。于是，两人分工，小丁做真雷，张文荣做假雷，一路爬一路埋，倒真是给后面的美国陆军特战队制造了不小的麻烦。 渐渐的有伤员爬不动了，主动要求留下来阻击，小丁又劝又鼓劲，伤员干脆扔掉手中的木棍，然后笑着对小丁说：“真的爬不动了！”无奈的小丁只得红着眼睛离开了。 留下的伤员越来越多，身后不时传来阻击的枪声。从距离上，张文荣判断，双方始终保持着半天的路程。天亮的时候，这群泥人终于爬出了沼泽，站在了一片草地上。这时，除了五班长、小丁和张文荣，全队还剩下一个战士、五个伤员。 张文荣攥起双手向小丁摇了摇，小丁带着歉意掏出了绳子。看到张文荣手腕上的勒痕，小丁从怀中掏出一条手巾垫上，然后用绳子轻轻地捆了两圈，没有用五花大绑。 沼泽中又传来几声枪响，张文荣看看周围的环境，说：“我们现在到了峡谷中央，天黑才能走到峡谷的尽头，那时敌人会追上我们。需要有人打阻击了，这里就是最佳地点了。” 正躺在地上休息的五班长说：“我来吧！”小丁急忙说：“不行，我留下。”五班长摇摇头，说：“这是一场真正意义上的阻击，你枪法不行。” 小丁说：“我有狙击步枪。”五班长说：“这把枪要留给最后一个人，谁拿着它都是神枪手，不能留给敌人。”顿了顿，又说，“关键是，我走不动了。”他扯开身上的被子，只见腹部的伤口已经在爬行中扯开了，露出了肠子，鲜血混着泥水染湿了军衣。 小丁大喊一声：“五班长！”眼泪像断了线的珠子滚滚而下，五班长决然地转过头，看着张文荣说：“告诉我，这场阻击应该怎么打？” 张文荣的眼圈也红了，声音微微哽咽，说：“你开枪时，狙击手会通过枪口的火光和烟气锁定你的位置，所以，只要在草地上燃起几团火堆，他们就不敢前进一步，如果能坚持到天黑，我们就赢了。还有，就是那句老话，打一枪换一个地方。” 五班长点点头，说：“他们什么时候到？”张文荣算了算，说：“应该在中午左右。” 五班长说：“好，你们走吧，我会在之前把火点上。” 6.打个阻击吧 哭成泪人的小丁一步三回头地走了，五班长躺着休息了一会，挣扎着坐起来，把肠子塞回肚子里，又把棉被撕成布条，一道道紧紧缠住腹部，然后开始拔草。接近中午，五班长气喘吁吁地燃起一道火墙，他爬来爬去，把干草木棍棉衣一点点扔进火堆里，维持着火势。 这时霍尔和他的特战队已经接近沼泽边缘，看到远处的火墙，队员们长出了一口气，终于到了这该死的沼泽尽头了。霍尔摆摆手，说：“有人阻击，突击手保持原位，狙击手寻找目标。”很快传来狙击手的报告，烟火太大，无法确定目标。 霍尔命令停止前进，静卧不动，等待天黑发动攻击。双方就在这沼泽内外，隔着一里地，隔着一道火墙，静静地对峙着。 “喀嚓”一声，一个惊雷闪过，开始下起了细雨，五班长无奈地看看天，咒骂了一声，加快了拔草的速度。他筋疲力尽地把最后一把草扔进火堆中，颤巍巍地伸手去拿枪。枪就在他的身边，可五班长没有拿到，他头一歪，倒在火堆旁，再也没有起来。大火烧着了他的头发，他的衣服，吞噬了他的身体。 雨势越来越大，火墙渐渐熄灭，浓烟四起。霍尔静静地趴着，用望远镜向前方搜索着。忽然一个队员大声叫起来：“报告长官，我的身体正在往下沉！” 霍尔吃了一惊，身子微微一动，发现自己身边积水越来越多。这时候，他什么也顾不得了，大声命令道：“狙击手保持原位，继续寻找目标，其他队员全速前进。” 等到霍尔满身泥水爬出沼泽，冲入仍在冒烟的火墙，只看到一具烧黑的尸体。他回过头，发现队员只上来三名。其他的，包括那两名殿后的狙击手，永远留在了沼泽中。霍尔和三名队员流着眼泪，举起手中的长枪，向天空“砰、砰、砰”连鸣了十二枪。 正在前进的小丁等人听到了这阵枪声，张文荣扭头朝五班长的方向望望，脸上也不知是雨还是泪，声音低沉地说：“五班长撑不住了，可惜，时间不够了。” 最后一个战士一屁股坐在地上，不顾大家的劝阻，哭着说：“我走不动了，留下来，打个阻击吧！”又走了一会，后面枪声又起，一个伤员停下来，看着小丁说：“我来打个阻击吧。” 大家赶到峡谷尽头的时候，已接近傍晚，这时只剩下小丁、张文荣和两名伤员。要走出峡谷，还要翻过最后一座陡峭的山坡，这是张文荣没有想到的。 张文荣伤感道：“怎么会这样？地图上没标啊！”他和小丁都知道，敌人很快就会追上来，那时他们恐怕刚刚爬到半山腰，在带有夜光瞄准镜的狙击步枪面前，他们简直就是最好的靶子。 张文荣看着小丁，苦笑道：“让我留下来，打个阻击吧！不知道你相信我吗？”小丁看着他，点点头，又摇摇头说：“我相信你，但这个阻击还是我来打吧！你要回到部队，找回你的清白！两名伤员我在这儿就交给你了！”说完，小丁松开了捆在张文荣身上的绳索，紧紧握了握张文荣的手，把狙击步枪递给他，自己抓起一杆三八大盖，转身向后跑去。 张文荣大声说：“等一等！我在部队的时候，一个老八路教给我一种枪法不准也能杀敌的方法。”望着回过头来的小丁，张文荣又说，“战士听到枪声的第一反应就是就地隐蔽，所以你只要做几个蔽体，然后在蔽体里布下诡雷。敌人来了，听到枪声，就会无意识地进入你做的蔽体，自动引爆诡雷。” 小丁听了，兴奋地举了举手中的枪，大声说：“这法子好！现在，我完全相信你是清白的了！”说完撒腿往回奔去。他那清脆的笑声在雨中的峡谷里久久回荡。 小丁跑出不多远，找了一块平坦的空地，从一旁边搬了几块大石头做好蔽体，又在蔽体中布置好诡雷，然后就离开，远远地等待着追兵。 不一会儿，霍尔和最后两名队员保持着三角队形，气喘吁吁地赶到了。看到他们进入攻击位置，小丁举枪朝空中放了一枪，不出所料，三个人全趴进了小丁设置的蔽体里。随着轰隆隆几声巨响，小丁兴奋地跳起来，哈哈大笑着说：“我一颗手榴弹炸死俩，一枪打死一个外带一架飞机，三颗诡雷又炸死了仨……” 刚说完，就听“啪啪啪”三声枪响，小丁的胸口连中三弹。他难以置信地看着自己的伤口，抬头看了一眼蔽体后一支黑洞洞的枪口和霍尔的眼睛，纳闷地想：“怎么这颗没炸？”接着，小丁倒了下去。 听到不远处的爆炸声，刚爬到半山腰的张文荣和两名伤员都停了下来，满怀期冀地扭头望着，倾听着。不久，随着三声狙击步枪的枪响，张文荣的眼泪刷地就流了下来。 7.回首忆往事 这时，霍尔趴在蔽体中一动不动，大声呼叫着两名队员的名字，却没人回应。他明白了，心中满怀悲伤，却又充满了对对手的敬佩。在蔽体里布诡雷，这是怎样的可怕对手！这是中国的智慧！此时霍尔的身下仍压着一颗诡雷，诡雷之所以没响，是因为他僵在那儿一动不动。 霍尔慢慢从背后摸出探雷器，小心地在身下搜索，终于确定诡雷压在自己的右腿边。霍尔用尽全身的力气，猛地向左边滚去。只听轰的一声，滚出老远的霍尔已浑身是血，他的右脚被炸断了。 霍尔爬起来，忍着剧痛从背包里掏出药用酒精纱布，简单地处理了伤口，又掏出一支吗啡针给自己注射上，然后拄着步枪爬起来，艰难地向前追去。 拐过一道弯，就到了峡谷的尽头，霍尔倚在一块大石头旁，举起狙击步枪，通过夜光瞄准镜，向眼前的山坡望去。很快，他看见了山坡上两个伤员的身影。霍尔激动地浑身发抖，他仔细地调节着瞄准镜的焦距，伤员的面容渐渐清晰可辨，不是他要找的人。 霍尔失望地喘着气，手指伸向了扳机，就在这时，他突然听到了一阵清脆的鸟叫声。这是特战队的联络信号！是哈里斯！霍尔赶紧放下枪，朝鸟鸣的方向望去。那里，是一个山洞。 “是你吗？哈里斯！”霍尔边问边警惕的换上一个新弹夹，蹒跚着挪进了黑漆漆的山洞。山洞里传出了一个充满惊奇却又略带生硬的英语口音：“霍尔教官？” 霍尔听出这口音绝不是哈里斯，他不假思索地向声音的方向开枪射击，对方闷哼了一声，接着开始还击。两个人在山洞中乒乒乓乓地打起来。打着打着，霍尔猛地扔出一个手雷，在震耳欲聋的爆炸声中，他单腿跳着冲了过去，麻利地用步枪顶在了对方的脑门上。 霍尔打开手电筒照去，看清了浑身是伤、正趴着换弹夹的张文荣。霍尔惊呼一声：“天呐！张？怎么是你！难道这一路来都是你？”张文荣扔下手中的枪，抬头看着霍尔说：“是我，教官，你数子弹的本领还是那么厉害！你们这一路追踪，是要来杀我的吗？” 霍尔说：“我为什么要来杀你？我们是战友啊！”张文荣摇摇头说：“不，教官，我们是敌人。” “敌人？”霍尔大声说，“我是你的教官，你是我的学生！张，你不是朝鲜人！我也不是韩国人！我们为什么要跑到来这里来当敌人？” 看着默不作声的张文荣，霍尔恼恨地破口大骂：“这场该死的战争！”张文荣深呼了一口气，他想多拖延几分钟，好让伤员爬出峡谷，就故意问道：“史密斯教官和亨特教官他们还好吗？” 霍尔苦笑了一声，说：“斯密斯陷在沼泽里，亨特被你的诡雷炸死了，我的脚也被你给炸断了！天呐，这该死的战争！我的战友都死光了，我最好的学生居然变成了我的敌人！”说到这儿，霍尔不由唏嘘不已。接着，两个浑身是伤、既是师生又是敌人的人面对面，席地而坐，聊起这一路的惊险经历，回忆起在东京特训营的往事。 天慢慢亮了，霍尔说：“张，你的伤员应该已经回去了，援兵马上会来救你的，我也该走了。”说着，他将狙击步枪的枪口顶在了自己下颚。 张文荣见了大惊失色，连声说：“教官，不要！不要！”霍尔微笑着说：“张，我受了伤，走不出这片峡谷了。我的任务已经失败，我的队员全部阵亡，难道你想看着我做他们的俘虏吗？” 张文荣无话可说，只是哀声惨叫着：“不要，教官，不要。” 霍尔最后看了一眼张文荣，说：“那架飞机上，你的同学哈里斯并没有死，他跳伞了。我们这次的任务就是来救他的，因为情报错误，把你当成了他。他的父亲是美国国会议员。张，找到哈里斯，结束这场见鬼的战争！”说完，枪“砰”的一声响了，霍尔倒下了。 张文荣抱住脑袋，泣不成声。不久后，援兵赶到，救下了张文荣。 根据张文荣的讲述和指认，军方历时半年，将匿名隐藏在朝军战俘中的哈里斯抓获。 1953年7月27日，迫于强大的反战压力，美国开始让步，并与朝中三方签署了《朝鲜停战协定》。至此，朝鲜战争结束。故事会 谁在捣蛋 标题被换 蒋如宝是温泉镇的镇长，他有点出口成章的本领，还能写一手好字。这温泉镇是全县有名的“小深圳”，因为发展温泉旅游，就有点特区的味道，经济好不说，娱乐业也很发达，开放程度自然也比其他乡镇高一点。蒋镇长喜欢喝酒、洗澡和按摩，在这里是如鱼得水，日子过得赛神仙。 这天傍晚，蒋镇长叫来办公室钱主任，吩咐说：“明天党务工作检查组就要来咱镇年终检查，这检查嘛，大伙也都见多了，‘听听看看，喝酒吃饭’，关键是要让领导心情舒畅，除了安排活动准备好纪念品外，我看还得贴两条大标语，造造声势。” 钱主任忙说：“这非得镇长亲自动笔不可了。” 蒋镇长也不客气，抓起桌上的斗笔，在早已铺好的纸上龙飞凤舞写下两条标语，一条是“党政干部要切实增强全心全意为人民群众服务的意识”，另一条是“全镇干部多努力，确保农民尽快富”。 钱主任连夸：“好！妙！真是字文双璧！就凭蒋镇长您这手绝活，明儿检查准保锦上添花！”蒋镇长抬头看看外面天已擦黑，挥挥手说：“快去门外贴上吧，我还有个应酬，先走啦。” 冬天天亮得迟，第二天又逢阴天，天大亮时已经快八点了。蒋镇长的宿舍就在办公室隔壁，可两间屋子都没动静。钱主任知道这蒋镇长酒一多，便没了记性，忙跑上楼，敲开蒋镇长的房门。蒋镇长怪钱主任不早点来叫他，边洗刷穿戴，边伸头盯着大门外。他的手在太阳穴上揉着，昨晚喝得太多了，现在还有点头痛。 镇政府外面贴标语的地方围着一群人，正在指指点点，看来标语还挺吸引人的！蒋镇长正得意着，就看到两辆轿车缓缓开到政府大门前停下，县委胡副书记和几个检查组人员匆匆钻出小车，也伸头认真地欣赏那标语呢！蒋镇长劲头一下子来了，乐得“咚咚咚”飞步下楼，带着钱主任迎上去，老远就朝胡书记伸出双手。 可胡书记脸阴沉沉的，似乎很不高兴，冷冷地说了一句“你还是先看看你的大作吧！”没伸手就径直上楼去了。 蒋镇长定睛一看标语，眼一黑，差点一头栽倒，钱主任眼球凸出三尺长！只见左边一条龙排开的红方块，很是壮观，上面写道：人民群众要切实增强全心全意为党政干部服务的意识！右边那条标语也格外醒目，写的是：全镇农民多努力，确保干部尽快富！ 那字千真万确是蒋镇长的字，昨晚几个人贴好后还反复检查了好几遍，怎么会变成这样呢？钱主任凑上去细细一琢磨，惊叫一声：“蒋镇长，有人把标语揭下来，调换了位置！”“快，快撕下来！”蒋镇长喘着粗气，声音都变了调。 “不错，不错，这回我们蒋镇长倒讲了真话！”围观的人小鱼戏水似的，越聚越多，有的冷嘲热讽，有的拍屁股大笑。蒋镇长像霜打的茄子，低头溜进镇政府。 下午，检查组一走，蒋镇长叫来派出所孙所长，一巴掌把桌子拍了个震天响，吼道：“查，给我查！那些平日意见大的人，就是作案的重点嫌疑对象！看看谁在捣蛋！” 谁在捣蛋 顺着蒋镇长的思路排查了几天，乖乖，上了嫌疑名单的就有好几百人！孙所长是狗咬刺猬无处下牙，急得抓头挠腮。好在蒋镇长又要忙于迎接综合治理检查，顾不上催问，给了孙所长喘口气的机会。 综合治理检查实行一票否决制度，蒋镇长因此更加重视，召开了专题会议，大家研究半天，最后还是一致认为蒋镇长应该发挥特长，再写两条标语，抢夺检查团的眼球。 这次，蒋镇长学乖了，他让大家分两组各自去拟定一条标语，各组翻来覆去分析没什么漏洞之后他再写，写的时候他把一大张纸裁成两个半张，每半张写四个字，要调换就不容易了。钱主任为了避免别人再捣乱，趁天黑人静时，瞅准马路上无人之机，悄悄贴上…… 第二天一早，钱主任醒来，准备去叫醒昨晚又出去应酬的蒋镇长。钱主任往镇政府走，老远就看到政府大门外被围得水泄不通，人群里还不时传来阵阵刺耳的笑声。钱主任预感不妙，一溜烟跑过去，果然看到大门两旁的标语又变了，左边是“加大力度，严厉打击群众上访，净化社会环境！”；右边是“解放思想，正确对待卖淫嫖娼，促进经济发展！”原来又有人将左边标语中的“卖淫嫖娼”与右边标语中“群众上访”互换了位置！唉，昨天怎么就没考虑到两组标语之间也能调换呢？ 更让钱主任叫苦不迭的是，人群里有人正举着个照相机“咔嚓”、“咔嚓”抢镜头！一问才知道是个省报记者，回乡探亲刚好碰上了这事，觉得很有新闻价值。钱主任冲过去伸手要夺记者的照相机，那记者却眼一瞪，说：“你若动我一下，有群众作证，我把你们捅到‘焦点访谈’去！”钱主任只好缩回手，弄得脸红脖子粗。 钱主任想挤进去撕掉标语，可群众围得箍铁桶似的，折腾半天也进不去，只得一身臭汗掉转屁股往回跑，去请蒋镇长出来压阵。可蒋镇长到底慢了一步，当他晕晕忽忽披着衣服奔出来时，检查组的人员正唬着脸看标语呢。 很快，事情传遍全县上下，省城一家晚报竟以《这个镇长好大胆》为题，刊登了那记者的新闻稿和照片，一时间舆论哗然。蒋镇长被县领导批得肚子鼓成癞蛤蟆，一连好几天躲在房间里蹦来跳去，发誓说不抓着那个捣蛋的，他就不姓蒋了。 更让钱主任叫苦不迭的是，人群里有人正举着个照相机“咔嚓”、“咔嚓”抢镜头！一问才知道是个省报记者，回乡探亲刚好碰上了这事，觉得很有新闻价值。钱主任冲过去伸手要夺记者的照相机，那记者却眼一瞪，说：“你若动我一下，有群众作证，我把你们捅到‘焦点访谈’去！”钱主任只好缩回手，弄得脸红脖子粗。 钱主任想挤进去撕掉标语，可群众围得箍铁桶似的，折腾半天也进不去，只得一身臭汗掉转屁股往回跑，去请蒋镇长出来压阵。可蒋镇长到底慢了一步，当他晕晕忽忽披着衣服奔出来时，检查组的人员正唬着脸看标语呢。 很快，事情传遍全县上下，省城一家晚报竟以《这个镇长好大胆》为题，刊登了那记者的新闻稿和照片，一时间舆论哗然。蒋镇长被县领导批得肚子鼓成癞蛤蟆，一连好几天躲在房间里蹦来跳去，发誓说不抓着那个捣蛋的，他就不姓蒋了！ 可派出所孙所长查得焦头烂额，还是没有结果。这天下午，蒋镇长把孙所长和钱主任叫到办公室，说：“没别的办法了，只有引蛇出洞！今天下午，我们把标语贴出来，镇政府对面正好是我干妹子的酒店，晚上你们两个给我盯通宵，抓个现行！” 孙所长拍案叫绝，钱主任也连连称妙！蒋镇长咬牙切齿地对窗外骂道：“看老子今晚怎么收拾你！”正骂着，“都来乐”夜总会的老总打来电话，邀请蒋镇长晚上去他那里喝酒解闷，蒋镇长匆匆写好两条标语，笔一掼，拂袖而去。 原来是他 傍晚，两条醒目的方块标语又贴出来了。 天一黑，钱主任和孙所长等人钻进了酒店，选了间包间，熄了灯，瞪大眼睛守株待兔。到了十一点，酒店已经彻底安静下来，窗外月光朦胧，目标还没有出现。几个人眼皮正打架，忽见一团黑影跌跌撞撞地朝政府大门摸过来！这家伙以酒壮胆，真的上当了！只见那人来到标语前，半天才站稳身子，弯腰伸头，翘着屁股，逐字逐句地开始研究墙上标语，口中念念有词。 钱主任兴奋得摩拳擦掌，孙所长压低声音说：“千万别打草惊蛇，一定要等他作案结束后再抓住他，他才没法抵赖！” 几个人悄悄摸到酒店前的一棵龙柏树后面蹲下来。这时，那目标大概已经看清了标语内容，骂骂咧咧道：“这个钱、钱草包，贴、贴标语，都贴错了！废、废物！” 钱主任一听是在骂自己，火冒三丈就要冲过去，被孙所长一把摁住了。 钱主任记得，左边标语内容是“发扬民主，让群众当家作主！”那目标嘀咕着标语内容，发着牢骚：“扯、扯蛋！”伸手捣鼓半天，然后晃晃悠悠地来到右边。右边的标语内容是：“抵制腐败，让干部两袖清风！”那醉鬼鼻子又“哼”了一声，伸手弄了半天，使劲地在墙上拍打了一会，歪着脑袋念起来：“发扬腐、腐败，让群众两、两袖清风！”再歪歪倒倒摸到右边，忙乎了一阵，念道：“抵制民、民主，让干、干部当家作、作主！” 铁证如山！孙所长一挥手，众人立刻冲上去。钱主任早憋了一肚子火，飞起一脚将那人踢翻在地。没等孙所长等人扑过去捉拿，那人竟就势卧在地上，打起了呼噜。孙所长打开手电一照，众人“啊—”地一声，异口同声叫起来：“蒋镇长！” 孙所长懵了，钱主任突然明白了，这蒋镇长不醉酒还有模有样的，酒一醉，就全不知道自己干啥了，等他第二天酒醒后，头天的事儿早忘得一干二净！钱主任暗骂自己是猪脑袋，怎么就没有想到呢？最苦的还是孙所长，愣在那里傻了眼—明儿怎么交差呢？故事会2006年8期"}]